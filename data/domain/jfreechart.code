1	protected void drawItem(Graphics2D g2, int section, Rectangle2D dataArea,\n                            PiePlotState state, int currentPass) {\n\n        Number n = this.dataset.getValue(section);\n        if (n == null) {\n            return;\n        }\n        double value = n.doubleValue();\n        double angle1 = 0.0;\n        double angle2 = 0.0;\n\n        if (this.direction == Rotation.CLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 - value / state.getTotal() * 360.0;\n        }\n        else if (this.direction == Rotation.ANTICLOCKWISE) {\n            angle1 = state.getLatestAngle();\n            angle2 = angle1 + value / state.getTotal() * 360.0;\n        }\n        else {\n            throw new IllegalStateException("Rotation type not recognised.");\n        }\n\n        double angle = (angle2 - angle1);\n        if (Math.abs(angle) > getMinimumArcAngleToDraw()) {\n            double ep = 0.0;\n            double mep = getMaximumExplodePercent();\n            if (mep > 0.0) {\n                ep = getExplodePercent(section) / mep;\n            }\n            Rectangle2D arcBounds = getArcBounds(state.getPieArea(),\n                    state.getExplodedPieArea(), angle1, angle, ep);\n            Arc2D.Double arc = new Arc2D.Double(arcBounds, angle1, angle,\n                    Arc2D.PIE);\n\n            if (currentPass == 0) {\n                if (this.shadowPaint != null && this.shadowGenerator == null) {\n                    Shape shadowArc = ShapeUtilities.createTranslatedShape(\n                            arc, (float) this.shadowXOffset,\n                            (float) this.shadowYOffset);\n                    g2.setPaint(this.shadowPaint);\n                    g2.fill(shadowArc);\n                }\n            }\n            else if (currentPass == 1) {\n                Comparable key = getSectionKey(section);\n                Paint paint = lookupSectionPaint(key, state);\n                g2.setPaint(paint);\n                g2.fill(arc);\n\n                Paint outlinePaint = lookupSectionOutlinePaint(key);\n                Stroke outlineStroke = lookupSectionOutlineStroke(key);\n                if (this.sectionOutlinesVisible) {\n                    g2.setPaint(outlinePaint);\n                    g2.setStroke(outlineStroke);\n                    g2.draw(arc);\n                }\n\n                                                if (state.getInfo() != null) {\n                    EntityCollection entities = state.getEntityCollection();\n                    if (entities != null) {\n                        String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(\n                                    this.dataset, key);\n                        }\n                        String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset,\n                                    key, this.pieIndex);\n                        }\n                        PieSectionEntity entity = new PieSectionEntity(\n                                arc, this.dataset, this.pieIndex, section, key,\n                                tip, url);\n                        entities.add(entity);\n                    }\n                }\n            }\n        }\n        state.setLatestAngle(angle2);\n    }
2	protected void drawTasks(Graphics2D g2,\n                             CategoryItemRendererState state,\n                             Rectangle2D dataArea,\n                             CategoryPlot plot,\n                             CategoryAxis domainAxis,\n                             ValueAxis rangeAxis,\n                             GanttCategoryDataset dataset,\n                             int row,\n                             int column) {\n\n        int count = dataset.getSubIntervalCount(row, column);\n        if (count == 0) {\n            drawTask(g2, state, dataArea, plot, domainAxis, rangeAxis,\n                    dataset, row, column);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        for (int subinterval = 0; subinterval < count; subinterval++) {\n\n            RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge();\n\n                        Number value0 = dataset.getStartValue(row, column, subinterval);\n            if (value0 == null) {\n                return;\n            }\n            double translatedValue0 = rangeAxis.valueToJava2D(\n                    value0.doubleValue(), dataArea, rangeAxisLocation);\n\n                        Number value1 = dataset.getEndValue(row, column, subinterval);\n            if (value1 == null) {\n                return;\n            }\n            double translatedValue1 = rangeAxis.valueToJava2D(\n                    value1.doubleValue(), dataArea, rangeAxisLocation);\n\n            if (translatedValue1 < translatedValue0) {\n                double temp = translatedValue1;\n                translatedValue1 = translatedValue0;\n                translatedValue0 = temp;\n            }\n\n            double rectStart = calculateBarW0(plot, plot.getOrientation(),\n                    dataArea, domainAxis, state, row, column);\n            double rectLength = Math.abs(translatedValue1 - translatedValue0);\n            double rectBreadth = state.getBarWidth();\n\n                        Rectangle2D bar = null;\n            RectangleEdge barBase = null;\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                bar = new Rectangle2D.Double(translatedValue0, rectStart,\n                        rectLength, rectBreadth);\n                barBase = RectangleEdge.LEFT;\n            }\n            else if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                bar = new Rectangle2D.Double(rectStart, translatedValue0,\n                        rectBreadth, rectLength);\n                barBase = RectangleEdge.BOTTOM;\n            }\n\n            Rectangle2D completeBar = null;\n            Rectangle2D incompleteBar = null;\n            Number percent = dataset.getPercentComplete(row, column,\n                    subinterval);\n            double start = getStartPercent();\n            double end = getEndPercent();\n            if (percent != null) {\n                double p = percent.doubleValue();\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    completeBar = new Rectangle2D.Double(translatedValue0,\n                            rectStart + start * rectBreadth, rectLength * p,\n                            rectBreadth * (end - start));\n                    incompleteBar = new Rectangle2D.Double(translatedValue0\n                            + rectLength * p, rectStart + start * rectBreadth,\n                            rectLength * (1 - p), rectBreadth * (end - start));\n                }\n                else if (orientation == PlotOrientation.VERTICAL) {\n                    completeBar = new Rectangle2D.Double(rectStart + start\n                            * rectBreadth, translatedValue0 + rectLength\n                            * (1 - p), rectBreadth * (end - start),\n                            rectLength * p);\n                    incompleteBar = new Rectangle2D.Double(rectStart + start\n                            * rectBreadth, translatedValue0, rectBreadth\n                            * (end - start), rectLength * (1 - p));\n                }\n\n            }\n\n            if (getShadowsVisible()) {\n                getBarPainter().paintBarShadow(g2, this, row, column, bar,\n                        barBase, true);\n            }\n            getBarPainter().paintBar(g2, this, row, column, bar, barBase);\n\n            if (completeBar != null) {\n                g2.setPaint(getCompletePaint());\n                g2.fill(completeBar);\n            }\n            if (incompleteBar != null) {\n                g2.setPaint(getIncompletePaint());\n                g2.fill(incompleteBar);\n            }\n            if (isDrawBarOutline()\n                    && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n                g2.setStroke(getItemStroke(row, column));\n                g2.setPaint(getItemOutlinePaint(row, column));\n                g2.draw(bar);\n            }\n\n            if (subinterval == count - 1) {\n                                int datasetIndex = plot.indexOf(dataset);\n                Comparable columnKey = dataset.getColumnKey(column);\n                Comparable rowKey = dataset.getRowKey(row);\n                double xx = domainAxis.getCategorySeriesMiddle(columnKey,\n                        rowKey, dataset, getItemMargin(), dataArea,\n                        plot.getDomainAxisEdge());\n                updateCrosshairValues(state.getCrosshairState(),\n                        dataset.getRowKey(row), dataset.getColumnKey(column),\n                        value1.doubleValue(), datasetIndex, xx,\n                        translatedValue1, orientation);\n\n            }\n                        if (state.getInfo() != null) {\n                EntityCollection entities = state.getEntityCollection();\n                if (entities != null) {\n                    addItemEntity(entities, dataset, row, column, bar);\n                }\n            }\n        }\n    }
3	public static PieDataset createPieDatasetForRow(CategoryDataset dataset,\n                                                    int row) {\n        DefaultPieDataset result = new DefaultPieDataset();\n        int columnCount = dataset.getColumnCount();\n        for (int current = 0; current < columnCount; current++) {\n            Comparable columnKey = dataset.getColumnKey(current);\n            result.setValue(columnKey, dataset.getValue(row, current));\n        }\n        return result;\n    }
4	public void clearObservations() {\n        Iterator iterator = this.bins.iterator();\n        while (iterator.hasNext()) {\n            SimpleHistogramBin bin = (SimpleHistogramBin) iterator.next();\n            bin.setItemCount(0);\n        }\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }
5	public XYDataItem remove(int index) {\n        XYDataItem removed = (XYDataItem) this.data.remove(index);\n        updateBoundsForRemovedItem(removed);\n        fireSeriesChanged();\n        return removed;\n    }
6	protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        List blocks = container.getBlocks();\n        Block b = (Block) blocks.get(0);\n        Size2D s = b.arrange(g2, RectangleConstraint.NONE);\n        b.setBounds(new Rectangle2D.Double(0.0, 0.0, s.width, s.height));\n        return new Size2D(s.width, s.height);\n    }
7	public void toggleAutoRange() {\n        this.autoRange = this.autoRangeCheckBox.isSelected();\n        if (this.autoRange) {\n            this.minimumRangeValue.setText(Double.toString(this.minimumValue));\n            this.minimumRangeValue.setEnabled(false);\n            this.maximumRangeValue.setText(Double.toString(this.maximumValue));\n            this.maximumRangeValue.setEnabled(false);\n        }\n        else {\n            this.minimumRangeValue.setEnabled(true);\n            this.maximumRangeValue.setEnabled(true);\n        }\n    }
8	protected double findMaximumTickLabelHeight(List ticks, Graphics2D g2,\n            Rectangle2D drawArea, boolean vertical) {\n\n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        g2.setFont(font);\n        double maxHeight = 0.0;\n        if (vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = null;\n                if (tick instanceof LogTick) {\n                    LogTick lt = (LogTick) tick;\n                    if (lt.getAttributedLabel() != null) {\n                        labelBounds = AttrStringUtils.getTextBounds(\n                                lt.getAttributedLabel(), g2);\n                    }\n                } else if (tick.getText() != null) {\n                    labelBounds = TextUtilities.getTextBounds(\n                            tick.getText(), g2, fm);\n                }\n                if (labelBounds != null && labelBounds.getWidth() \n                        + insets.getTop() + insets.getBottom() > maxHeight) {\n                    maxHeight = labelBounds.getWidth()\n                                + insets.getTop() + insets.getBottom();\n                }\n            }\n        } else {\n            LineMetrics metrics = font.getLineMetrics("ABCxyz",\n                    g2.getFontRenderContext());\n            maxHeight = metrics.getHeight()\n                        + insets.getTop() + insets.getBottom();\n        }\n        return maxHeight;\n\n    }
9	protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n\n        if (!axis.getRange().contains(value)) {\n            return;\n        }\n        Line2D line;\n        if (orientation == PlotOrientation.VERTICAL) {\n            double xx = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.BOTTOM);\n            line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n        } else {\n            double yy = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.LEFT);\n            line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n        }\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        g2.setStroke(stroke);\n        g2.setPaint(paint);\n        g2.draw(line);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
10	public boolean removeAnnotation(CategoryAnnotation annotation,\n            boolean notify) {\n        ParamChecks.nullNotPermitted(annotation, "annotation");\n        boolean removed = this.annotations.remove(annotation);\n        annotation.removeChangeListener(this);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }
11	public static Range combine(Range range1, Range range2) {\n        if (range1 == null) {\n            return range2;\n        }\n        if (range2 == null) {\n            return range1;\n        }\n        double l = Math.min(range1.getLowerBound(), range2.getLowerBound());\n        double u = Math.max(range1.getUpperBound(), range2.getUpperBound());\n        return new Range(l, u);\n    }
12	public final void draw() {\n        GraphicsContext ctx = getGraphicsContext2D();\n        ctx.save();\n        double width = getWidth();\n        double height = getHeight();\n        if (width > 0 && height > 0) {\n            ctx.clearRect(0, 0, width, height);\n            this.info = new ChartRenderingInfo();\n            this.chart.draw(this.g2, new Rectangle((int) width, (int) height), \n                    this.anchor, this.info);\n        }\n        ctx.restore();\n        this.anchor = null;\n    }
13	public void addOverlay(Overlay overlay) {\n        ParamChecks.nullNotPermitted(overlay, "overlay");\n        this.overlays.add(overlay);\n        overlay.addChangeListener(this);\n        repaint();\n    }
14	public void setValue(Comparable key, Number value) {\n        ParamChecks.nullNotPermitted(key, "key");\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            this.keys.set(keyIndex, key);\n            this.values.set(keyIndex, value);\n        }\n        else {\n            this.keys.add(key);\n            this.values.add(value);\n            this.indexMap.put(key, new Integer(this.keys.size() - 1));\n        }\n    }
15	private void updateBounds(TimePeriod period, int index) {\n        \n        long start = period.getStart().getTime();\n        long end = period.getEnd().getTime();\n        long middle = start + ((end - start) / 2);\n\n        if (this.minStartIndex >= 0) {\n            long minStart = getDataItem(this.minStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start < minStart) {\n                this.minStartIndex = index;           \n            }\n        }\n        else {\n            this.minStartIndex = index;\n        }\n        \n        if (this.maxStartIndex >= 0) {\n            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start > maxStart) {\n                this.maxStartIndex = index;           \n            }\n        }\n        else {\n            this.maxStartIndex = index;\n        }\n        \n        if (this.minMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long minMiddle = s + (e - s) / 2;\n            if (middle < minMiddle) {\n                this.minMiddleIndex = index;           \n            }\n        }\n        else {\n            this.minMiddleIndex = index;\n        }\n        \n        if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long maxMiddle = s + (e - s) / 2;\n            if (middle > maxMiddle) {\n                this.maxMiddleIndex = index;           \n            }\n        }\n        else {\n            this.maxMiddleIndex = index;\n        }\n        \n        if (this.minEndIndex >= 0) {\n            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end < minEnd) {\n                this.minEndIndex = index;           \n            }\n        }\n        else {\n            this.minEndIndex = index;\n        }\n       \n        if (this.maxEndIndex >= 0) {\n            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end > maxEnd) {\n                this.maxEndIndex = index;           \n            }\n        }\n        else {\n            this.maxEndIndex = index;\n        }\n        \n    }
16	public void validateAngleOffset() {\n        double newOffset;\n        try {\n            newOffset = Double.parseDouble(this.angleOffset.getText());\n        }\n        catch (NumberFormatException e) {\n            newOffset = this.angleOffsetValue;\n        }\n        this.angleOffsetValue = newOffset;\n        this.angleOffset.setText(Double.toString(this.angleOffsetValue));\n    }
17	public void add(XYPlot subplot, int weight) {\n        ParamChecks.nullNotPermitted(subplot, "subplot");\n        if (weight <= 0) {\n            String msg = "The 'weight' must be positive.";\n            throw new IllegalArgumentException(msg);\n        }\n\n                subplot.setParent(this);\n        subplot.setWeight(weight);\n        subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));\n        subplot.setRangeAxis(null);\n        subplot.addChangeListener(this);\n        this.subplots.add(subplot);\n        configureRangeAxes();\n        fireChangeEvent();\n\n    }
18	public void removeLayer(int index) {\n        DialLayer layer = (DialLayer) this.layers.get(index);\n        if (layer != null) {\n            layer.removeChangeListener(this);\n        }\n        this.layers.remove(index);\n        fireChangeEvent();\n    }
19	protected void drawNoDataMessage(Graphics2D g2, Rectangle2D area) {\n        Shape savedClip = g2.getClip();\n        g2.clip(area);\n        String message = this.noDataMessage;\n        if (message != null) {\n            g2.setFont(this.noDataMessageFont);\n            g2.setPaint(this.noDataMessagePaint);\n            TextBlock block = TextUtilities.createTextBlock(\n                    this.noDataMessage, this.noDataMessageFont,\n                    this.noDataMessagePaint, 0.9f * (float) area.getWidth(),\n                    new G2TextMeasurer(g2));\n            block.draw(g2, (float) area.getCenterX(),\n                    (float) area.getCenterY(), TextBlockAnchor.CENTER);\n        }\n        g2.setClip(savedClip);\n    }
20	public void zoomInRange(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n            Zoomable z = (Zoomable) plot;\n            z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(),\n                    translateScreenToJava2D(new Point((int) x, (int) y)),\n                    this.zoomAroundAnchor);\n            plot.setNotify(savedNotify);\n        }\n    }
21	protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea,\n                                      double value, Stroke stroke,\n                                      Paint paint) {\n\n        ValueAxis axis = getRangeAxis();\n        if (getOrientation() == PlotOrientation.HORIZONTAL) {\n            axis = getDomainAxis();\n        }\n        if (axis.getRange().contains(value)) {\n            double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);\n            Line2D line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }
22	public void removeAllValuesForX(Number x) {\n        ParamChecks.nullNotPermitted(x, "x");\n        boolean savedState = this.propagateEvents;\n        this.propagateEvents = false;\n        for (int s = 0; s < this.data.size(); s++) {\n            XYSeries series = (XYSeries) this.data.get(s);\n            series.remove(x);\n        }\n        this.propagateEvents = savedState;\n        this.xPoints.remove(x);\n        fireDatasetChanged();\n    }
23	public static Range iterateDomainBounds(XYDataset dataset,\n            boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue, uvalue;\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = intervalXYData.getXValue(series, item);\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = dataset.getXValue(series, item);\n                    uvalue = lvalue;\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }
24	protected AxisSpace calculateAxisSpace(Graphics2D g2, \n            Rectangle2D plotArea) {\n        AxisSpace space = new AxisSpace();\n        space = calculateRangeAxisSpace(g2, plotArea, space);\n        space = calculateDomainAxisSpace(g2, plotArea, space);\n        return space;\n    }
25	protected void update(Comparable x, Object y) {\n        int index = indexOf(x);\n        if (index < 0) {\n            throw new SeriesException("No observation for x = " + x);\n        }\n        else {\n            ComparableObjectItem item = getDataItem(index);\n            item.setObject(y);\n            fireSeriesChanged();\n        }\n    }
26	private void drawMultipleEllipse(Point2D point, double boxWidth,\n                                     double oRadius, Graphics2D g2)  {\n\n        Ellipse2D dot1 = new Ellipse2D.Double(point.getX() - (boxWidth / 2)\n                + oRadius, point.getY(), oRadius, oRadius);\n        Ellipse2D dot2 = new Ellipse2D.Double(point.getX() + (boxWidth / 2),\n                point.getY(), oRadius, oRadius);\n        g2.draw(dot1);\n        g2.draw(dot2);\n    }
27	protected void drawSide(Graphics2D g2,\n                            Rectangle2D plotArea,\n                            Arc2D arc,\n                            Area front,\n                            Area back,\n                            Paint paint,\n                            Paint outlinePaint,\n                            Stroke outlineStroke,\n                            boolean drawFront,\n                            boolean drawBack) {\n\n        if (getDarkerSides()) {\n             paint = PaintAlpha.darker(paint);\n        }\n\n        double start = arc.getAngleStart();\n        double extent = arc.getAngleExtent();\n        double end = start + extent;\n\n        g2.setStroke(outlineStroke);\n\n                if (extent < 0.0) {\n\n            if (isAngleAtFront(start)) {  \n                if (!isAngleAtBack(end)) {\n\n                    if (extent > -180.0) {                                                                      if (drawFront) {\n                            Area side = new Area(new Rectangle2D.Double(\n                                    arc.getEndPoint().getX(), plotArea.getY(),\n                                    arc.getStartPoint().getX()\n                                    - arc.getEndPoint().getX(),\n                                    plotArea.getHeight()));\n                            side.intersect(front);\n                            g2.setPaint(paint);\n                            g2.fill(side);\n                            g2.setPaint(outlinePaint);\n                            g2.draw(side);\n                        }\n                    }\n                    else {                                                                                  Area side1 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getStartPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(front);\n\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                arc.getEndPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getEndPoint().getX(),\n                                plotArea.getHeight()));\n\n                        side2.intersect(front);\n                        g2.setPaint(paint);\n                        if (drawFront) {\n                            g2.fill(side1);\n                            g2.fill(side2);\n                        }\n\n                        if (drawBack) {\n                            g2.fill(back);\n                        }\n\n                        g2.setPaint(outlinePaint);\n                        if (drawFront) {\n                            g2.draw(side1);\n                            g2.draw(side2);\n                        }\n\n                        if (drawBack) {\n                            g2.draw(back);\n                        }\n\n                    }\n                }\n                else {                          \n                    if (drawBack) {\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getEndPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(back);\n                        g2.setPaint(paint);\n                        g2.fill(side2);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side2);\n                    }\n\n                    if (drawFront) {\n                        Area side1 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getStartPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(front);\n                        g2.setPaint(paint);\n                        g2.fill(side1);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side1);\n                    }\n                }\n            }\n            else {                      \n                if (!isAngleAtFront(end)) {\n                    if (extent > -180.0) {                          if (drawBack) {\n                            Area side = new Area(new Rectangle2D.Double(\n                                    arc.getStartPoint().getX(), plotArea.getY(),\n                                    arc.getEndPoint().getX()\n                                    - arc.getStartPoint().getX(),\n                                    plotArea.getHeight()));\n                            side.intersect(back);\n                            g2.setPaint(paint);\n                            g2.fill(side);\n                            g2.setPaint(outlinePaint);\n                            g2.draw(side);\n                        }\n                    }\n                    else {                                                      Area side1 = new Area(new Rectangle2D.Double(\n                                arc.getStartPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getStartPoint().getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(back);\n\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getEndPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n\n                        side2.intersect(back);\n\n                        g2.setPaint(paint);\n                        if (drawBack) {\n                            g2.fill(side1);\n                            g2.fill(side2);\n                        }\n\n                        if (drawFront) {\n                            g2.fill(front);\n                        }\n\n                        g2.setPaint(outlinePaint);\n                        if (drawBack) {\n                            g2.draw(side1);\n                            g2.draw(side2);\n                        }\n\n                        if (drawFront) {\n                            g2.draw(front);\n                        }\n\n                    }\n                }\n                else {  \n                    if (drawBack) {\n                        Area side1 = new Area(new Rectangle2D.Double(\n                                arc.getStartPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getStartPoint().getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(back);\n                        g2.setPaint(paint);\n                        g2.fill(side1);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side1);\n                    }\n\n                    if (drawFront) {\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                arc.getEndPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getEndPoint().getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(front);\n                        g2.setPaint(paint);\n                        g2.fill(side2);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side2);\n                    }\n\n                }\n            }\n        }\n        else if (extent > 0.0) {  \n            if (isAngleAtFront(start)) {  \n                if (!isAngleAtBack(end)) {  \n                    if (extent < 180.0) {                          if (drawFront) {\n                            Area side = new Area(new Rectangle2D.Double(\n                                    arc.getStartPoint().getX(), plotArea.getY(),\n                                    arc.getEndPoint().getX()\n                                    - arc.getStartPoint().getX(),\n                                    plotArea.getHeight()));\n                            side.intersect(front);\n                            g2.setPaint(paint);\n                            g2.fill(side);\n                            g2.setPaint(outlinePaint);\n                            g2.draw(side);\n                        }\n                    }\n                    else {                          Area side1 = new Area(new Rectangle2D.Double(\n                                arc.getStartPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getStartPoint().getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(front);\n\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getEndPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(front);\n\n                        g2.setPaint(paint);\n                        if (drawFront) {\n                            g2.fill(side1);\n                            g2.fill(side2);\n                        }\n\n                        if (drawBack) {\n                            g2.fill(back);\n                        }\n\n                        g2.setPaint(outlinePaint);\n                        if (drawFront) {\n                            g2.draw(side1);\n                            g2.draw(side2);\n                        }\n\n                        if (drawBack) {\n                            g2.draw(back);\n                        }\n\n                    }\n                }\n                else {                      if (drawBack) {\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                arc.getEndPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getEndPoint().getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(back);\n                        g2.setPaint(paint);\n                        g2.fill(side2);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side2);\n                    }\n\n                    if (drawFront) {\n                        Area side1 = new Area(new Rectangle2D.Double(\n                                arc.getStartPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getStartPoint().getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(front);\n                        g2.setPaint(paint);\n                        g2.fill(side1);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side1);\n                    }\n                }\n            }\n            else {  \n                if (!isAngleAtFront(end)) {\n                    if (extent < 180.0) {                          if (drawBack) {\n                            Area side = new Area(new Rectangle2D.Double(\n                                    arc.getEndPoint().getX(), plotArea.getY(),\n                                    arc.getStartPoint().getX()\n                                    - arc.getEndPoint().getX(),\n                                    plotArea.getHeight()));\n                            side.intersect(back);\n                            g2.setPaint(paint);\n                            g2.fill(side);\n                            g2.setPaint(outlinePaint);\n                            g2.draw(side);\n                        }\n                    }\n                    else {                                                      Area side1 = new Area(new Rectangle2D.Double(\n                                arc.getStartPoint().getX(), plotArea.getY(),\n                                plotArea.getX() - arc.getStartPoint().getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(back);\n\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                arc.getEndPoint().getX(), plotArea.getY(),\n                                plotArea.getMaxX() - arc.getEndPoint().getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(back);\n\n                        g2.setPaint(paint);\n                        if (drawBack) {\n                            g2.fill(side1);\n                            g2.fill(side2);\n                        }\n\n                        if (drawFront) {\n                            g2.fill(front);\n                        }\n\n                        g2.setPaint(outlinePaint);\n                        if (drawBack) {\n                            g2.draw(side1);\n                            g2.draw(side2);\n                        }\n\n                        if (drawFront) {\n                            g2.draw(front);\n                        }\n\n                    }\n                }\n                else {                                              if (drawBack) {\n                        Area side1 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getStartPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side1.intersect(back);\n                        g2.setPaint(paint);\n                        g2.fill(side1);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side1);\n                    }\n\n                    if (drawFront) {\n                        Area side2 = new Area(new Rectangle2D.Double(\n                                plotArea.getX(), plotArea.getY(),\n                                arc.getEndPoint().getX() - plotArea.getX(),\n                                plotArea.getHeight()));\n                        side2.intersect(front);\n                        g2.setPaint(paint);\n                        g2.fill(side2);\n                        g2.setPaint(outlinePaint);\n                        g2.draw(side2);\n                    }\n                }\n            }\n\n        }\n\n    }
28	public static void drawRotatedString(AttributedString text, Graphics2D g2,\n            float x, float y, TextAnchor textAnchor,\n            double angle, TextAnchor rotationAnchor) {\n        ParamChecks.nullNotPermitted(text, "text");\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor, \n                null);\n        float[] rotateAdj = deriveRotationAnchorOffsets(g2, text, \n                rotationAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1],\n                angle, x + textAdj[0] + rotateAdj[0],\n                y + textAdj[1] + rotateAdj[1]);        \n    }
29	public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                    List ticks) {\n        Paint bandPaint = getDomainTickBandPaint();\n        if (bandPaint != null) {\n            boolean fillBand = false;\n            ValueAxis xAxis = getDomainAxis();\n            double previous = xAxis.getLowerBound();\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                ValueTick tick = (ValueTick) iterator.next();\n                double current = tick.getValue();\n                if (fillBand) {\n                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,\n                            previous, current);\n                }\n                previous = current;\n                fillBand = !fillBand;\n            }\n            double end = xAxis.getUpperBound();\n            if (fillBand) {\n                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,\n                        previous, end);\n            }\n        }\n    }
30	protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }
31	public static Quarter parseQuarter(String s) {\n\n                        int i = s.indexOf("Q");\n        if (i == -1) {\n            throw new TimePeriodFormatException("Missing Q.");\n        }\n\n        if (i == s.length() - 1) {\n            throw new TimePeriodFormatException("Q found at end of string.");\n        }\n\n        String qstr = s.substring(i + 1, i + 2);\n        int quarter = Integer.parseInt(qstr);\n        String remaining = s.substring(0, i) + s.substring(i + 2, s.length());\n\n                remaining = remaining.replace('/', ' ');\n        remaining = remaining.replace(',', ' ');\n        remaining = remaining.replace('-', ' ');\n\n                Year year = Year.parseYear(remaining.trim());\n        Quarter result = new Quarter(quarter, year);\n        return result;\n\n    }
32	public void addRangeCrosshair(Crosshair crosshair) {\n        ParamChecks.nullNotPermitted(crosshair, "crosshair");\n        this.yCrosshairs.add(crosshair);\n        crosshair.addPropertyChangeListener(this);\n        fireOverlayChanged();\n    }
33	public void doCopy() {\n        Clipboard systemClipboard\n                = Toolkit.getDefaultToolkit().getSystemClipboard();\n        Insets insets = getInsets();\n        int w = getWidth() - insets.left - insets.right;\n        int h = getHeight() - insets.top - insets.bottom;\n        ChartTransferable selection = new ChartTransferable(this.chart, w, h,\n                getMinimumDrawWidth(), getMinimumDrawHeight(),\n                getMaximumDrawWidth(), getMaximumDrawHeight(), true);\n        systemClipboard.setContents(selection, null);\n    }
34	public static RectangleEdge resolveRangeAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n\n        ParamChecks.nullNotPermitted(location, "location");\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n\n        RectangleEdge result = null;\n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n\n                if (result == null) {\n            throw new IllegalStateException("resolveRangeAxisLocation()");\n        }\n        return result;\n\n    }
35	public static void writeScaledChartAsPNG(OutputStream out,\n            JFreeChart chart, int width, int height, int widthScaleFactor,\n            int heightScaleFactor) throws IOException {\n\n        ParamChecks.nullNotPermitted(out, "out");\n        ParamChecks.nullNotPermitted(chart, "chart");\n\n        double desiredWidth = width * widthScaleFactor;\n        double desiredHeight = height * heightScaleFactor;\n        double defaultWidth = width;\n        double defaultHeight = height;\n        boolean scale = false;\n\n                if ((widthScaleFactor != 1) || (heightScaleFactor != 1)) {\n            scale = true;\n        }\n\n        double scaleX = desiredWidth / defaultWidth;\n        double scaleY = desiredHeight / defaultHeight;\n\n        BufferedImage image = new BufferedImage((int) desiredWidth,\n                (int) desiredHeight, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2 = image.createGraphics();\n\n        if (scale) {\n            AffineTransform saved = g2.getTransform();\n            g2.transform(AffineTransform.getScaleInstance(scaleX, scaleY));\n            chart.draw(g2, new Rectangle2D.Double(0, 0, defaultWidth,\n                    defaultHeight), null, null);\n            g2.setTransform(saved);\n            g2.dispose();\n        }\n        else {\n            chart.draw(g2, new Rectangle2D.Double(0, 0, defaultWidth,\n                    defaultHeight), null, null);\n        }\n        out.write(encodeAsPNG(image));\n\n    }
36	protected void findDomainLimits() {\n        long startL = getOldestTime().getFirstMillisecond(this.workingCalendar);\n        long endL;\n        if (this.domainIsPointsInTime) {\n            endL = getNewestTime().getFirstMillisecond(this.workingCalendar);\n        }\n        else {\n            endL = getNewestTime().getLastMillisecond(this.workingCalendar);\n        }\n        this.domainStart = new Long(startL);\n        this.domainEnd = new Long(endL);\n        this.domainRange = new Range(startL, endL);\n    }
37	public void remove(CategoryPlot subplot) {\n        ParamChecks.nullNotPermitted(subplot, "subplot");\n        int position = -1;\n        int size = this.subplots.size();\n        int i = 0;\n        while (position == -1 && i < size) {\n            if (this.subplots.get(i) == subplot) {\n                position = i;\n            }\n            i++;\n        }\n        if (position != -1) {\n            this.subplots.remove(position);\n            subplot.setParent(null);\n            subplot.removeChangeListener(this);\n            CategoryAxis domain = getDomainAxis();\n            if (domain != null) {\n                domain.configure();\n            }\n            fireChangeEvent();\n        }\n    }
38	public static String searchReplace(String inputString,\n                                       String searchString,\n                                       String replaceString) {\n\n        int i = inputString.indexOf(searchString);\n        if (i == -1) {\n            return inputString;\n        }\n\n        String r = "";\n        r += inputString.substring(0, i) + replaceString;\n        if (i + searchString.length() < inputString.length()) {\n            r += searchReplace(inputString.substring(i + searchString.length()),\n                    searchString, replaceString);\n        }\n\n        return r;\n    }
39	public void clearDomainMarkers(int index) {\n        Integer key = new Integer(index);\n        if (this.backgroundDomainMarkers != null) {\n            Collection markers\n                = (Collection) this.backgroundDomainMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        if (this.foregroundDomainMarkers != null) {\n            Collection markers\n                = (Collection) this.foregroundDomainMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        fireChangeEvent();\n    }
40	protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double width = constraint.getWidth() / this.columns;\n        double height = constraint.getHeight() / this.rows;\n        List blocks = container.getBlocks();\n        for (int c = 0; c < this.columns; c++) {\n            for (int r = 0; r < this.rows; r++) {\n                int index = r * this.columns + c;\n                if (index >= blocks.size()) {\n                    break;\n                }\n                Block b = (Block) blocks.get(index);\n                if (b != null) {\n                    b.setBounds(new Rectangle2D.Double(c * width, r * height,\n                            width, height));\n                }\n            }\n        }\n        return new Size2D(this.columns * width, this.rows * height);\n    }
41	public void delete(int start, int end, boolean notify) {\n        if (end < start) {\n            throw new IllegalArgumentException("Requires start <= end.");\n        }\n        for (int i = 0; i <= (end - start); i++) {\n            this.data.remove(start);\n        }\n        updateMinMaxYByIteration();\n        if (this.data.isEmpty()) {\n            this.timePeriodClass = null;\n        }\n        if (notify) {\n            fireSeriesChanged();\n        }\n    }
42	public void removeAgedItems(boolean notify) {\n                        if (getItemCount() > 1) {\n            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();\n            boolean removed = false;\n            while ((latest - getTimePeriod(0).getSerialIndex())\n                    > this.maximumItemAge) {\n                this.data.remove(0);\n                removed = true;\n            }\n            if (removed) {\n                updateMinMaxYByIteration();\n                if (notify) {\n                    fireSeriesChanged();\n                }\n            }\n        }\n    }
43	protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        Size2D size1 = arrange(container, g2, RectangleConstraint.NONE);\n\n        if (constraint.getWidthRange().contains(size1.getWidth())) {\n            if (constraint.getHeightRange().contains(size1.getHeight())) {\n                return size1;\n            }\n            else {\n                                double h = constraint.getHeightRange().constrain(\n                        size1.getHeight());\n                RectangleConstraint cc = new RectangleConstraint(\n                        size1.getWidth(), h);\n                return arrangeFF(container, g2, cc);\n            }\n        }\n        else {\n            if (constraint.getHeightRange().contains(size1.getHeight())) {\n                                double w = constraint.getWidthRange().constrain(\n                        size1.getWidth());\n                RectangleConstraint cc = new RectangleConstraint(w,\n                        size1.getHeight());\n                return arrangeFF(container, g2, cc);\n\n            }\n            else {\n                double w = constraint.getWidthRange().constrain(\n                        size1.getWidth());\n                double h = constraint.getHeightRange().constrain(\n                        size1.getHeight());\n                RectangleConstraint cc = new RectangleConstraint(w, h);\n                return arrangeFF(container, g2, cc);\n            }\n        }\n    }
44	public void validateTickUnit() {\n        double newTickUnit;\n        try {\n            newTickUnit = Double.parseDouble(this.manualTickUnit.getText());\n        }\n        catch (NumberFormatException e) {\n            newTickUnit = this.manualTickUnitValue;\n        }\n\n        if (newTickUnit > 0.0 && newTickUnit < 360.0) {\n            this.manualTickUnitValue = newTickUnit;\n        }\n        this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));\n    }
45	private void drawAdditionalItemLabel(Graphics2D g2,\n            PlotOrientation orientation, XYDataset dataset, int series,\n            int item, double x, double y) {\n\n        if (this.additionalItemLabelGenerator == null) {\n            return;\n        }\n\n        Font labelFont = getItemLabelFont(series, item);\n        Paint paint = getItemLabelPaint(series, item);\n        g2.setFont(labelFont);\n        g2.setPaint(paint);\n        String label = this.additionalItemLabelGenerator.generateLabel(dataset,\n                series, item);\n\n        ItemLabelPosition position = getNegativeItemLabelPosition(series, item);\n        Point2D anchorPoint = calculateLabelAnchorPoint(\n                position.getItemLabelAnchor(), x, y, orientation);\n        TextUtilities.drawRotatedString(label, g2,\n                (float) anchorPoint.getX(), (float) anchorPoint.getY(),\n                position.getTextAnchor(), position.getAngle(),\n                position.getRotationAnchor());\n    }
46	public String generateLabelString(XYDataset dataset, int series, int item) {\n        String result;\n        Object[] items = createItemArray(dataset, series, item);\n        result = MessageFormat.format(this.formatString, items);\n        return result;\n    }
47	public void zoomInDomain(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n            Zoomable z = (Zoomable) plot;\n            z.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(),\n                    translateScreenToJava2D(new Point((int) x, (int) y)),\n                    this.zoomAroundAnchor);\n            plot.setNotify(savedNotify);\n        }\n    }
48	private int[] joinMap(int[] a, int[] b) {\n        if (a == null) {\n            return b;\n        }\n        if (b == null) {\n            return a;\n        }\n        int[] result = new int[a.length + b.length];\n        System.arraycopy(a, 0, result, 0, a.length);\n        System.arraycopy(b, 0, result, a.length, b.length);\n        return result;\n    }
49	private double transEnd(double value, Rectangle2D area, RectangleEdge edge,\n                            double length1, double length2) {\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            max = area.getMaxX();\n            min = area.getMaxX() - area.getWidth() * length2\n                  / (length1 + length2);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            max = area.getMinY();\n            min = area.getMinY() + area.getHeight() * length2\n                  / (length1 + length2);\n        }\n        if (isInverted()) {\n            return max - ((value - this.fixedRange.getLowerBound())\n                    / (this.displayEnd - this.fixedRange.getLowerBound()))\n                    * (max - min);\n        }\n        else {\n            return min + ((value - this.fixedRange.getLowerBound())\n                    / (this.displayEnd - this.fixedRange.getLowerBound()))\n                    * (max - min);\n        }\n\n    }
50	public void add(TaskSeries series) {\n        ParamChecks.nullNotPermitted(series, "series");\n        this.data.add(series);\n        series.addChangeListener(this);\n\n                Iterator iterator = series.getTasks().iterator();\n        while (iterator.hasNext()) {\n            Task task = (Task) iterator.next();\n            String key = task.getDescription();\n            int index = this.keys.indexOf(key);\n            if (index < 0) {\n                this.keys.add(key);\n            }\n        }\n        fireDatasetChanged();\n    }
51	public void setObject(Comparable key, Object object) {\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            KeyedObject ko = (KeyedObject) this.data.get(keyIndex);\n            ko.setObject(object);\n        }\n        else {\n            KeyedObject ko = new KeyedObject(key, object);\n            this.data.add(ko);\n        }\n    }
52	public static Week parseWeek(String s) {\n\n        Week result = null;\n        if (s != null) {\n\n                        s = s.trim();\n\n            int i = Week.findSeparator(s);\n            if (i != -1) {\n                String s1 = s.substring(0, i).trim();\n                String s2 = s.substring(i + 1, s.length()).trim();\n\n                Year y = Week.evaluateAsYear(s1);\n                int w;\n                if (y != null) {\n                    w = Week.stringToWeek(s2);\n                    if (w == -1) {\n                        throw new TimePeriodFormatException(\n                                "Can't evaluate the week.");\n                    }\n                    result = new Week(w, y);\n                }\n                else {\n                    y = Week.evaluateAsYear(s2);\n                    if (y != null) {\n                        w = Week.stringToWeek(s1);\n                        if (w == -1) {\n                            throw new TimePeriodFormatException(\n                                    "Can't evaluate the week.");\n                        }\n                        result = new Week(w, y);\n                    }\n                    else {\n                        throw new TimePeriodFormatException(\n                                "Can't evaluate the year.");\n                    }\n                }\n\n            }\n            else {\n                throw new TimePeriodFormatException(\n                        "Could not find separator.");\n            }\n\n        }\n        return result;\n\n    }
53	public void restoreAutoDomainBounds() {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n            Zoomable z = (Zoomable) plot;\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n                        Point2D zp = (this.zoomPoint != null\n                    ? this.zoomPoint : new Point());\n            z.zoomDomainAxes(0.0, this.info.getPlotInfo(), zp);\n            plot.setNotify(savedNotify);\n        }\n    }
54	public static JFreeChart createScatterPlot(String title, String xAxisLabel,\n            String yAxisLabel, XYDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setAutoRangeIncludesZero(false);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);\n        renderer.setBaseToolTipGenerator(toolTipGenerator);\n        renderer.setURLGenerator(urlGenerator);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
55	public static double calculateMedian(List values, boolean copyAndSort) {\n\n        double result = Double.NaN;\n        if (values != null) {\n            if (copyAndSort) {\n                int itemCount = values.size();\n                List copy = new ArrayList(itemCount);\n                for (int i = 0; i < itemCount; i++) {\n                    copy.add(i, values.get(i));\n                }\n                Collections.sort(copy);\n                values = copy;\n            }\n            int count = values.size();\n            if (count > 0) {\n                if (count % 2 == 1) {\n                    if (count > 1) {\n                        Number value = (Number) values.get((count - 1) / 2);\n                        result = value.doubleValue();\n                    }\n                    else {\n                        Number value = (Number) values.get(0);\n                        result = value.doubleValue();\n                    }\n                }\n                else {\n                    Number value1 = (Number) values.get(count / 2 - 1);\n                    Number value2 = (Number) values.get(count / 2);\n                    result = (value1.doubleValue() + value2.doubleValue())\n                             / 2.0;\n                }\n            }\n        }\n        return result;\n    }
56	public void pan(double percent) {\n        Range r = getRange();\n        double length = range.getLength();\n        double adj = length * percent;\n        double lower = r.getLowerBound() + adj;\n        double upper = r.getUpperBound() + adj;\n        setRange(lower, upper);\n    }
57	public void add(double value, Paint paint) {\n        PaintItem item = new PaintItem(value, paint);\n        int index = Collections.binarySearch(this.lookupTable, item);\n        if (index >= 0) {\n            this.lookupTable.set(index, item);\n        }\n        else {\n            this.lookupTable.add(-(index + 1), item);\n        }\n    }
58	protected void drawArcForInterval(Graphics2D g2, Rectangle2D meterArea,\n                                      MeterInterval interval) {\n\n        double minValue = interval.getRange().getLowerBound();\n        double maxValue = interval.getRange().getUpperBound();\n        Paint outlinePaint = interval.getOutlinePaint();\n        Stroke outlineStroke = interval.getOutlineStroke();\n        Paint backgroundPaint = interval.getBackgroundPaint();\n\n        if (backgroundPaint != null) {\n            fillArc(g2, meterArea, minValue, maxValue, backgroundPaint, false);\n        }\n        if (outlinePaint != null) {\n            if (outlineStroke != null) {\n                drawArc(g2, meterArea, minValue, maxValue, outlinePaint,\n                        outlineStroke);\n            }\n            drawTick(g2, meterArea, minValue, true);\n            drawTick(g2, meterArea, maxValue, true);\n        }\n    }
59	public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        boolean allItemsNull = true;                                              double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }
60	public void createChartPrintJob() {\n        PrinterJob job = PrinterJob.getPrinterJob();\n        PageFormat pf = job.defaultPage();\n        PageFormat pf2 = job.pageDialog(pf);\n        if (pf2 != pf) {\n            job.setPrintable(this, pf2);\n            if (job.printDialog()) {\n                try {\n                    job.print();\n                }\n                catch (PrinterException e) {\n                    JOptionPane.showMessageDialog(this, e);\n                }\n            }\n        }\n    }
61	protected void drawGridBands(Graphics2D g2, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge, List ticks) {\n        Shape savedClip = g2.getClip();\n        g2.clip(dataArea);\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            drawGridBandsHorizontal(g2, plotArea, dataArea, true, ticks);\n        } else if (RectangleEdge.isLeftOrRight(edge)) {\n            drawGridBandsVertical(g2, plotArea, dataArea, true, ticks);\n        }\n        g2.setClip(savedClip);\n    }
62	private StrokeLineJoin awtToJavaFXLineJoin(int j) {\n        if (j == BasicStroke.JOIN_BEVEL) {\n            return StrokeLineJoin.BEVEL;\n        } else if (j == BasicStroke.JOIN_MITER) {\n            return StrokeLineJoin.MITER;\n        } else if (j == BasicStroke.JOIN_ROUND) {\n            return StrokeLineJoin.ROUND;\n        } else {\n            throw new IllegalArgumentException("Unrecognised join code: " + j);            \n        }\n    }
63	public void zoomOutBoth(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot == null) {\n            return;\n        }\n                                boolean savedNotify = plot.isNotify();\n        plot.setNotify(false);\n        zoomOutDomain(x, y);\n        zoomOutRange(x, y);\n        plot.setNotify(savedNotify);\n    }
64	protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n\n        if (!axis.getRange().contains(value)) {\n            return;\n        }\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        Line2D line;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double xx = axis.valueToJava2D(value, dataArea, \n                    RectangleEdge.BOTTOM);\n            line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n        } else {\n            double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);\n            line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n        }\n        g2.setStroke(stroke);\n        g2.setPaint(paint);\n        g2.draw(line);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
65	public Point translateJava2DToScreen(Point2D java2DPoint) {\n        Insets insets = getInsets();\n        int x = (int) (java2DPoint.getX() * this.scaleX + insets.left);\n        int y = (int) (java2DPoint.getY() * this.scaleY + insets.top);\n        return new Point(x, y);\n    }
66	public static final void writeAsPDF(Drawable drawable, \n            int w, int h, File file) {\n        if (!ExportUtils.isOrsonPDFAvailable()) {\n            throw new IllegalStateException(\n                    "OrsonPDF is not present on the classpath.");\n        }\n        ParamChecks.nullNotPermitted(drawable, "drawable");\n        ParamChecks.nullNotPermitted(file, "file");\n        try {\n            Class<?> pdfDocClass = Class.forName("com.orsonpdf.PDFDocument");\n            Object pdfDoc = pdfDocClass.newInstance();\n            Method m = pdfDocClass.getMethod("createPage", Rectangle2D.class);\n            Rectangle2D rect = new Rectangle(w, h);\n            Object page = m.invoke(pdfDoc, rect);\n            Method m2 = page.getClass().getMethod("getGraphics2D");\n            Graphics2D g2 = (Graphics2D) m2.invoke(page);\n            Rectangle2D drawArea = new Rectangle2D.Double(0, 0, w, h);\n            drawable.draw(g2, drawArea);\n            Method m3 = pdfDocClass.getMethod("writeToFile", File.class);\n            m3.invoke(pdfDoc, file);\n        } catch (ClassNotFoundException ex) {\n            throw new RuntimeException(ex);\n        } catch (InstantiationException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex);\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        } catch (SecurityException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalArgumentException ex) {\n            throw new RuntimeException(ex);\n        } catch (InvocationTargetException ex) {\n            throw new RuntimeException(ex);\n        }\n    }
67	public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n                                PlotRenderingInfo info) {\n\n        Iterator iterator = this.annotations.iterator();\n        while (iterator.hasNext()) {\n            XYAnnotation annotation = (XYAnnotation) iterator.next();\n            ValueAxis xAxis = getDomainAxis();\n            ValueAxis yAxis = getRangeAxis();\n            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);\n        }\n\n    }
68	public void restoreAutoRangeBounds() {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n            Zoomable z = (Zoomable) plot;\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n                        Point2D zp = (this.zoomPoint != null\n                    ? this.zoomPoint : new Point());\n            z.zoomRangeAxes(0.0, this.info.getPlotInfo(), zp);\n            plot.setNotify(savedNotify);\n        }\n    }
69	protected void delete(int start, int end) {\n        for (int i = start; i <= end; i++) {\n            this.data.remove(start);\n        }\n        fireSeriesChanged();\n    }
70	public void draw(Graphics2D g2, Rectangle2D chartArea, Point2D anchor,\n             ChartRenderingInfo info) {\n\n        notifyListeners(new ChartProgressEvent(this, this,\n                ChartProgressEvent.DRAWING_STARTED, 0));\n        \n        EntityCollection entities = null;\n                if (info != null) {\n            info.clear();\n            info.setChartArea(chartArea);\n            entities = info.getEntityCollection();\n        }\n        if (entities != null) {\n            entities.add(new JFreeChartEntity((Rectangle2D) chartArea.clone(),\n                    this));\n        }\n\n                Shape savedClip = g2.getClip();\n        g2.clip(chartArea);\n\n        g2.addRenderingHints(this.renderingHints);\n\n                if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(chartArea);\n        }\n\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0,\n                    this.backgroundImage.getWidth(null),\n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, chartArea, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(),\n                    (int) dest.getY(), (int) dest.getWidth(),\n                    (int) dest.getHeight(), null);\n            g2.setComposite(originalComposite);\n        }\n\n        if (isBorderVisible()) {\n            Paint paint = getBorderPaint();\n            Stroke stroke = getBorderStroke();\n            if (paint != null && stroke != null) {\n                Rectangle2D borderArea = new Rectangle2D.Double(\n                        chartArea.getX(), chartArea.getY(),\n                        chartArea.getWidth() - 1.0, chartArea.getHeight()\n                        - 1.0);\n                g2.setPaint(paint);\n                g2.setStroke(stroke);\n                g2.draw(borderArea);\n            }\n        }\n\n                Rectangle2D nonTitleArea = new Rectangle2D.Double();\n        nonTitleArea.setRect(chartArea);\n        this.padding.trim(nonTitleArea);\n\n        if (this.title != null && this.title.isVisible()) {\n            EntityCollection e = drawTitle(this.title, g2, nonTitleArea,\n                    (entities != null));\n            if (e != null && entities != null) {\n                entities.addAll(e);\n            }\n        }\n\n        Iterator iterator = this.subtitles.iterator();\n        while (iterator.hasNext()) {\n            Title currentTitle = (Title) iterator.next();\n            if (currentTitle.isVisible()) {\n                EntityCollection e = drawTitle(currentTitle, g2, nonTitleArea,\n                        (entities != null));\n                if (e != null && entities != null) {\n                    entities.addAll(e);\n                }\n            }\n        }\n\n        Rectangle2D plotArea = nonTitleArea;\n\n                PlotRenderingInfo plotInfo = null;\n        if (info != null) {\n            plotInfo = info.getPlotInfo();\n        }\n        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n\n        g2.setClip(savedClip);\n\n        notifyListeners(new ChartProgressEvent(this, this,\n                ChartProgressEvent.DRAWING_FINISHED, 100));\n    }
71	public void add(SeriesDataset[] data) {\n\n        for (int i = 0; i < data.length; i++) {\n            fastAdd(data[i]);\n        }\n        DatasetChangeEvent event = new DatasetChangeEvent(this, this);\n        notifyListeners(event);\n\n    }
72	public void zoomInBoth(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot == null) {\n            return;\n        }\n                                boolean savedNotify = plot.isNotify();\n        plot.setNotify(false);\n        zoomInDomain(x, y);\n        zoomInRange(x, y);\n        plot.setNotify(savedNotify);\n    }
73	private double recalculateInterval() {\n        double result = Double.POSITIVE_INFINITY;\n        int seriesCount = this.dataset.getSeriesCount();\n        for (int series = 0; series < seriesCount; series++) {\n            result = Math.min(result, calculateIntervalForSeries(series));\n        }\n        return result;\n    }
74	protected void drawHorizontalCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            double y, Crosshair crosshair) {\n\n        if (y >= dataArea.getMinY() && y <= dataArea.getMaxY()) {\n            Line2D line = new Line2D.Double(dataArea.getMinX(), y,\n                    dataArea.getMaxX(), y);\n            Paint savedPaint = g2.getPaint();\n            Stroke savedStroke = g2.getStroke();\n            g2.setPaint(crosshair.getPaint());\n            g2.setStroke(crosshair.getStroke());\n            g2.draw(line);\n            if (crosshair.isLabelVisible()) {\n                String label = crosshair.getLabelGenerator().generateLabel(\n                        crosshair);\n                RectangleAnchor anchor = crosshair.getLabelAnchor();\n                Point2D pt = calculateLabelPoint(line, anchor, 5, 5);\n                float xx = (float) pt.getX();\n                float yy = (float) pt.getY();\n                TextAnchor alignPt = textAlignPtForLabelAnchorH(anchor);\n                Shape hotspot = TextUtilities.calculateRotatedStringBounds(\n                        label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);\n                if (!dataArea.contains(hotspot.getBounds2D())) {\n                    anchor = flipAnchorV(anchor);\n                    pt = calculateLabelPoint(line, anchor, 5, 5);\n                    xx = (float) pt.getX();\n                    yy = (float) pt.getY();\n                    alignPt = textAlignPtForLabelAnchorH(anchor);\n                    hotspot = TextUtilities.calculateRotatedStringBounds(\n                           label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);\n                }\n\n                g2.setPaint(crosshair.getLabelBackgroundPaint());\n                g2.fill(hotspot);\n                g2.setPaint(crosshair.getLabelOutlinePaint());\n                g2.draw(hotspot);\n                TextUtilities.drawAlignedString(label, g2, xx, yy, alignPt);\n            }\n            g2.setPaint(savedPaint);\n            g2.setStroke(savedStroke);\n        }\n    }
75	private void writeAsPDF(File file, int w, int h) {\n        if (!isOrsonPDFAvailable()) {\n            throw new IllegalStateException(\n                    "OrsonPDF is not present on the classpath.");\n        }\n        ParamChecks.nullNotPermitted(file, "file");\n        try {\n            Class pdfDocClass = Class.forName("com.orsonpdf.PDFDocument");\n            Object pdfDoc = pdfDocClass.newInstance();\n            Method m = pdfDocClass.getMethod("createPage", Rectangle2D.class);\n            Rectangle2D rect = new Rectangle(w, h);\n            Object page = m.invoke(pdfDoc, rect);\n            Method m2 = page.getClass().getMethod("getGraphics2D");\n            Graphics2D g2 = (Graphics2D) m2.invoke(page);\n                                    g2.setRenderingHint(JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION, true);\n            Rectangle2D drawArea = new Rectangle2D.Double(0, 0, w, h);\n            this.chart.draw(g2, drawArea);\n            Method m3 = pdfDocClass.getMethod("writeToFile", File.class);\n            m3.invoke(pdfDoc, file);\n        } catch (ClassNotFoundException ex) {\n            throw new RuntimeException(ex);\n        } catch (InstantiationException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex);\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        } catch (SecurityException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalArgumentException ex) {\n            throw new RuntimeException(ex);\n        } catch (InvocationTargetException ex) {\n            throw new RuntimeException(ex);\n        }\n    }
76	protected static double restrictValueToDataArea(double value,\n                                                    XYPlot plot,\n                                                    Rectangle2D dataArea) {\n        double min = 0;\n        double max = 0;\n        if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n            min = dataArea.getMinY();\n            max = dataArea.getMaxY();\n        }\n        else if (plot.getOrientation() ==  PlotOrientation.HORIZONTAL) {\n            min = dataArea.getMinX();\n            max = dataArea.getMaxX();\n        }\n        if (value < min) {\n            value = min;\n        }\n        else if (value > max) {\n            value = max;\n        }\n        return value;\n    }
77	protected void drawVertical(Graphics2D g2, Rectangle2D area) {\n        Rectangle2D titleArea = (Rectangle2D) area.clone();\n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextBlockAnchor anchor = null;\n        float y = 0.0f;\n        VerticalAlignment verticalAlignment = getVerticalAlignment();\n        if (verticalAlignment == VerticalAlignment.TOP) {\n            y = (float) titleArea.getY();\n            anchor = TextBlockAnchor.TOP_RIGHT;\n        }\n        else if (verticalAlignment == VerticalAlignment.BOTTOM) {\n            y = (float) titleArea.getMaxY();\n            anchor = TextBlockAnchor.TOP_LEFT;\n        }\n        else if (verticalAlignment == VerticalAlignment.CENTER) {\n            y = (float) titleArea.getCenterY();\n            anchor = TextBlockAnchor.TOP_CENTER;\n        }\n        float x = 0.0f;\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.LEFT) {\n            x = (float) titleArea.getX();\n        }\n        else if (position == RectangleEdge.RIGHT) {\n            x = (float) titleArea.getMaxX();\n            if (verticalAlignment == VerticalAlignment.TOP) {\n                anchor = TextBlockAnchor.BOTTOM_RIGHT;\n            }\n            else if (verticalAlignment == VerticalAlignment.CENTER) {\n                anchor = TextBlockAnchor.BOTTOM_CENTER;\n            }\n            else if (verticalAlignment == VerticalAlignment.BOTTOM) {\n                anchor = TextBlockAnchor.BOTTOM_LEFT;\n            }\n        }\n        this.content.draw(g2, x, y, anchor, x, y, -Math.PI / 2.0);\n    }
78	public static String getImageMap(String name, ChartRenderingInfo info,\n            ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,\n            URLTagFragmentGenerator urlTagFragmentGenerator) {\n\n        StringBuilder sb = new StringBuilder();\n        sb.append("<map id=\"").append(htmlEscape(name));\n        sb.append("\" name=\"").append(htmlEscape(name)).append("\">");\n        sb.append(StringUtils.getLineSeparator());\n        EntityCollection entities = info.getEntityCollection();\n        if (entities != null) {\n            int count = entities.getEntityCount();\n            for (int i = count - 1; i >= 0; i--) {\n                ChartEntity entity = entities.getEntity(i);\n                if (entity.getToolTipText() != null\n                        || entity.getURLText() != null) {\n                    String area = entity.getImageMapAreaTag(\n                            toolTipTagFragmentGenerator,\n                            urlTagFragmentGenerator);\n                    if (area.length() > 0) {\n                        sb.append(area);\n                        sb.append(StringUtils.getLineSeparator());\n                    }\n                }\n            }\n        }\n        sb.append("</map>");\n        return sb.toString();\n\n    }
79	public void ensureAtLeast(double space, RectangleEdge edge) {\n        if (edge == RectangleEdge.TOP) {\n            if (this.top < space) {\n                this.top = space;\n            }\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            if (this.bottom < space) {\n                this.bottom = space;\n            }\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            if (this.left < space) {\n                this.left = space;\n            }\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            if (this.right < space) {\n                this.right = space;\n            }\n        }\n        else {\n            throw new IllegalStateException(\n                "AxisSpace.ensureAtLeast(): unrecognised AxisLocation."\n            );\n        }\n    }
80	public double draw(Graphics2D g2, double cursor,\n                       Rectangle2D plotArea, Rectangle2D dataArea,\n                       Rectangle2D reservedArea, RectangleEdge edge) {\n\n        Rectangle2D colorBarArea = null;\n\n        double thickness = calculateBarThickness(dataArea, edge);\n        if (this.colorBarThickness > 0) {\n            thickness = this.colorBarThickness;          }\n\n        double length;\n        if (RectangleEdge.isLeftOrRight(edge)) {\n            length = dataArea.getHeight();\n        }\n        else {\n            length = dataArea.getWidth();\n        }\n\n        if (this.colorBarLength > 0) {\n            length = this.colorBarLength;\n        }\n\n        if (edge == RectangleEdge.BOTTOM) {\n            colorBarArea = new Rectangle2D.Double(dataArea.getX(),\n                    plotArea.getMaxY() + this.outerGap, length, thickness);\n        }\n        else if (edge == RectangleEdge.TOP) {\n            colorBarArea = new Rectangle2D.Double(dataArea.getX(),\n                    reservedArea.getMinY() + this.outerGap, length, thickness);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            colorBarArea = new Rectangle2D.Double(plotArea.getX() - thickness\n                    - this.outerGap, dataArea.getMinY(), thickness, length);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            colorBarArea = new Rectangle2D.Double(plotArea.getMaxX()\n                    + this.outerGap, dataArea.getMinY(), thickness, length);\n        }\n\n                this.axis.refreshTicks(g2, new AxisState(), colorBarArea, edge);\n\n        drawColorBar(g2, colorBarArea, edge);\n\n        AxisState state = null;\n        assert colorBarArea != null;         if (edge == RectangleEdge.TOP) {\n            cursor = colorBarArea.getMinY();\n            state = this.axis.draw(g2, cursor, reservedArea, colorBarArea,\n                    RectangleEdge.TOP, null);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            cursor = colorBarArea.getMaxY();\n            state = this.axis.draw(g2, cursor, reservedArea, colorBarArea,\n                    RectangleEdge.BOTTOM, null);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            cursor = colorBarArea.getMinX();\n            state = this.axis.draw(g2, cursor, reservedArea, colorBarArea,\n                    RectangleEdge.LEFT, null);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            cursor = colorBarArea.getMaxX();\n            state = this.axis.draw(g2, cursor, reservedArea, colorBarArea,\n                    RectangleEdge.RIGHT, null);\n        }\n        assert state != null;         return state.getCursor();\n\n    }
81	protected double calculateTotalWidth(double contentWidth) {\n        double result = contentWidth;\n        result = this.padding.extendWidth(result);\n        result = this.frame.getInsets().extendWidth(result);\n        result = this.margin.extendWidth(result);\n        return result;\n    }
82	public void drawBackgroundImage(Graphics2D g2, Rectangle2D area) {\n        if (this.backgroundImage == null) {\n            return;          }\n        Composite savedComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                this.backgroundImageAlpha));\n        Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0,\n                this.backgroundImage.getWidth(null),\n                this.backgroundImage.getHeight(null));\n        Align.align(dest, area, this.backgroundImageAlignment);\n        Shape savedClip = g2.getClip();\n        g2.clip(area);\n        g2.drawImage(this.backgroundImage, (int) dest.getX(),\n                (int) dest.getY(), (int) dest.getWidth() + 1,\n                (int) dest.getHeight() + 1, null);\n        g2.setClip(savedClip);\n        g2.setComposite(savedComposite);\n    }
83	public void drawRangeMarker(Graphics2D g2,\n                                ContourPlot plot,\n                                ValueAxis rangeAxis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = rangeAxis.getRange();\n            if (!range.contains(value)) {\n                return;\n            }\n\n            double y = rangeAxis.valueToJava2D(value, dataArea,\n                    RectangleEdge.LEFT);\n            Line2D line = new Line2D.Double(dataArea.getMinX(), y,\n                    dataArea.getMaxX(), y);\n            Paint paint = marker.getOutlinePaint();\n            Stroke stroke = marker.getOutlineStroke();\n            g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n            g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n            g2.draw(line);\n        }\n\n    }
84	private void createPolygon (Graphics2D x_graphics,\n                                Rectangle2D x_dataArea,\n                                XYPlot x_plot,\n                                ValueAxis x_domainAxis,\n                                ValueAxis x_rangeAxis,\n                                boolean x_positive,\n                                LinkedList x_xValues,\n                                LinkedList x_yValues) {\n\n        PlotOrientation l_orientation      = x_plot.getOrientation();\n        RectangleEdge l_domainAxisLocation = x_plot.getDomainAxisEdge();\n        RectangleEdge l_rangeAxisLocation  = x_plot.getRangeAxisEdge();\n\n        Object[] l_xValues = x_xValues.toArray();\n        Object[] l_yValues = x_yValues.toArray();\n\n        GeneralPath l_path = new GeneralPath();\n\n        if (PlotOrientation.VERTICAL == l_orientation) {\n            double l_x = x_domainAxis.valueToJava2D((\n                    (Double) l_xValues[0]).doubleValue(), x_dataArea,\n                    l_domainAxisLocation);\n            if (this.roundXCoordinates) {\n                l_x = Math.rint(l_x);\n            }\n\n            double l_y = x_rangeAxis.valueToJava2D((\n                    (Double) l_yValues[0]).doubleValue(), x_dataArea,\n                    l_rangeAxisLocation);\n\n            l_path.moveTo((float) l_x, (float) l_y);\n            for (int i = 1; i < l_xValues.length; i++) {\n                l_x = x_domainAxis.valueToJava2D((\n                        (Double) l_xValues[i]).doubleValue(), x_dataArea,\n                        l_domainAxisLocation);\n                if (this.roundXCoordinates) {\n                    l_x = Math.rint(l_x);\n                }\n\n                l_y = x_rangeAxis.valueToJava2D((\n                        (Double) l_yValues[i]).doubleValue(), x_dataArea,\n                        l_rangeAxisLocation);\n                l_path.lineTo((float) l_x, (float) l_y);\n            }\n            l_path.closePath();\n        }\n        else {\n            double l_x = x_domainAxis.valueToJava2D((\n                    (Double) l_xValues[0]).doubleValue(), x_dataArea,\n                    l_domainAxisLocation);\n            if (this.roundXCoordinates) {\n                l_x = Math.rint(l_x);\n            }\n\n            double l_y = x_rangeAxis.valueToJava2D((\n                    (Double) l_yValues[0]).doubleValue(), x_dataArea,\n                    l_rangeAxisLocation);\n\n            l_path.moveTo((float) l_y, (float) l_x);\n            for (int i = 1; i < l_xValues.length; i++) {\n                l_x = x_domainAxis.valueToJava2D((\n                        (Double) l_xValues[i]).doubleValue(), x_dataArea,\n                        l_domainAxisLocation);\n                if (this.roundXCoordinates) {\n                    l_x = Math.rint(l_x);\n                }\n\n                l_y = x_rangeAxis.valueToJava2D((\n                        (Double) l_yValues[i]).doubleValue(), x_dataArea,\n                        l_rangeAxisLocation);\n                l_path.lineTo((float) l_y, (float) l_x);\n            }\n            l_path.closePath();\n        }\n\n        if (l_path.intersects(x_dataArea)) {\n            x_graphics.setPaint(x_positive ? getPositivePaint()\n                    : getNegativePaint());\n            x_graphics.fill(l_path);\n        }\n    }
85	protected void drawRightLabel(Graphics2D g2, PiePlotState state,\n                                  PieLabelRecord record) {\n\n        double anchorX = state.getLinkArea().getMaxX();\n        double targetX = anchorX + record.getGap();\n        double targetY = record.getAllocatedY();\n\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + Math.cos(theta)\n                    * state.getPieWRadius() * record.getLinkPercent();\n            double linkY = state.getPieCenterY() - Math.sin(theta)\n                    * state.getPieHRadius() * record.getLinkPercent();\n            double elbowX = state.getPieCenterX() + Math.cos(theta)\n                    * state.getLinkArea().getWidth() / 2.0;\n            double elbowY = state.getPieCenterY() - Math.sin(theta)\n                    * state.getLinkArea().getHeight() / 2.0;\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            PieLabelLinkStyle style = getLabelLinkStyle();\n            if (style.equals(PieLabelLinkStyle.STANDARD)) {\n                g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));\n                g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n                g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));\n            }\n            else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {\n                QuadCurve2D q = new QuadCurve2D.Float();\n                q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);\n                g2.draw(q);\n                g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));\n            }\n            else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {\n                CubicCurve2D c = new CubicCurve2D .Float();\n                c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY,\n                        linkX, linkY);\n                g2.draw(c);\n            }\n        }\n\n        TextBox tb = record.getLabel();\n        tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.LEFT);\n\n    }
86	protected void drawVerticalCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            double x, Crosshair crosshair) {\n\n        if (x >= dataArea.getMinX() && x <= dataArea.getMaxX()) {\n            Line2D line = new Line2D.Double(x, dataArea.getMinY(), x,\n                    dataArea.getMaxY());\n            Paint savedPaint = g2.getPaint();\n            Stroke savedStroke = g2.getStroke();\n            g2.setPaint(crosshair.getPaint());\n            g2.setStroke(crosshair.getStroke());\n            g2.draw(line);\n            if (crosshair.isLabelVisible()) {\n                String label = crosshair.getLabelGenerator().generateLabel(\n                        crosshair);\n                RectangleAnchor anchor = crosshair.getLabelAnchor();\n                Point2D pt = calculateLabelPoint(line, anchor, 5, 5);\n                float xx = (float) pt.getX();\n                float yy = (float) pt.getY();\n                TextAnchor alignPt = textAlignPtForLabelAnchorV(anchor);\n                Shape hotspot = TextUtilities.calculateRotatedStringBounds(\n                        label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);\n                if (!dataArea.contains(hotspot.getBounds2D())) {\n                    anchor = flipAnchorH(anchor);\n                    pt = calculateLabelPoint(line, anchor, 5, 5);\n                    xx = (float) pt.getX();\n                    yy = (float) pt.getY();\n                    alignPt = textAlignPtForLabelAnchorV(anchor);\n                    hotspot = TextUtilities.calculateRotatedStringBounds(\n                           label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);\n                }\n                g2.setPaint(crosshair.getLabelBackgroundPaint());\n                g2.fill(hotspot);\n                g2.setPaint(crosshair.getLabelOutlinePaint());\n                g2.draw(hotspot);\n                TextUtilities.drawAlignedString(label, g2, xx, yy, alignPt);\n            }\n            g2.setPaint(savedPaint);\n            g2.setStroke(savedStroke);\n        }\n    }
87	protected void updateCrosshairValues(CrosshairState crosshairState,\n            double x, double y, int domainAxisIndex, int rangeAxisIndex,\n            double transX, double transY, PlotOrientation orientation) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        if (crosshairState != null) {\n                        if (this.plot.isDomainCrosshairLockedOnData()) {\n                if (this.plot.isRangeCrosshairLockedOnData()) {\n                                        crosshairState.updateCrosshairPoint(x, y, domainAxisIndex,\n                            rangeAxisIndex, transX, transY, orientation);\n                }\n                else {\n                                        crosshairState.updateCrosshairX(x, domainAxisIndex);\n                }\n            }\n            else {\n                if (this.plot.isRangeCrosshairLockedOnData()) {\n                                        crosshairState.updateCrosshairY(y, rangeAxisIndex);\n                }\n            }\n        }\n\n    }
88	public static TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip) {\n\n        ParamChecks.nullNotPermitted(source, "source");\n        if (periodCount < 1) {\n            throw new IllegalArgumentException("periodCount must be greater "\n                    + "than or equal to 1.");\n        }\n\n        TimeSeriesCollection result = new TimeSeriesCollection();\n        for (int i = 0; i < source.getSeriesCount(); i++) {\n            TimeSeries sourceSeries = source.getSeries(i);\n            TimeSeries maSeries = createMovingAverage(sourceSeries,\n                    sourceSeries.getKey() + suffix, periodCount, skip);\n            result.addSeries(maSeries);\n        }\n        return result;\n\n    }
89	protected float[] calculateAnchorPoint(ValueTick tick, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        RectangleInsets insets = getTickLabelInsets();\n        float[] result = new float[2];\n        if (edge == RectangleEdge.TOP) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor - insets.getBottom() - 2.0);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor + insets.getTop() + 2.0);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result[0] = (float) (cursor - insets.getLeft() - 2.0);\n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result[0] = (float) (cursor + insets.getRight() + 2.0);\n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        return result;\n    }
90	public static boolean equal(double[][] a, double[][] b) {\n        if (a == null) {\n            return (b == null);\n        }\n        if (b == null) {\n            return false;          }\n        if (a.length != b.length) {\n            return false;\n        }\n        for (int i = 0; i < a.length; i++) {\n            if (!Arrays.equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }
91	private static int findSeparator(String s) {\n\n        int result = s.indexOf('-');\n        if (result == -1) {\n            result = s.indexOf(',');\n        }\n        if (result == -1) {\n            result = s.indexOf(' ');\n        }\n        if (result == -1) {\n            result = s.indexOf('.');\n        }\n        return result;\n    }
92	protected static void createTempDir() {\n        String tempDirName = System.getProperty("java.io.tmpdir");\n        if (tempDirName == null) {\n            throw new RuntimeException("Temporary directory system property "\n                    + "(java.io.tmpdir) is null.");\n        }\n\n                File tempDir = new File(tempDirName);\n        if (!tempDir.exists()) {\n            tempDir.mkdirs();\n        }\n    }
93	protected void drawItemPass0(Graphics2D x_graphics,\n                                 Rectangle2D x_dataArea,\n                                 PlotRenderingInfo x_info,\n                                 XYPlot x_plot,\n                                 ValueAxis x_domainAxis,\n                                 ValueAxis x_rangeAxis,\n                                 XYDataset x_dataset,\n                                 int x_series,\n                                 int x_item,\n                                 CrosshairState x_crosshairState) {\n\n        if (!((0 == x_series) && (0 == x_item))) {\n            return;\n        }\n\n        boolean b_impliedZeroSubtrahend = (1 == x_dataset.getSeriesCount());\n\n                if (isEitherSeriesDegenerate(x_dataset, b_impliedZeroSubtrahend)) {\n            return;\n        }\n\n                if (!b_impliedZeroSubtrahend && areSeriesDisjoint(x_dataset)) {\n            return;\n        }\n\n                LinkedList l_minuendXs    = new LinkedList();\n        LinkedList l_minuendYs    = new LinkedList();\n        LinkedList l_subtrahendXs = new LinkedList();\n        LinkedList l_subtrahendYs = new LinkedList();\n        LinkedList l_polygonXs    = new LinkedList();\n        LinkedList l_polygonYs    = new LinkedList();\n\n                int l_minuendItem      = 0;\n        int l_minuendItemCount = x_dataset.getItemCount(0);\n        Double l_minuendCurX   = null;\n        Double l_minuendNextX  = null;\n        Double l_minuendCurY   = null;\n        Double l_minuendNextY  = null;\n        double l_minuendMaxY   = Double.NEGATIVE_INFINITY;\n        double l_minuendMinY   = Double.POSITIVE_INFINITY;\n\n        int l_subtrahendItem      = 0;\n        int l_subtrahendItemCount = 0;         Double l_subtrahendCurX   = null;\n        Double l_subtrahendNextX  = null;\n        Double l_subtrahendCurY   = null;\n        Double l_subtrahendNextY  = null;\n        double l_subtrahendMaxY   = Double.NEGATIVE_INFINITY;\n        double l_subtrahendMinY   = Double.POSITIVE_INFINITY;\n\n                if (b_impliedZeroSubtrahend) {\n            l_subtrahendItem      = 0;\n            l_subtrahendItemCount = 2;\n            l_subtrahendCurX      = new Double(x_dataset.getXValue(0, 0));\n            l_subtrahendNextX     = new Double(x_dataset.getXValue(0,\n                    (l_minuendItemCount - 1)));\n            l_subtrahendCurY      = new Double(0.0);\n            l_subtrahendNextY     = new Double(0.0);\n            l_subtrahendMaxY      = 0.0;\n            l_subtrahendMinY      = 0.0;\n\n            l_subtrahendXs.add(l_subtrahendCurX);\n            l_subtrahendYs.add(l_subtrahendCurY);\n        }\n        else {\n            l_subtrahendItemCount = x_dataset.getItemCount(1);\n        }\n\n        boolean b_minuendDone           = false;\n        boolean b_minuendAdvanced       = true;\n        boolean b_minuendAtIntersect    = false;\n        boolean b_minuendFastForward    = false;\n        boolean b_subtrahendDone        = false;\n        boolean b_subtrahendAdvanced    = true;\n        boolean b_subtrahendAtIntersect = false;\n        boolean b_subtrahendFastForward = false;\n        boolean b_colinear              = false;\n\n        boolean b_positive;\n\n                double l_x1 = 0.0, l_y1 = 0.0;         double l_x2 = 0.0, l_y2 = 0.0;         double l_x3 = 0.0, l_y3 = 0.0;         double l_x4 = 0.0, l_y4 = 0.0; \n                boolean b_fastForwardDone = false;\n        while (!b_fastForwardDone) {\n                        l_x1 = x_dataset.getXValue(0, l_minuendItem);\n            l_y1 = x_dataset.getYValue(0, l_minuendItem);\n            l_x2 = x_dataset.getXValue(0, l_minuendItem + 1);\n            l_y2 = x_dataset.getYValue(0, l_minuendItem + 1);\n\n            l_minuendCurX  = new Double(l_x1);\n            l_minuendCurY  = new Double(l_y1);\n            l_minuendNextX = new Double(l_x2);\n            l_minuendNextY = new Double(l_y2);\n\n            if (b_impliedZeroSubtrahend) {\n                l_x3 = l_subtrahendCurX.doubleValue();\n                l_y3 = l_subtrahendCurY.doubleValue();\n                l_x4 = l_subtrahendNextX.doubleValue();\n                l_y4 = l_subtrahendNextY.doubleValue();\n            }\n            else {\n                l_x3 = x_dataset.getXValue(1, l_subtrahendItem);\n                l_y3 = x_dataset.getYValue(1, l_subtrahendItem);\n                l_x4 = x_dataset.getXValue(1, l_subtrahendItem + 1);\n                l_y4 = x_dataset.getYValue(1, l_subtrahendItem + 1);\n\n                l_subtrahendCurX  = new Double(l_x3);\n                l_subtrahendCurY  = new Double(l_y3);\n                l_subtrahendNextX = new Double(l_x4);\n                l_subtrahendNextY = new Double(l_y4);\n            }\n\n            if (l_x2 <= l_x3) {\n                                l_minuendItem++;\n                b_minuendFastForward = true;\n                continue;\n            }\n\n            if (l_x4 <= l_x1) {\n                                l_subtrahendItem++;\n                b_subtrahendFastForward = true;\n                continue;\n            }\n\n                        if ((l_x3 < l_x1) && (l_x1 < l_x4)) {\n                                double l_slope   = (l_y4 - l_y3) / (l_x4 - l_x3);\n                l_subtrahendCurX = l_minuendCurX;\n                l_subtrahendCurY = new Double((l_slope * l_x1)\n                        + (l_y3 - (l_slope * l_x3)));\n\n                l_subtrahendXs.add(l_subtrahendCurX);\n                l_subtrahendYs.add(l_subtrahendCurY);\n            }\n\n            if ((l_x1 < l_x3) && (l_x3 < l_x2)) {\n                                double l_slope = (l_y2 - l_y1) / (l_x2 - l_x1);\n                l_minuendCurX  = l_subtrahendCurX;\n                l_minuendCurY  = new Double((l_slope * l_x3)\n                        + (l_y1 - (l_slope * l_x1)));\n\n                l_minuendXs.add(l_minuendCurX);\n                l_minuendYs.add(l_minuendCurY);\n            }\n\n            l_minuendMaxY    = l_minuendCurY.doubleValue();\n            l_minuendMinY    = l_minuendCurY.doubleValue();\n            l_subtrahendMaxY = l_subtrahendCurY.doubleValue();\n            l_subtrahendMinY = l_subtrahendCurY.doubleValue();\n\n            b_fastForwardDone = true;\n        }\n\n                while (!b_minuendDone && !b_subtrahendDone) {\n            if (!b_minuendDone && !b_minuendFastForward && b_minuendAdvanced) {\n                l_x1 = x_dataset.getXValue(0, l_minuendItem);\n                l_y1 = x_dataset.getYValue(0, l_minuendItem);\n                l_minuendCurX = new Double(l_x1);\n                l_minuendCurY = new Double(l_y1);\n\n                if (!b_minuendAtIntersect) {\n                    l_minuendXs.add(l_minuendCurX);\n                    l_minuendYs.add(l_minuendCurY);\n                }\n\n                l_minuendMaxY = Math.max(l_minuendMaxY, l_y1);\n                l_minuendMinY = Math.min(l_minuendMinY, l_y1);\n\n                l_x2 = x_dataset.getXValue(0, l_minuendItem + 1);\n                l_y2 = x_dataset.getYValue(0, l_minuendItem + 1);\n                l_minuendNextX = new Double(l_x2);\n                l_minuendNextY = new Double(l_y2);\n            }\n\n                        if (!b_impliedZeroSubtrahend && !b_subtrahendDone\n                    && !b_subtrahendFastForward && b_subtrahendAdvanced) {\n                l_x3 = x_dataset.getXValue(1, l_subtrahendItem);\n                l_y3 = x_dataset.getYValue(1, l_subtrahendItem);\n                l_subtrahendCurX = new Double(l_x3);\n                l_subtrahendCurY = new Double(l_y3);\n\n                if (!b_subtrahendAtIntersect) {\n                    l_subtrahendXs.add(l_subtrahendCurX);\n                    l_subtrahendYs.add(l_subtrahendCurY);\n                }\n\n                l_subtrahendMaxY = Math.max(l_subtrahendMaxY, l_y3);\n                l_subtrahendMinY = Math.min(l_subtrahendMinY, l_y3);\n\n                l_x4 = x_dataset.getXValue(1, l_subtrahendItem + 1);\n                l_y4 = x_dataset.getYValue(1, l_subtrahendItem + 1);\n                l_subtrahendNextX = new Double(l_x4);\n                l_subtrahendNextY = new Double(l_y4);\n            }\n\n                        b_minuendFastForward    = false;\n            b_subtrahendFastForward = false;\n\n            Double l_intersectX = null;\n            Double l_intersectY = null;\n            boolean b_intersect = false;\n\n            b_minuendAtIntersect    = false;\n            b_subtrahendAtIntersect = false;\n\n                        if ((l_x2 == l_x4) && (l_y2 == l_y4)) {\n                                if ((l_x1 == l_x3) && (l_y1 == l_y3)) {\n                    b_colinear = true;\n                }\n                else {\n                                                            l_intersectX = new Double(l_x2);\n                    l_intersectY = new Double(l_y2);\n\n                    b_intersect             = true;\n                    b_minuendAtIntersect    = true;\n                    b_subtrahendAtIntersect = true;\n                 }\n            }\n            else {\n                                double l_denominator = ((l_y4 - l_y3) * (l_x2 - l_x1))\n                        - ((l_x4 - l_x3) * (l_y2 - l_y1));\n\n                                double l_deltaY = l_y1 - l_y3;\n                double l_deltaX = l_x1 - l_x3;\n\n                                double l_numeratorA = ((l_x4 - l_x3) * l_deltaY)\n                        - ((l_y4 - l_y3) * l_deltaX);\n                double l_numeratorB = ((l_x2 - l_x1) * l_deltaY)\n                        - ((l_y2 - l_y1) * l_deltaX);\n\n                                if ((0 == l_numeratorA) && (0 == l_numeratorB)\n                        && (0 == l_denominator)) {\n                    b_colinear = true;\n                }\n                else {\n                                        if (b_colinear) {\n                                                l_minuendXs.clear();\n                        l_minuendYs.clear();\n                        l_subtrahendXs.clear();\n                        l_subtrahendYs.clear();\n                        l_polygonXs.clear();\n                        l_polygonYs.clear();\n\n                        b_colinear = false;\n\n                                                boolean b_useMinuend = ((l_x3 <= l_x1)\n                                && (l_x1 <= l_x4));\n                        l_polygonXs.add(b_useMinuend ? l_minuendCurX\n                                : l_subtrahendCurX);\n                        l_polygonYs.add(b_useMinuend ? l_minuendCurY\n                                : l_subtrahendCurY);\n                    }\n                }\n\n                                double l_slopeA = l_numeratorA / l_denominator;\n                double l_slopeB = l_numeratorB / l_denominator;\n\n                                boolean b_vertical = (l_x1 == l_x2) && (l_x3 == l_x4) && (l_x2 == l_x4);\n\n                                if (((0 < l_slopeA) && (l_slopeA <= 1) && (0 < l_slopeB)\n                        && (l_slopeB <= 1))|| b_vertical) {\n\n                                        double l_xi;\n                    double l_yi;\n                    if(b_vertical){\n                        b_colinear = false;\n                        l_xi = l_x2;\n                        l_yi = l_x4;\n                    }\n                    else{\n                        l_xi = l_x1 + (l_slopeA * (l_x2 - l_x1));\n                        l_yi = l_y1 + (l_slopeA * (l_y2 - l_y1));\n                    }\n\n                    l_intersectX            = new Double(l_xi);\n                    l_intersectY            = new Double(l_yi);\n                    b_intersect             = true;\n                    b_minuendAtIntersect    = ((l_xi == l_x2)\n                            && (l_yi == l_y2));\n                    b_subtrahendAtIntersect = ((l_xi == l_x4)\n                            && (l_yi == l_y4));\n\n                                        l_minuendCurX    = l_intersectX;\n                    l_minuendCurY    = l_intersectY;\n                    l_subtrahendCurX = l_intersectX;\n                    l_subtrahendCurY = l_intersectY;\n                }\n            }\n\n            if (b_intersect) {\n                                                l_polygonXs.addAll(l_minuendXs);\n                l_polygonYs.addAll(l_minuendYs);\n\n                                l_polygonXs.add(l_intersectX);\n                l_polygonYs.add(l_intersectY);\n\n                                Collections.reverse(l_subtrahendXs);\n                Collections.reverse(l_subtrahendYs);\n                l_polygonXs.addAll(l_subtrahendXs);\n                l_polygonYs.addAll(l_subtrahendYs);\n\n                                b_positive = (l_subtrahendMaxY <= l_minuendMaxY)\n                        && (l_subtrahendMinY <= l_minuendMinY);\n                createPolygon(x_graphics, x_dataArea, x_plot, x_domainAxis,\n                        x_rangeAxis, b_positive, l_polygonXs, l_polygonYs);\n\n                                l_minuendXs.clear();\n                l_minuendYs.clear();\n                l_subtrahendXs.clear();\n                l_subtrahendYs.clear();\n                l_polygonXs.clear();\n                l_polygonYs.clear();\n\n                                double l_y       = l_intersectY.doubleValue();\n                l_minuendMaxY    = l_y;\n                l_subtrahendMaxY = l_y;\n                l_minuendMinY    = l_y;\n                l_subtrahendMinY = l_y;\n\n                                l_polygonXs.add(l_intersectX);\n                l_polygonYs.add(l_intersectY);\n            }\n\n                        if (l_x2 <= l_x4) {\n                l_minuendItem++;\n                b_minuendAdvanced = true;\n            }\n            else {\n                b_minuendAdvanced = false;\n            }\n\n                        if (l_x4 <= l_x2) {\n                l_subtrahendItem++;\n                b_subtrahendAdvanced = true;\n            }\n            else {\n                b_subtrahendAdvanced = false;\n            }\n\n            b_minuendDone    = (l_minuendItem == (l_minuendItemCount - 1));\n            b_subtrahendDone = (l_subtrahendItem == (l_subtrahendItemCount\n                    - 1));\n        }\n\n                if (b_minuendDone && (l_x3 < l_x2) && (l_x2 < l_x4)) {\n                        double l_slope    = (l_y4 - l_y3) / (l_x4 - l_x3);\n            l_subtrahendNextX = l_minuendNextX;\n            l_subtrahendNextY = new Double((l_slope * l_x2)\n                    + (l_y3 - (l_slope * l_x3)));\n        }\n\n        if (b_subtrahendDone && (l_x1 < l_x4) && (l_x4 < l_x2)) {\n                        double l_slope = (l_y2 - l_y1) / (l_x2 - l_x1);\n            l_minuendNextX = l_subtrahendNextX;\n            l_minuendNextY = new Double((l_slope * l_x4)\n                    + (l_y1 - (l_slope * l_x1)));\n        }\n\n                        l_minuendMaxY    = Math.max(l_minuendMaxY,\n                l_minuendNextY.doubleValue());\n        l_subtrahendMaxY = Math.max(l_subtrahendMaxY,\n                l_subtrahendNextY.doubleValue());\n        l_minuendMinY    = Math.min(l_minuendMinY,\n                l_minuendNextY.doubleValue());\n        l_subtrahendMinY = Math.min(l_subtrahendMinY,\n                l_subtrahendNextY.doubleValue());\n\n                l_minuendXs.add(l_minuendNextX);\n        l_minuendYs.add(l_minuendNextY);\n        l_subtrahendXs.add(l_subtrahendNextX);\n        l_subtrahendYs.add(l_subtrahendNextY);\n\n                        l_polygonXs.addAll(l_minuendXs);\n        l_polygonYs.addAll(l_minuendYs);\n\n                Collections.reverse(l_subtrahendXs);\n        Collections.reverse(l_subtrahendYs);\n        l_polygonXs.addAll(l_subtrahendXs);\n        l_polygonYs.addAll(l_subtrahendYs);\n\n                b_positive = (l_subtrahendMaxY <= l_minuendMaxY)\n                && (l_subtrahendMinY <= l_minuendMinY);\n        createPolygon(x_graphics, x_dataArea, x_plot, x_domainAxis,\n                x_rangeAxis, b_positive, l_polygonXs, l_polygonYs);\n    }
94	private Rectangle2D createAlignedRectangle2D(Size2D dimensions,\n            Rectangle2D frame, HorizontalAlignment hAlign,\n            VerticalAlignment vAlign) {\n        double x = Double.NaN;\n        double y = Double.NaN;\n        if (hAlign == HorizontalAlignment.LEFT) {\n            x = frame.getX();\n        }\n        else if (hAlign == HorizontalAlignment.CENTER) {\n            x = frame.getCenterX() - (dimensions.width / 2.0);\n        }\n        else if (hAlign == HorizontalAlignment.RIGHT) {\n            x = frame.getMaxX() - dimensions.width;\n        }\n        if (vAlign == VerticalAlignment.TOP) {\n            y = frame.getY();\n        }\n        else if (vAlign == VerticalAlignment.CENTER) {\n            y = frame.getCenterY() - (dimensions.height / 2.0);\n        }\n        else if (vAlign == VerticalAlignment.BOTTOM) {\n            y = frame.getMaxY() - dimensions.height;\n        }\n\n        return new Rectangle2D.Double(x, y, dimensions.width,\n                dimensions.height);\n    }
95	private List datasetsMappedToRangeAxis(int index) {\n        Integer key = new Integer(index);\n        List result = new ArrayList();\n        for (CategoryDataset dataset : this.datasets.values()) {\n            int i = indexOf(dataset);\n            List mappedAxes = (List) this.datasetToRangeAxesMap.get(\n                    new Integer(i));\n            if (mappedAxes == null) {\n                if (key.equals(ZERO)) {\n                    result.add(this.datasets.get(i));\n                }\n            } else {\n                if (mappedAxes.contains(key)) {\n                    result.add(this.datasets.get(i));\n                }\n            }\n        }\n        return result;\n    }
96	protected double[] calculateBarL0L1(double value) {\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        double barLow = Math.min(this.base, value);\n        double barHigh = Math.max(this.base, value);\n        if (barHigh < lclip) {              return null;\n        }\n        if (barLow > uclip) {               return null;\n        }\n        barLow = Math.max(barLow, lclip);\n        barHigh = Math.min(barHigh, uclip);\n        return new double[] {barLow, barHigh};\n    }
97	public String valueToString(double value) {\n        String strToReturn;\n        try {\n            strToReturn = (String) this.symbols.get((int) value);\n        }\n        catch (IndexOutOfBoundsException  ex) {\n            strToReturn = "";\n        }\n        return strToReturn;\n    }
98	protected String generateLabelString(CategoryDataset dataset,\n                                         int row, int column) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        String result;\n        Object[] items = createItemArray(dataset, row, column);\n        result = MessageFormat.format(this.labelFormat, items);\n        return result;\n\n    }
99	public void attemptTickLabelFontSelection() {\n\n        FontChooserPanel panel = new FontChooserPanel(this.tickLabelFont);\n        int result = JOptionPane.showConfirmDialog(this, panel,\n            localizationResources.getString("Font_Selection"),\n            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n        if (result == JOptionPane.OK_OPTION) {\n            this.tickLabelFont = panel.getSelectedFont();\n            this.tickLabelFontField.setText(\n                this.tickLabelFont.getFontName() + " "\n                + this.tickLabelFont.getSize()\n            );\n        }\n\n    }
100	public void attemptPaintSelection() {\n        Paint p = this.titlePaint.getPaint();\n        Color defaultColor = (p instanceof Color ? (Color) p : Color.blue);\n        Color c = JColorChooser.showDialog(\n            this, localizationResources.getString("Title_Color"), defaultColor\n        );\n        if (c != null) {\n            this.titlePaint.setPaint(c);\n        }\n    }
101	public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n                                    if (f1 != 0) {\n                                                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                                                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y2 = y2 + (maxX - x2) * dy / dx;\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;                        \n    }
102	protected void createAndAddEntity(double cursor, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState) {\n\n        if (plotState == null || plotState.getOwner() == null) {\n            return;          }\n        Rectangle2D hotspot = null;\n        if (edge.equals(RectangleEdge.TOP)) {\n            hotspot = new Rectangle2D.Double(dataArea.getX(),\n                    state.getCursor(), dataArea.getWidth(),\n                    cursor - state.getCursor());\n        }\n        else if (edge.equals(RectangleEdge.BOTTOM)) {\n            hotspot = new Rectangle2D.Double(dataArea.getX(), cursor,\n                    dataArea.getWidth(), state.getCursor() - cursor);\n        }\n        else if (edge.equals(RectangleEdge.LEFT)) {\n            hotspot = new Rectangle2D.Double(state.getCursor(),\n                    dataArea.getY(), cursor - state.getCursor(),\n                    dataArea.getHeight());\n        }\n        else if (edge.equals(RectangleEdge.RIGHT)) {\n            hotspot = new Rectangle2D.Double(cursor, dataArea.getY(),\n                    state.getCursor() - cursor, dataArea.getHeight());\n        }\n        EntityCollection e = plotState.getOwner().getEntityCollection();\n        if (e != null) {\n            e.add(new AxisEntity(hotspot, this));\n        }\n    }
103	protected double calculateTextBlockHeight(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2) {\n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(),\n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double h = rotatedBox.getBounds2D().getHeight()\n                   + insets.getTop() + insets.getBottom();\n        return h;\n    }
104	protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n                        Size2D s1 = arrangeNN(container, g2);\n        if (constraint.getHeightRange().contains(s1.height)) {\n            return s1;          }\n        else {\n            RectangleConstraint c = constraint.toFixedHeight(\n                constraint.getHeightRange().getUpperBound()\n            );\n            return arrangeRF(container, g2, c);\n        }\n    }
105	public static JFreeChart createHighLowChart(String title,\n            String timeAxisLabel, String valueAxisLabel, OHLCDataset dataset,\n            boolean legend) {\n\n        ValueAxis timeAxis = new DateAxis(timeAxisLabel);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        HighLowRenderer renderer = new HighLowRenderer();\n        renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());\n        XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
106	public void update(RegularTimePeriod period, Number value) {\n        TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);\n        int index = Collections.binarySearch(this.data, temp);\n        if (index < 0) {\n            throw new SeriesException("There is no existing value for the "\n                    + "specified 'period'.");\n        }\n        update(index, value);\n    }
107	public void sortByKeys(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i),\n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_KEY, order);\n        Arrays.sort(data, comparator);\n        clear();\n\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }
108	protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        Size2D s = arrangeFN(container, g2, constraint);\n        if (constraint.getHeightRange().contains(s.height)) {\n            return s;\n        }\n        else {\n            RectangleConstraint c = constraint.toFixedHeight(\n                    constraint.getHeightRange().constrain(s.getHeight()));\n            return arrangeFF(container, g2, c);\n        }\n    }
109	public static Range iterateZBounds(XYZDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n\n        for (int series = 0; series < seriesCount; series++) {\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double value = dataset.getZValue(series, item);\n                if (!Double.isNaN(value)) {\n                    minimum = Math.min(minimum, value);\n                    maximum = Math.max(maximum, value);\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }
110	protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea) {\n\n        if (!isDomainGridlinesVisible()) {\n            return;\n        }\n        CategoryAnchor anchor = getDomainGridlinePosition();\n        RectangleEdge domainAxisEdge = getDomainAxisEdge();\n        CategoryDataset dataset = getDataset();\n        if (dataset == null) {\n            return;\n        }\n        CategoryAxis axis = getDomainAxis();\n        if (axis != null) {\n            int columnCount = dataset.getColumnCount();\n            for (int c = 0; c < columnCount; c++) {\n                double xx = axis.getCategoryJava2DCoordinate(anchor, c,\n                        columnCount, dataArea, domainAxisEdge);\n                CategoryItemRenderer renderer1 = getRenderer();\n                if (renderer1 != null) {\n                    renderer1.drawDomainGridline(g2, this, dataArea, xx);\n                }\n            }\n        }\n    }
111	private void updateXPoints(XYSeries series) {\n        ParamChecks.nullNotPermitted(series, "series");\n        HashSet seriesXPoints = new HashSet();\n        boolean savedState = this.propagateEvents;\n        this.propagateEvents = false;\n        for (int itemNo = 0; itemNo < series.getItemCount(); itemNo++) {\n            Number xValue = series.getX(itemNo);\n            seriesXPoints.add(xValue);\n            if (!this.xPoints.contains(xValue)) {\n                this.xPoints.add(xValue);\n                int seriesCount = this.data.size();\n                for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {\n                    XYSeries dataSeries = (XYSeries) this.data.get(seriesNo);\n                    if (!dataSeries.equals(series)) {\n                        dataSeries.add(xValue, null);\n                    }\n                }\n            }\n        }\n        Iterator iterator = this.xPoints.iterator();\n        while (iterator.hasNext()) {\n            Number xPoint = (Number) iterator.next();\n            if (!seriesXPoints.contains(xPoint)) {\n                series.add(xPoint, null);\n            }\n        }\n        this.propagateEvents = savedState;\n    }
112	protected void drawLeftLabel(Graphics2D g2, PiePlotState state,\n                                 PieLabelRecord record) {\n\n        double anchorX = state.getLinkArea().getMinX();\n        double targetX = anchorX - record.getGap();\n        double targetY = record.getAllocatedY();\n\n        if (this.labelLinksVisible) {\n            double theta = record.getAngle();\n            double linkX = state.getPieCenterX() + Math.cos(theta)\n                    * state.getPieWRadius() * record.getLinkPercent();\n            double linkY = state.getPieCenterY() - Math.sin(theta)\n                    * state.getPieHRadius() * record.getLinkPercent();\n            double elbowX = state.getPieCenterX() + Math.cos(theta)\n                    * state.getLinkArea().getWidth() / 2.0;\n            double elbowY = state.getPieCenterY() - Math.sin(theta)\n                    * state.getLinkArea().getHeight() / 2.0;\n            double anchorY = elbowY;\n            g2.setPaint(this.labelLinkPaint);\n            g2.setStroke(this.labelLinkStroke);\n            PieLabelLinkStyle style = getLabelLinkStyle();\n            if (style.equals(PieLabelLinkStyle.STANDARD)) {\n                g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));\n                g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));\n                g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));\n            }\n            else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {\n                QuadCurve2D q = new QuadCurve2D.Float();\n                q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);\n                g2.draw(q);\n                g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));\n            }\n            else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {\n                CubicCurve2D c = new CubicCurve2D .Float();\n                c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY,\n                        linkX, linkY);\n                g2.draw(c);\n            }\n        }\n        TextBox tb = record.getLabel();\n        tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.RIGHT);\n\n    }
113	public static Line2D extendLine(Line2D line, double startPercent,\n                              double endPercent) {\n        ParamChecks.nullNotPermitted(line, "line");\n        double x1 = line.getX1();\n        double x2 = line.getX2();\n        double deltaX = x2 - x1;\n        double y1 = line.getY1();\n        double y2 = line.getY2();\n        double deltaY = y2 - y1;\n        x1 = x1 - (startPercent * deltaX);\n        y1 = y1 - (startPercent * deltaY);\n        x2 = x2 + (endPercent * deltaX);\n        y2 = y2 + (endPercent * deltaY);\n        return new Line2D.Double(x1, y1, x2, y2);\n    }
114	public static double calculateQ1(List values) {\n        ParamChecks.nullNotPermitted(values, "values");\n\n        double result = Double.NaN;\n        int count = values.size();\n        if (count > 0) {\n            if (count % 2 == 1) {\n                if (count > 1) {\n                    result = Statistics.calculateMedian(values, 0, count / 2);\n                }\n                else {\n                    result = Statistics.calculateMedian(values, 0, 0);\n                }\n            }\n            else {\n                result = Statistics.calculateMedian(values, 0, count / 2 - 1);\n            }\n\n        }\n        return result;\n    }
115	public void zoomOutDomain(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n            Zoomable z = (Zoomable) plot;\n            z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(),\n                    translateScreenToJava2D(new Point((int) x, (int) y)),\n                    this.zoomAroundAnchor);\n            plot.setNotify(savedNotify);\n        }\n    }
116	private void recalculateBounds() {\n        this.minStartIndex = -1;\n        this.minMiddleIndex = -1;\n        this.minEndIndex = -1;\n        this.maxStartIndex = -1;\n        this.maxMiddleIndex = -1;\n        this.maxEndIndex = -1;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimePeriodValue tpv = (TimePeriodValue) this.data.get(i);\n            updateBounds(tpv.getPeriod(), i);\n        }\n    }
117	public void addDataset(ValueDataset dataset, MeterNeedle needle) {\n\n        if (dataset != null) {\n            int i = this.datasets.length + 1;\n            ValueDataset[] t = new ValueDataset[i];\n            MeterNeedle[] p = new MeterNeedle[i];\n            i = i - 2;\n            for (; i >= 0; --i) {\n                t[i] = this.datasets[i];\n                p[i] = this.seriesNeedle[i];\n            }\n            i = this.datasets.length;\n            t[i] = dataset;\n            p[i] = ((needle != null) ? needle : p[i - 1]);\n\n            ValueDataset[] a = this.datasets;\n            MeterNeedle[] b = this.seriesNeedle;\n            this.datasets = t;\n            this.seriesNeedle = p;\n\n            for (--i; i >= 0; --i) {\n                a[i] = null;\n                b[i] = null;\n            }\n            dataset.addChangeListener(this);\n        }\n    }
118	public static JFreeChart createWindPlot(String title, String xAxisLabel,\n            String yAxisLabel, WindDataset dataset, boolean legend,\n            boolean tooltips, boolean urls) {\n\n        ValueAxis xAxis = new DateAxis(xAxisLabel);\n        ValueAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setRange(-12.0, 12.0);\n\n        WindItemRenderer renderer = new WindItemRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setURLGenerator(new StandardXYURLGenerator());\n        }\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
119	protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,\n                                    double value, Stroke stroke, Paint paint) {\n\n        ValueAxis axis = getDomainAxis();\n        if (getOrientation() == PlotOrientation.HORIZONTAL) {\n            axis = getRangeAxis();\n        }\n        if (axis.getRange().contains(value)) {\n            double xx = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.BOTTOM);\n            Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n            g2.setStroke(stroke);\n            g2.setPaint(paint);\n            g2.draw(line);\n        }\n\n    }
120	private static DateTickUnitType intToUnitType(int unit) {\n        switch (unit) {\n            case YEAR: return DateTickUnitType.YEAR;\n            case MONTH: return DateTickUnitType.MONTH;\n            case DAY: return DateTickUnitType.DAY;\n            case HOUR: return DateTickUnitType.HOUR;\n            case MINUTE: return DateTickUnitType.MINUTE;\n            case SECOND: return DateTickUnitType.SECOND;\n            case MILLISECOND: return DateTickUnitType.MILLISECOND;\n            default: throw new IllegalArgumentException(\n                    "Unrecognised 'unit' value " + unit + ".");\n        }\n    }
121	public void updateAveragedOutlier() {\n        double totalXCoords = 0.0;\n        double totalYCoords = 0.0;\n        int size = getItemCount();\n        for (Iterator iterator = this.outliers.iterator();\n                iterator.hasNext();) {\n            Outlier o = (Outlier) iterator.next();\n            totalXCoords += o.getX();\n            totalYCoords += o.getY();\n        }\n        getAveragedOutlier().getPoint().setLocation(\n                new Point2D.Double(totalXCoords / size, totalYCoords / size));\n    }
122	private void updateBounds() {\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n\n        int rowCount = this.data.getRowCount();\n        int columnCount = this.data.getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                MeanAndStandardDeviation masd = (MeanAndStandardDeviation)\n                        this.data.getObject(r, c);\n                if (masd == null) {\n                    continue;\n                }\n                double m = masd.getMeanValue();\n                double sd = masd.getStandardDeviationValue();\n\n                if (!Double.isNaN(m)) {\n\n                                        if (Double.isNaN(this.maximumRangeValue)) {\n                        this.maximumRangeValue = m;\n                        this.maximumRangeValueRow = r;\n                        this.maximumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m > this.maximumRangeValue) {\n                            this.maximumRangeValue = m;\n                            this.maximumRangeValueRow = r;\n                            this.maximumRangeValueColumn = c;\n                        }\n                    }\n\n                                        if (Double.isNaN(this.minimumRangeValue)) {\n                        this.minimumRangeValue = m;\n                        this.minimumRangeValueRow = r;\n                        this.minimumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m < this.minimumRangeValue) {\n                            this.minimumRangeValue = m;\n                            this.minimumRangeValueRow = r;\n                            this.minimumRangeValueColumn = c;\n                        }\n                    }\n\n                    if (!Double.isNaN(sd)) {\n                                                if (Double.isNaN(this.maximumRangeValueIncStdDev)) {\n                            this.maximumRangeValueIncStdDev = m + sd;\n                            this.maximumRangeValueIncStdDevRow = r;\n                            this.maximumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m + sd > this.maximumRangeValueIncStdDev) {\n                                this.maximumRangeValueIncStdDev = m + sd;\n                                this.maximumRangeValueIncStdDevRow = r;\n                                this.maximumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n\n                                                if (Double.isNaN(this.minimumRangeValueIncStdDev)) {\n                            this.minimumRangeValueIncStdDev = m - sd;\n                            this.minimumRangeValueIncStdDevRow = r;\n                            this.minimumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m - sd < this.minimumRangeValueIncStdDev) {\n                                this.minimumRangeValueIncStdDev = m - sd;\n                                this.minimumRangeValueIncStdDevRow = r;\n                                this.minimumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }
123	protected JPopupMenu createPopupMenu(boolean properties,\n            boolean copy, boolean save, boolean print, boolean zoom) {\n\n        JPopupMenu result = new JPopupMenu(localizationResources.getString("Chart") + ":");\n        boolean separator = false;\n\n        if (properties) {\n            JMenuItem propertiesItem = new JMenuItem(\n                    localizationResources.getString("Properties..."));\n            propertiesItem.setActionCommand(PROPERTIES_COMMAND);\n            propertiesItem.addActionListener(this);\n            result.add(propertiesItem);\n            separator = true;\n        }\n\n        if (copy) {\n            if (separator) {\n                result.addSeparator();\n            }\n            JMenuItem copyItem = new JMenuItem(\n                    localizationResources.getString("Copy"));\n            copyItem.setActionCommand(COPY_COMMAND);\n            copyItem.addActionListener(this);\n            result.add(copyItem);\n            separator = !save;\n        }\n\n        if (save) {\n            if (separator) {\n                result.addSeparator();\n            }\n            JMenu saveSubMenu = new JMenu(localizationResources.getString(\n                    "Save_as"));\n            JMenuItem pngItem = new JMenuItem(localizationResources.getString(\n                    "PNG..."));\n            pngItem.setActionCommand("SAVE_AS_PNG");\n            pngItem.addActionListener(this);\n            saveSubMenu.add(pngItem);\n            \n            if (createSVGGraphics2D(10, 10) != null) {\n                JMenuItem svgItem = new JMenuItem(localizationResources.getString(\n                        "SVG..."));\n                svgItem.setActionCommand("SAVE_AS_SVG");\n                svgItem.addActionListener(this);\n                saveSubMenu.add(svgItem);                \n            }\n            \n            if (isOrsonPDFAvailable()) {\n                JMenuItem pdfItem = new JMenuItem(\n                        localizationResources.getString("PDF..."));\n                pdfItem.setActionCommand("SAVE_AS_PDF");\n                pdfItem.addActionListener(this);\n                saveSubMenu.add(pdfItem);\n            }\n            result.add(saveSubMenu);\n            separator = true;\n        }\n\n        if (print) {\n            if (separator) {\n                result.addSeparator();\n            }\n            JMenuItem printItem = new JMenuItem(\n                    localizationResources.getString("Print..."));\n            printItem.setActionCommand(PRINT_COMMAND);\n            printItem.addActionListener(this);\n            result.add(printItem);\n            separator = true;\n        }\n\n        if (zoom) {\n            if (separator) {\n                result.addSeparator();\n            }\n\n            JMenu zoomInMenu = new JMenu(\n                    localizationResources.getString("Zoom_In"));\n\n            this.zoomInBothMenuItem = new JMenuItem(\n                    localizationResources.getString("All_Axes"));\n            this.zoomInBothMenuItem.setActionCommand(ZOOM_IN_BOTH_COMMAND);\n            this.zoomInBothMenuItem.addActionListener(this);\n            zoomInMenu.add(this.zoomInBothMenuItem);\n\n            zoomInMenu.addSeparator();\n\n            this.zoomInDomainMenuItem = new JMenuItem(\n                    localizationResources.getString("Domain_Axis"));\n            this.zoomInDomainMenuItem.setActionCommand(ZOOM_IN_DOMAIN_COMMAND);\n            this.zoomInDomainMenuItem.addActionListener(this);\n            zoomInMenu.add(this.zoomInDomainMenuItem);\n\n            this.zoomInRangeMenuItem = new JMenuItem(\n                    localizationResources.getString("Range_Axis"));\n            this.zoomInRangeMenuItem.setActionCommand(ZOOM_IN_RANGE_COMMAND);\n            this.zoomInRangeMenuItem.addActionListener(this);\n            zoomInMenu.add(this.zoomInRangeMenuItem);\n\n            result.add(zoomInMenu);\n\n            JMenu zoomOutMenu = new JMenu(\n                    localizationResources.getString("Zoom_Out"));\n\n            this.zoomOutBothMenuItem = new JMenuItem(\n                    localizationResources.getString("All_Axes"));\n            this.zoomOutBothMenuItem.setActionCommand(ZOOM_OUT_BOTH_COMMAND);\n            this.zoomOutBothMenuItem.addActionListener(this);\n            zoomOutMenu.add(this.zoomOutBothMenuItem);\n\n            zoomOutMenu.addSeparator();\n\n            this.zoomOutDomainMenuItem = new JMenuItem(\n                    localizationResources.getString("Domain_Axis"));\n            this.zoomOutDomainMenuItem.setActionCommand(\n                    ZOOM_OUT_DOMAIN_COMMAND);\n            this.zoomOutDomainMenuItem.addActionListener(this);\n            zoomOutMenu.add(this.zoomOutDomainMenuItem);\n\n            this.zoomOutRangeMenuItem = new JMenuItem(\n                    localizationResources.getString("Range_Axis"));\n            this.zoomOutRangeMenuItem.setActionCommand(ZOOM_OUT_RANGE_COMMAND);\n            this.zoomOutRangeMenuItem.addActionListener(this);\n            zoomOutMenu.add(this.zoomOutRangeMenuItem);\n\n            result.add(zoomOutMenu);\n\n            JMenu autoRangeMenu = new JMenu(\n                    localizationResources.getString("Auto_Range"));\n\n            this.zoomResetBothMenuItem = new JMenuItem(\n                    localizationResources.getString("All_Axes"));\n            this.zoomResetBothMenuItem.setActionCommand(\n                    ZOOM_RESET_BOTH_COMMAND);\n            this.zoomResetBothMenuItem.addActionListener(this);\n            autoRangeMenu.add(this.zoomResetBothMenuItem);\n\n            autoRangeMenu.addSeparator();\n            this.zoomResetDomainMenuItem = new JMenuItem(\n                    localizationResources.getString("Domain_Axis"));\n            this.zoomResetDomainMenuItem.setActionCommand(\n                    ZOOM_RESET_DOMAIN_COMMAND);\n            this.zoomResetDomainMenuItem.addActionListener(this);\n            autoRangeMenu.add(this.zoomResetDomainMenuItem);\n\n            this.zoomResetRangeMenuItem = new JMenuItem(\n                    localizationResources.getString("Range_Axis"));\n            this.zoomResetRangeMenuItem.setActionCommand(\n                    ZOOM_RESET_RANGE_COMMAND);\n            this.zoomResetRangeMenuItem.addActionListener(this);\n            autoRangeMenu.add(this.zoomResetRangeMenuItem);\n\n            result.addSeparator();\n            result.add(autoRangeMenu);\n\n        }\n\n        return result;\n\n    }
124	public static Second parseSecond(String s) {\n        Second result = null;\n        s = s.trim();\n        String daystr = s.substring(0, Math.min(10, s.length()));\n        Day day = Day.parseDay(daystr);\n        if (day != null) {\n            String hmsstr = s.substring(Math.min(daystr.length() + 1,\n                    s.length()), s.length());\n            hmsstr = hmsstr.trim();\n\n            int l = hmsstr.length();\n            String hourstr = hmsstr.substring(0, Math.min(2, l));\n            String minstr = hmsstr.substring(Math.min(3, l), Math.min(5, l));\n            String secstr = hmsstr.substring(Math.min(6, l), Math.min(8, l));\n            int hour = Integer.parseInt(hourstr);\n\n            if ((hour >= 0) && (hour <= 23)) {\n\n                int minute = Integer.parseInt(minstr);\n                if ((minute >= 0) && (minute <= 59)) {\n\n                    Minute m = new Minute(minute, new Hour(hour, day));\n                    int second = Integer.parseInt(secstr);\n                    if ((second >= 0) && (second <= 59)) {\n                        result = new Second(second, m);\n                    }\n                }\n            }\n        }\n        return result;\n    }
125	public Point2D translateScreenToJava2D(Point screenPoint) {\n        Insets insets = getInsets();\n        double x = (screenPoint.getX() - insets.left) / this.scaleX;\n        double y = (screenPoint.getY() - insets.top) / this.scaleY;\n        return new Point2D.Double(x, y);\n    }
126	public void addObservations(double[] values) {\n        for (int i = 0; i < values.length; i++) {\n            addObservation(values[i], false);\n        }\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }
127	protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                      List ticks) {\n                if (!isRangeGridlinesVisible() && !isRangeMinorGridlinesVisible()) {\n            return;\n        }\n                ValueAxis axis = getRangeAxis();\n        if (axis == null) {\n            return;\n        }\n                CategoryItemRenderer r = getRenderer();\n        if (r == null) {\n            return;\n        }\n\n        Stroke gridStroke = null;\n        Paint gridPaint = null;\n        boolean paintLine;\n        Iterator iterator = ticks.iterator();\n        while (iterator.hasNext()) {\n            paintLine = false;\n            ValueTick tick = (ValueTick) iterator.next();\n            if ((tick.getTickType() == TickType.MINOR)\n                    && isRangeMinorGridlinesVisible()) {\n                gridStroke = getRangeMinorGridlineStroke();\n                gridPaint = getRangeMinorGridlinePaint();\n                paintLine = true;\n            }\n            else if ((tick.getTickType() == TickType.MAJOR)\n                    && isRangeGridlinesVisible()) {\n                gridStroke = getRangeGridlineStroke();\n                gridPaint = getRangeGridlinePaint();\n                paintLine = true;\n            }\n            if (((tick.getValue() != 0.0)\n                    || !isRangeZeroBaselineVisible()) && paintLine) {\n                                                if (r instanceof AbstractCategoryItemRenderer) {\n                    AbstractCategoryItemRenderer aci\n                            = (AbstractCategoryItemRenderer) r;\n                    aci.drawRangeLine(g2, this, axis, dataArea,\n                            tick.getValue(), gridPaint, gridStroke);\n                }\n                else {\n                                                            r.drawRangeGridline(g2, this, axis, dataArea,\n                            tick.getValue());\n                }\n            }\n        }\n    }
128	private double calculateBarThickness(Rectangle2D plotArea,\n            RectangleEdge edge) {\n        double result;\n        if (RectangleEdge.isLeftOrRight(edge)) {\n            result = plotArea.getWidth() * this.colorBarThicknessPercent;\n        }\n        else {\n            result = plotArea.getHeight() * this.colorBarThicknessPercent;\n        }\n        return result;\n    }
129	private Date correctTickDateForPosition(Date time, DateTickUnit unit,\n            DateTickMarkPosition position) {\n        Date result = time;\n        switch (unit.getUnit()) {\n            case DateTickUnit.MILLISECOND :\n            case DateTickUnit.SECOND :\n            case DateTickUnit.MINUTE :\n            case DateTickUnit.HOUR :\n            case DateTickUnit.DAY :\n                break;\n            case DateTickUnit.MONTH :\n                result = calculateDateForPosition(new Month(time,\n                        this.timeZone, this.locale), position);\n                break;\n            case DateTickUnit.YEAR :\n                result = calculateDateForPosition(new Year(time,\n                        this.timeZone, this.locale), position);\n                break;\n\n            default: break;\n        }\n        return result;\n    }
130	private Map cloneMarkerMap(Map map) throws CloneNotSupportedException {\n        Map clone = new HashMap();\n        Set keys = map.keySet();\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Object key = iterator.next();\n            List entry = (List) map.get(key);\n            Object toAdd = ObjectUtilities.deepClone(entry);\n            clone.put(key, toAdd);\n        }\n        return clone;\n    }
131	public static JFreeChart createBoxAndWhiskerChart(String title,\n            String timeAxisLabel, String valueAxisLabel,\n            BoxAndWhiskerXYDataset dataset, boolean legend) {\n\n        ValueAxis timeAxis = new DateAxis(timeAxisLabel);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        valueAxis.setAutoRangeIncludesZero(false);\n        XYBoxAndWhiskerRenderer renderer = new XYBoxAndWhiskerRenderer(10.0);\n        XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
132	private void drawHorizontalAxisTrace(Graphics2D g2, int x) {\n\n        Rectangle2D dataArea = getScreenDataArea();\n\n        g2.setXORMode(Color.orange);\n        if (((int) dataArea.getMinX() < x) && (x < (int) dataArea.getMaxX())) {\n\n            if (this.verticalTraceLine != null) {\n                g2.draw(this.verticalTraceLine);\n                this.verticalTraceLine.setLine(x, (int) dataArea.getMinY(), x,\n                        (int) dataArea.getMaxY());\n            }\n            else {\n                this.verticalTraceLine = new Line2D.Float(x,\n                        (int) dataArea.getMinY(), x, (int) dataArea.getMaxY());\n            }\n            g2.draw(this.verticalTraceLine);\n        }\n\n                g2.setPaintMode();\n    }
133	public void setValue(Number value, Comparable rowKey,\n                         Comparable columnKey) {\n\n        DefaultKeyedValues row;\n        int rowIndex = getRowIndex(rowKey);\n\n        if (rowIndex >= 0) {\n            row = (DefaultKeyedValues) this.rows.get(rowIndex);\n        }\n        else {\n            row = new DefaultKeyedValues();\n            if (this.sortRowKeys) {\n                rowIndex = -rowIndex - 1;\n                this.rowKeys.add(rowIndex, rowKey);\n                this.rows.add(rowIndex, row);\n            }\n            else {\n                this.rowKeys.add(rowKey);\n                this.rows.add(row);\n            }\n        }\n        row.setValue(columnKey, value);\n\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }
134	private StrokeLineCap awtToJavaFXLineCap(int c) {\n        if (c == BasicStroke.CAP_BUTT) {\n            return StrokeLineCap.BUTT;\n        } else if (c == BasicStroke.CAP_ROUND) {\n            return StrokeLineCap.ROUND;\n        } else if (c == BasicStroke.CAP_SQUARE) {\n            return StrokeLineCap.SQUARE;\n        } else {\n            throw new IllegalArgumentException("Unrecognised cap code: " + c);\n        }\n    }
135	public void validateMinimum() {\n        double newMin;\n        try {\n            newMin = Double.parseDouble(this.minimumRangeValue.getText());\n            if (newMin >= this.maximumValue) {\n                newMin = this.minimumValue;\n            }\n        }\n        catch (NumberFormatException e) {\n            newMin = this.minimumValue;\n        }\n\n        this.minimumValue = newMin;\n        this.minimumRangeValue.setText(Double.toString(this.minimumValue));\n    }
136	public static DefaultAxisEditor getInstance(Axis axis) {\n\n        if (axis != null) {\n                                    if (axis instanceof NumberAxis) {\n                return new DefaultNumberAxisEditor((NumberAxis) axis);\n            }\n            if (axis instanceof LogAxis) {\n                return new DefaultLogAxisEditor((LogAxis) axis);\n            }\n            else {\n                return new DefaultAxisEditor(axis);\n            }\n        }\n        else {\n            return null;\n        }\n\n    }
137	protected void adjustInwards() {\n        int lower = 0;\n        int upper = this.labels.size() - 1;\n        while (upper > lower) {\n            if (lower < upper - 1) {\n                PieLabelRecord r0 = getPieLabelRecord(lower);\n                PieLabelRecord r1 = getPieLabelRecord(lower + 1);\n                if (r1.getLowerY() < r0.getUpperY()) {\n                    double adjust = r0.getUpperY() - r1.getLowerY()\n                                    + this.minGap;\n                    r1.setAllocatedY(r1.getAllocatedY() + adjust);\n                }\n            }\n            PieLabelRecord r2 = getPieLabelRecord(upper - 1);\n            PieLabelRecord r3 = getPieLabelRecord(upper);\n            if (r2.getUpperY() > r3.getLowerY()) {\n                double adjust = (r2.getUpperY() - r3.getLowerY()) + this.minGap;\n                r3.setAllocatedY(r3.getAllocatedY() + adjust);\n            }\n            lower++;\n            upper--;\n        }\n    }
138	protected Size2D arrangeNN(Graphics2D g2) {\n        Rectangle2D contentSize = new Rectangle2D.Double();\n        if (this.line != null) {\n            contentSize.setRect(this.line.getBounds2D());\n        }\n        if (this.shape != null) {\n            contentSize = contentSize.createUnion(this.shape.getBounds2D());\n        }\n        return new Size2D(contentSize.getWidth(), contentSize.getHeight());\n    }
139	public static int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException("Requires xLow < xHigh.");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue > xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue <= xHigh) {\n                return high;\n            }\n            int mid = (low + high) / 2;\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (midV <= xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return mid;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n                                    int low = 0;\n            int high = itemCount - 1;\n            int mid = (low + high) / 2;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue < xLow) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue >= xLow) {\n                return high;\n            }\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return mid;\n        }\n        else {\n                                                int index = itemCount - 1;\n                        double x = dataset.getXValue(series, index);\n            while (index >= 0 && x > xHigh) {\n                index--;\n                if (index >= 0) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.max(index, 0);\n        }\n    }
140	public static JFreeChart createXYStepChart(String title, String xAxisLabel,\n            String yAxisLabel, XYDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        DateAxis xAxis = new DateAxis(xAxisLabel);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer = new XYStepRenderer(toolTipGenerator,\n                urlGenerator);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n        plot.setDomainCrosshairVisible(false);\n        plot.setRangeCrosshairVisible(false);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
141	private boolean equalShapes(Shape[] s1, Shape[] s2) {\n        if (s1 == null) {\n            return s2 == null;\n        }\n        if (s2 == null) {\n            return false;\n        }\n        if (s1.length != s2.length) {\n            return false;\n        }\n        for (int i = 0; i < s1.length; i++) {\n            if (!ShapeUtilities.equal(s1[i], s2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }
142	private void enableOrDisableControls() {\n        boolean enabled = (this.showTitle == true);\n        this.titleField.setEnabled(enabled);\n        this.selectFontButton.setEnabled(enabled);\n        this.selectPaintButton.setEnabled(enabled);\n    }
143	private double fixToRange(double x, double minX, double maxX) {\n        if (minX > maxX) {\n            throw new IllegalArgumentException("Requires 'minX' <= 'maxX'.");\n        }\n        if (x < minX) {\n            return minX;\n        }\n        else if (x > maxX) {\n            return maxX;\n        }\n        else {\n            return x;\n        }\n    }
144	public void updateCrosshairPoint(Comparable rowKey, Comparable columnKey,\n            double value, int datasetIndex, double transX, double transY,\n            PlotOrientation orientation) {\n\n        Point2D anchor = getAnchor();\n        if (anchor != null) {\n            double xx = anchor.getX();\n            double yy = anchor.getY();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                double temp = yy;\n                yy = xx;\n                xx = temp;\n            }\n            double d = (transX - xx) * (transX - xx)\n                    + (transY - yy) * (transY - yy);\n\n            if (d < getCrosshairDistance()) {\n                this.rowKey = rowKey;\n                this.columnKey = columnKey;\n                setCrosshairY(value);\n                setDatasetIndex(datasetIndex);\n                setCrosshairDistance(d);\n            }\n        }\n\n    }
145	protected double getRectX(double x, double w1, double w2,\n                              RectangleEdge edge) {\n\n        double result = x;\n        if (edge == RectangleEdge.LEFT) {\n            result = result + w1;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result = result + w2;\n        }\n        return result;\n\n    }
146	protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int visibleRow,\n                                      int row,\n                                      int column) {\n\n                double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, \n                dataArea, domainAxis, state, visibleRow, column);\n\n                Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {              if (value >= uclip) {\n                return;             }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) {             if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else {             if (value <= lclip) {\n                return;             }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea,\n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,\n                rectHeight);\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n                if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n                Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()\n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()\n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);\n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));\n            }\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            Line2D line;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d,\n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25,\n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25,\n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (value < 0.0));\n        }\n\n                EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }
147	protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                               double width) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        RectangleConstraint c1 = new RectangleConstraint(width, null,\n                LengthConstraintType.FIXED, 0.0, null,\n                LengthConstraintType.NONE);\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2, c1);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(0.0,\n                new Range(0.0, width), LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, c2);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        if (this.rightBlock != null) {\n            double maxW = Math.max(width - w[2], 0.0);\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(Math.min(w[2], maxW), maxW),\n                    LengthConstraintType.RANGE, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.rightBlock.arrange(g2, c3);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.centerBlock.arrange(g2, c4);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        return arrange(container, g2, new RectangleConstraint(width, height));\n    }
148	public void handleMouseDragged(ChartCanvas canvas, MouseEvent e) {\n        if (this.panLast == null) {\n                        canvas.clearLiveHandler();\n            return;\n        }\n\n        JFreeChart chart = canvas.getChart();\n        double dx = e.getX() - this.panLast.getX();\n        double dy = e.getY() - this.panLast.getY();\n        if (dx == 0.0 && dy == 0.0) {\n            return;\n        }\n        double wPercent = -dx / this.panW;\n        double hPercent = dy / this.panH;\n        boolean old = chart.getPlot().isNotify();\n        chart.getPlot().setNotify(false);\n        Pannable p = (Pannable) chart.getPlot();\n        PlotRenderingInfo info = canvas.getRenderingInfo().getPlotInfo();\n        if (p.getOrientation().isVertical()) {\n            p.panDomainAxes(wPercent, info, this.panLast);\n            p.panRangeAxes(hPercent, info, this.panLast);\n        }\n        else {\n            p.panDomainAxes(hPercent, info, this.panLast);\n            p.panRangeAxes(wPercent, info, this.panLast);\n        }\n        this.panLast = new Point2D.Double(e.getX(), e.getY());\n        chart.getPlot().setNotify(old);\n    }
149	public void appendData(float[] newData, int insertionIndex, int refresh) {\n        int nDataPoints = newData.length;\n        if (nDataPoints > this.valueHistory.length) {\n            throw new IllegalArgumentException(\n                    "More data than series to put them in");\n        }\n        for (int s = 0; s < nDataPoints; s++) {\n            if (this.valueHistory[s] == null) {\n                this.valueHistory[s] = new ValueSequence(this.historyCount);\n            }\n            this.valueHistory[s].enterData(insertionIndex, newData[s]);\n        }\n        if (refresh > 0) {\n            insertionIndex++;\n            if (insertionIndex % refresh == 0) {\n                fireSeriesChanged();\n            }\n        }\n    }
150	public void insertValue(int position, Comparable key, Number value) {\n        if (position < 0 || position > getItemCount()) {\n            throw new IllegalArgumentException("'position' out of bounds.");\n        }\n        ParamChecks.nullNotPermitted(key, "key");\n        int pos = getIndex(key);\n        if (pos == position) {\n            this.keys.set(pos, key);\n            this.values.set(pos, value);\n        }\n        else {\n            if (pos >= 0) {\n                this.keys.remove(pos);\n                this.values.remove(pos);\n            }\n\n            this.keys.add(position, key);\n            this.values.add(position, value);\n            rebuildIndex();\n        }\n    }
151	private double transStart(double value, Rectangle2D area,\n                              RectangleEdge edge,\n                              double length1, double length2) {\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            min = area.getX();\n            max = area.getX() + area.getWidth() * length1 / (length1 + length2);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            min = area.getMaxY();\n            max = area.getMaxY() - area.getHeight() * length1\n                  / (length1 + length2);\n        }\n        if (isInverted()) {\n            return max - ((value - this.displayStart)\n                / (this.fixedRange.getUpperBound() - this.displayStart))\n                * (max - min);\n        }\n        else {\n            return min + ((value - this.displayStart)\n                / (this.fixedRange.getUpperBound() - this.displayStart))\n                * (max - min);\n        }\n\n    }
152	public TimeSeriesDataItem addOrUpdate(TimeSeriesDataItem item) {\n\n        ParamChecks.nullNotPermitted(item, "item");\n        Class periodClass = item.getPeriod().getClass();\n        if (this.timePeriodClass == null) {\n            this.timePeriodClass = periodClass;\n        }\n        else if (!this.timePeriodClass.equals(periodClass)) {\n            String msg = "You are trying to add data where the time "\n                    + "period class is " + periodClass.getName()\n                    + ", but the TimeSeries is expecting an instance of "\n                    + this.timePeriodClass.getName() + ".";\n            throw new SeriesException(msg);\n        }\n        TimeSeriesDataItem overwritten = null;\n        int index = Collections.binarySearch(this.data, item);\n        if (index >= 0) {\n            TimeSeriesDataItem existing\n                    = (TimeSeriesDataItem) this.data.get(index);\n            overwritten = (TimeSeriesDataItem) existing.clone();\n                                    boolean iterate = false;\n            Number oldYN = existing.getValue();\n            double oldY = oldYN != null ? oldYN.doubleValue() : Double.NaN;\n            if (!Double.isNaN(oldY)) {\n                iterate = oldY <= this.minY || oldY >= this.maxY;\n            }\n            existing.setValue(item.getValue());\n            if (iterate) {\n                updateMinMaxYByIteration();\n            }\n            else if (item.getValue() != null) {\n                double yy = item.getValue().doubleValue();\n                this.minY = minIgnoreNaN(this.minY, yy);\n                this.maxY = maxIgnoreNaN(this.maxY, yy);\n            }\n        }\n        else {\n            item = (TimeSeriesDataItem) item.clone();\n            this.data.add(-index - 1, item);\n            updateBoundsForAddedItem(item);\n\n                        if (getItemCount() > this.maximumItemCount) {\n                TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);\n                updateBoundsForRemovedItem(d);\n            }\n        }\n        removeAgedItems(false);                                                                            fireSeriesChanged();\n        return overwritten;\n\n    }
153	protected Range findDomainBoundsWithOffset(IntervalXYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue;\n        double uvalue;\n        for (int series = 0; series < seriesCount; series++) {\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                lvalue = dataset.getStartXValue(series, item);\n                uvalue = dataset.getEndXValue(series, item);\n                double offset = (uvalue - lvalue) / 2.0;\n                lvalue = lvalue - offset;\n                uvalue = uvalue - offset;\n                minimum = Math.min(minimum, lvalue);\n                maximum = Math.max(maximum, uvalue);\n            }\n        }\n\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }
154	protected void drawValueLabel(Graphics2D g2, Rectangle2D area) {\n        g2.setFont(this.valueFont);\n        g2.setPaint(this.valuePaint);\n        String valueStr = "No value";\n        if (this.dataset != null) {\n            Number n = this.dataset.getValue();\n            if (n != null) {\n                valueStr = this.tickLabelFormat.format(n.doubleValue()) + " "\n                         + this.units;\n            }\n        }\n        float x = (float) area.getCenterX();\n        float y = (float) area.getCenterY() + DEFAULT_CIRCLE_SIZE;\n        TextUtilities.drawAlignedString(valueStr, g2, x, y,\n                TextAnchor.TOP_CENTER);\n    }
155	protected void drawSimpleLabels(Graphics2D g2, List keys,\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea,\n            PiePlotState state) {\n\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                1.0f));\n\n        Rectangle2D labelsArea = this.simpleLabelOffset.createInsetRectangle(\n                pieArea);\n        double runningTotal = 0.0;\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            boolean include;\n            double v = 0.0;\n            Number n = getDataset().getValue(key);\n            if (n == null) {\n                include = !getIgnoreNullValues();\n            }\n            else {\n                v = n.doubleValue();\n                include = getIgnoreZeroValues() ? v > 0.0 : v >= 0.0;\n            }\n\n            if (include) {\n                runningTotal = runningTotal + v;\n                                                double mid = getStartAngle() + (getDirection().getFactor()\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);\n\n                Arc2D arc = new Arc2D.Double(labelsArea, getStartAngle(),\n                        mid - getStartAngle(), Arc2D.OPEN);\n                int x = (int) arc.getEndPoint().getX();\n                int y = (int) arc.getEndPoint().getY();\n\n                PieSectionLabelGenerator myLabelGenerator = getLabelGenerator();\n                if (myLabelGenerator == null) {\n                    continue;\n                }\n                String label = myLabelGenerator.generateSectionLabel(\n                        this.dataset, key);\n                if (label == null) {\n                    continue;\n                }\n                g2.setFont(this.labelFont);\n                FontMetrics fm = g2.getFontMetrics();\n                Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n                Rectangle2D out = this.labelPadding.createOutsetRectangle(\n                        bounds);\n                Shape bg = ShapeUtilities.createTranslatedShape(out,\n                        x - bounds.getCenterX(), y - bounds.getCenterY());\n                if (this.labelShadowPaint != null\n                        && this.shadowGenerator == null) {\n                    Shape shadow = ShapeUtilities.createTranslatedShape(bg,\n                            this.shadowXOffset, this.shadowYOffset);\n                    g2.setPaint(this.labelShadowPaint);\n                    g2.fill(shadow);\n                }\n                if (this.labelBackgroundPaint != null) {\n                    g2.setPaint(this.labelBackgroundPaint);\n                    g2.fill(bg);\n                }\n                if (this.labelOutlinePaint != null\n                        && this.labelOutlineStroke != null) {\n                    g2.setPaint(this.labelOutlinePaint);\n                    g2.setStroke(this.labelOutlineStroke);\n                    g2.draw(bg);\n                }\n\n                g2.setPaint(this.labelPaint);\n                g2.setFont(this.labelFont);\n                TextUtilities.drawAlignedString(label, g2, x, y,\n                        TextAnchor.CENTER);\n\n            }\n        }\n\n        g2.setComposite(originalComposite);\n\n    }
156	private boolean updateOutlierList(OutlierList list, Outlier outlier) {\n        boolean result = false;\n        result = list.add(outlier);\n        list.updateAveragedOutlier();\n        list.setMultiple(true);\n        return result;\n    }
157	public void addDomainCrosshair(Crosshair crosshair) {\n        ParamChecks.nullNotPermitted(crosshair, "crosshair");\n        this.xCrosshairs.add(crosshair);\n        crosshair.addPropertyChangeListener(this);\n        fireOverlayChanged();\n    }
158	protected void drawInterval(Graphics2D g2,\n                                 CategoryItemRendererState state,\n                                 Rectangle2D dataArea,\n                                 CategoryPlot plot,\n                                 CategoryAxis domainAxis,\n                                 ValueAxis rangeAxis,\n                                 IntervalCategoryDataset dataset,\n                                 int row,\n                                 int column) {\n\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        double rectX = 0.0;\n        double rectY = 0.0;\n\n        RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge();\n\n                Number value0 = dataset.getEndValue(row, column);\n        if (value0 == null) {\n            return;\n        }\n        double java2dValue0 = rangeAxis.valueToJava2D(value0.doubleValue(),\n                dataArea, rangeAxisLocation);\n\n                Number value1 = dataset.getStartValue(row, column);\n        if (value1 == null) {\n            return;\n        }\n        double java2dValue1 = rangeAxis.valueToJava2D(\n                value1.doubleValue(), dataArea, rangeAxisLocation);\n\n        if (java2dValue1 < java2dValue0) {\n            double temp = java2dValue1;\n            java2dValue1 = java2dValue0;\n            java2dValue0 = temp;\n        }\n\n                double rectWidth = state.getBarWidth();\n\n                double rectHeight = Math.abs(java2dValue1 - java2dValue0);\n\n        RectangleEdge barBase = RectangleEdge.LEFT;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n                        rectX = java2dValue0;\n            rectY = calculateBarW0(getPlot(), orientation, dataArea, \n                    domainAxis, state, visibleRow, column);\n            rectHeight = state.getBarWidth();\n            rectWidth = Math.abs(java2dValue1 - java2dValue0);\n            barBase = RectangleEdge.LEFT;\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n                        rectX = calculateBarW0(getPlot(), orientation, dataArea, \n                    domainAxis, state, visibleRow, column);\n            rectY = java2dValue0;\n            barBase = RectangleEdge.BOTTOM;\n        }\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,\n                rectHeight);\n        BarPainter painter = getBarPainter();\n        if (getShadowsVisible()) {\n            painter.paintBarShadow(g2, this, row, column, bar, barBase, false);\n        }\n        getBarPainter().paintBar(g2, this, row, column, bar, barBase);\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    false);\n        }\n\n                EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }
159	protected void drawRightLabels(KeyedValues keys, Graphics2D g2,\n                                   Rectangle2D plotArea, Rectangle2D linkArea,\n                                   float maxLabelWidth, PiePlotState state) {\n\n                this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n\n        for (int i = 0; i < keys.getItemCount(); i++) {\n            String label = this.labelGenerator.generateSectionLabel(\n                    this.dataset, keys.getKey(i));\n\n            if (label != null) {\n                TextBlock block = TextUtilities.createTextBlock(label,\n                        this.labelFont, this.labelPaint, maxLabelWidth,\n                        new G2TextMeasurer(g2));\n                TextBox labelBox = new TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                if (this.shadowGenerator == null) {\n                    labelBox.setShadowPaint(this.labelShadowPaint);\n                }\n                else {\n                    labelBox.setShadowPaint(null);\n                }\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = Math.toRadians(keys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY()\n                              - Math.sin(theta) * verticalLinkRadius;\n                double hh = labelBox.getHeight(g2);\n                this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\n                        keys.getKey(i), theta, baseY, labelBox, hh,\n                        lGap / 2.0 + lGap / 2.0 * Math.cos(theta),\n                        1.0 - getLabelLinkDepth()\n                        + getExplodePercent(keys.getKey(i))));\n            }\n        }\n        double hh = plotArea.getHeight();\n        double gap = 0.00;         this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,\n                hh - 2 * gap);\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawRightLabel(g2, state,\n                    this.labelDistributor.getPieLabelRecord(i));\n        }\n\n    }
160	public void addSeriesLabel(int series, String label) {\n        Integer key = new Integer(series);\n        List labelList = (List) this.seriesLabelLists.get(key);\n        if (labelList == null) {\n            labelList = new java.util.ArrayList();\n            this.seriesLabelLists.put(key, labelList);\n        }\n        labelList.add(label);\n    }
161	protected double calculateTotalHeight(double contentHeight) {\n        double result = contentHeight;\n        result = this.padding.extendHeight(result);\n        result = this.frame.getInsets().extendHeight(result);\n        result = this.margin.extendHeight(result);\n        return result;\n    }
162	private BufferedImage createBufferedImage(JFreeChart chart, int w, int h,\n            int minDrawW, int minDrawH, int maxDrawW, int maxDrawH) {\n\n        BufferedImage image = new BufferedImage(w, h,\n                BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2 = image.createGraphics();\n\n                boolean scale = false;\n        double drawWidth = w;\n        double drawHeight = h;\n        double scaleX = 1.0;\n        double scaleY = 1.0;\n        if (drawWidth < minDrawW) {\n            scaleX = drawWidth / minDrawW;\n            drawWidth = minDrawW;\n            scale = true;\n        }\n        else if (drawWidth > maxDrawW) {\n            scaleX = drawWidth / maxDrawW;\n            drawWidth = maxDrawW;\n            scale = true;\n        }\n        if (drawHeight < minDrawH) {\n            scaleY = drawHeight / minDrawH;\n            drawHeight = minDrawH;\n            scale = true;\n        }\n        else if (drawHeight > maxDrawH) {\n            scaleY = drawHeight / maxDrawH;\n            drawHeight = maxDrawH;\n            scale = true;\n        }\n\n        Rectangle2D chartArea = new Rectangle2D.Double(0.0, 0.0, drawWidth,\n                drawHeight);\n        if (scale) {\n            AffineTransform st = AffineTransform.getScaleInstance(scaleX,\n                    scaleY);\n            g2.transform(st);\n        }\n        chart.draw(g2, chartArea, null, null);\n        g2.dispose();\n        return image;\n\n    }
163	public void removeAllSeries() {\n                        for (int i = 0; i < this.seriesList.size(); i++) {\n            MatrixSeries series = (MatrixSeries) this.seriesList.get(i);\n            series.removeChangeListener(this);\n        }\n\n                this.seriesList.clear();\n        fireDatasetChanged();\n    }
164	public void restoreAutoBounds() {\n        Plot plot = this.chart.getPlot();\n        if (plot == null) {\n            return;\n        }\n                                boolean savedNotify = plot.isNotify();\n        plot.setNotify(false);\n        restoreAutoDomainBounds();\n        restoreAutoRangeBounds();\n        plot.setNotify(savedNotify);\n    }
165	protected void drawCornerTextItems(Graphics2D g2, Rectangle2D area) {\n        if (this.cornerTextItems.isEmpty()) {\n            return;\n        }\n\n        g2.setColor(Color.black);\n        double width = 0.0;\n        double height = 0.0;\n        for (Iterator it = this.cornerTextItems.iterator(); it.hasNext();) {\n            String msg = (String) it.next();\n            FontMetrics fm = g2.getFontMetrics();\n            Rectangle2D bounds = TextUtilities.getTextBounds(msg, g2, fm);\n            width = Math.max(width, bounds.getWidth());\n            height += bounds.getHeight();\n        }\n\n        double xadj = ANNOTATION_MARGIN * 2.0;\n        double yadj = ANNOTATION_MARGIN;\n        width += xadj;\n        height += yadj;\n\n        double x = area.getMaxX() - width;\n        double y = area.getMaxY() - height;\n        g2.drawRect((int) x, (int) y, (int) width, (int) height);\n        x += ANNOTATION_MARGIN;\n        for (Iterator it = this.cornerTextItems.iterator(); it.hasNext();) {\n            String msg = (String) it.next();\n            Rectangle2D bounds = TextUtilities.getTextBounds(msg, g2,\n                    g2.getFontMetrics());\n            y += bounds.getHeight();\n            g2.drawString(msg, (int) x, (int) y);\n        }\n    }
166	public XYDataItem addOrUpdate(XYDataItem item) {\n        ParamChecks.nullNotPermitted(item, "item");\n        if (this.allowDuplicateXValues) {\n            add(item);\n            return null;\n        }\n\n                XYDataItem overwritten = null;\n        int index = indexOf(item.getX());\n        if (index >= 0) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            overwritten = (XYDataItem) existing.clone();\n                        boolean iterate = false;\n            double oldY = existing.getYValue();\n            if (!Double.isNaN(oldY)) {\n                iterate = oldY <= this.minY || oldY >= this.maxY;\n            }\n            existing.setY(item.getY());\n\n            if (iterate) {\n                findBoundsByIteration();\n            }\n            else if (item.getY() != null) {\n                double yy = item.getY().doubleValue();\n                this.minY = minIgnoreNaN(this.minY, yy);\n                this.maxY = maxIgnoreNaN(this.maxY, yy);\n            }\n        }\n        else {\n                                                            item = (XYDataItem) item.clone();\n            if (this.autoSort) {\n                this.data.add(-index - 1, item);\n            }\n            else {\n                this.data.add(item);\n            }\n            updateBoundsForAddedItem(item);\n\n                        if (getItemCount() > this.maximumItemCount) {\n                XYDataItem removed = (XYDataItem) this.data.remove(0);\n                updateBoundsForRemovedItem(removed);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }
167	public static void writeAsSVG(Drawable drawable, int w, int h, \n            File file) {\n        if (!ExportUtils.isJFreeSVGAvailable()) {\n            throw new IllegalStateException(\n                    "JFreeSVG is not present on the classpath.");\n        }\n        ParamChecks.nullNotPermitted(drawable, "drawable");\n        ParamChecks.nullNotPermitted(file, "file");\n        try {\n            Class<?> svg2Class = Class.forName(\n                    "org.jfree.graphics2d.svg.SVGGraphics2D");\n            Constructor<?> c1 = svg2Class.getConstructor(int.class, int.class);\n            Graphics2D svg2 = (Graphics2D) c1.newInstance(w, h);\n            Rectangle2D drawArea = new Rectangle2D.Double(0, 0, w, h);\n            drawable.draw(svg2, drawArea);\n            Class<?> svgUtilsClass = Class.forName(\n                    "org.jfree.graphics2d.svg.SVGUtils");\n            Method m1 = svg2Class.getMethod("getSVGElement", (Class[]) null);\n            String element = (String) m1.invoke(svg2, (Object[]) null);\n            Method m2 = svgUtilsClass.getMethod("writeToSVG", File.class, \n                    String.class);\n            m2.invoke(svgUtilsClass, file, element);\n        } catch (ClassNotFoundException ex) {\n            throw new RuntimeException(ex);\n        } catch (InstantiationException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex);\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        } catch (SecurityException ex) {\n            throw new RuntimeException(ex);\n        } catch (IllegalArgumentException ex) {\n            throw new RuntimeException(ex);\n        } catch (InvocationTargetException ex) {\n            throw new RuntimeException(ex);\n        }\n    }
168	private void rebuildIndex () {\n        this.indexMap.clear();\n        for (int i = 0; i < this.keys.size(); i++) {\n            final Object key = this.keys.get(i);\n            this.indexMap.put(key, new Integer(i));\n        }\n    }
169	private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        int rowCount = getRowCount();\n        int columnCount = getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                BoxAndWhiskerItem item = getItem(r, c);\n                if (item != null) {\n                    Number min = item.getMinOutlier();\n                    if (min != null) {\n                        double minv = min.doubleValue();\n                        if (!Double.isNaN(minv)) {\n                            if (minv < this.minimumRangeValue || Double.isNaN(\n                                    this.minimumRangeValue)) {\n                                this.minimumRangeValue = minv;\n                                this.minimumRangeValueRow = r;\n                                this.minimumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                    Number max = item.getMaxOutlier();\n                    if (max != null) {\n                        double maxv = max.doubleValue();\n                        if (!Double.isNaN(maxv)) {\n                            if (maxv > this.maximumRangeValue || Double.isNaN(\n                                    this.maximumRangeValue)) {\n                                this.maximumRangeValue = maxv;\n                                this.maximumRangeValueRow = r;\n                                this.maximumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }
170	public void add(XYPlot subplot, int weight) {\n        ParamChecks.nullNotPermitted(subplot, "subplot");\n        if (weight <= 0) {\n            throw new IllegalArgumentException("Require weight >= 1.");\n        }\n\n                subplot.setParent(this);\n        subplot.setWeight(weight);\n        subplot.setInsets(RectangleInsets.ZERO_INSETS, false);\n        subplot.setDomainAxis(null);\n        subplot.addChangeListener(this);\n        this.subplots.add(subplot);\n\n        ValueAxis axis = getDomainAxis();\n        if (axis != null) {\n            axis.configure();\n        }\n        fireChangeEvent();\n    }
171	public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n                        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Line2D line = null;\n        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        } else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), v,\n                    dataArea.getMaxX(), v);\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        g2.draw(line);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
172	public static JFreeChart createXYBarChart(String title, String xAxisLabel,\n            boolean dateAxis, String yAxisLabel, IntervalXYDataset dataset,\n            PlotOrientation orientation, boolean legend, boolean tooltips,\n            boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        ValueAxis domainAxis;\n        if (dateAxis) {\n            domainAxis = new DateAxis(xAxisLabel);\n        }\n        else {\n            NumberAxis axis = new NumberAxis(xAxisLabel);\n            axis.setAutoRangeIncludesZero(false);\n            domainAxis = axis;\n        }\n        ValueAxis valueAxis = new NumberAxis(yAxisLabel);\n\n        XYBarRenderer renderer = new XYBarRenderer();\n        if (tooltips) {\n            XYToolTipGenerator tt;\n            if (dateAxis) {\n                tt = StandardXYToolTipGenerator.getTimeSeriesInstance();\n            }\n            else {\n                tt = new StandardXYToolTipGenerator();\n            }\n            renderer.setBaseToolTipGenerator(tt);\n        }\n        if (urls) {\n            renderer.setURLGenerator(new StandardXYURLGenerator());\n        }\n\n        XYPlot plot = new XYPlot(dataset, domainAxis, valueAxis, renderer);\n        plot.setOrientation(orientation);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
173	public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n\n                if (includeInterval && dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = ixyd.getYValue(series, item);\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof OHLCDataset) {\n                        OHLCDataset ohlc = (OHLCDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ohlc.getLowValue(series, item);\n                    double uvalue = ohlc.getHighValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n                        for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = dataset.getYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }
174	public static Number findMinimumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        Number result;\n                if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }
175	protected void displayPopupMenu(int x, int y) {\n\n        if (this.popup == null) {\n            return;\n        }\n\n                        boolean isDomainZoomable = false;\n        boolean isRangeZoomable = false;\n        Plot plot = (this.chart != null ? this.chart.getPlot() : null);\n        if (plot instanceof Zoomable) {\n            Zoomable z = (Zoomable) plot;\n            isDomainZoomable = z.isDomainZoomable();\n            isRangeZoomable = z.isRangeZoomable();\n        }\n\n        if (this.zoomInDomainMenuItem != null) {\n            this.zoomInDomainMenuItem.setEnabled(isDomainZoomable);\n        }\n        if (this.zoomOutDomainMenuItem != null) {\n            this.zoomOutDomainMenuItem.setEnabled(isDomainZoomable);\n        }\n        if (this.zoomResetDomainMenuItem != null) {\n            this.zoomResetDomainMenuItem.setEnabled(isDomainZoomable);\n        }\n\n        if (this.zoomInRangeMenuItem != null) {\n            this.zoomInRangeMenuItem.setEnabled(isRangeZoomable);\n        }\n        if (this.zoomOutRangeMenuItem != null) {\n            this.zoomOutRangeMenuItem.setEnabled(isRangeZoomable);\n        }\n\n        if (this.zoomResetRangeMenuItem != null) {\n            this.zoomResetRangeMenuItem.setEnabled(isRangeZoomable);\n        }\n\n        if (this.zoomInBothMenuItem != null) {\n            this.zoomInBothMenuItem.setEnabled(isDomainZoomable\n                    && isRangeZoomable);\n        }\n        if (this.zoomOutBothMenuItem != null) {\n            this.zoomOutBothMenuItem.setEnabled(isDomainZoomable\n                    && isRangeZoomable);\n        }\n        if (this.zoomResetBothMenuItem != null) {\n            this.zoomResetBothMenuItem.setEnabled(isDomainZoomable\n                    && isRangeZoomable);\n        }\n\n        this.popup.show(this, x, y);\n\n    }
176	public static String saveChartAsPNG(JFreeChart chart, int width, int height,\n            ChartRenderingInfo info, HttpSession session) throws IOException {\n\n        ParamChecks.nullNotPermitted(chart, "chart");\n        ServletUtilities.createTempDir();\n        String prefix = ServletUtilities.tempFilePrefix;\n        if (session == null) {\n            prefix = ServletUtilities.tempOneTimeFilePrefix;\n        }\n        File tempFile = File.createTempFile(prefix, ".png",\n                new File(System.getProperty("java.io.tmpdir")));\n        ChartUtilities.saveChartAsPNG(tempFile, chart, width, height, info);\n        if (session != null) {\n            ServletUtilities.registerChartForDeletion(tempFile, session);\n        }\n        return tempFile.getName();\n\n    }
177	public void clearRangeMarkers() {\n        if (this.backgroundRangeMarkers != null) {\n            Set keys = this.backgroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.backgroundRangeMarkers.clear();\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Set keys = this.foregroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.foregroundRangeMarkers.clear();\n        }\n        fireChangeEvent();\n    }
178	private static Object clone(Object object) {\n        if (object == null) {\n            return null;\n        }\n        Class c = object.getClass();\n        Object result = null;\n        try {\n            Method m = c.getMethod("clone", (Class[]) null);\n            if (Modifier.isPublic(m.getModifiers())) {\n                try {\n                    result = m.invoke(object, (Object[]) null);\n                }\n                catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        catch (NoSuchMethodException e) {\n            result = object;\n        }\n        return result;\n    }
179	public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n\n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (this.dataset != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n\n    }
180	private void makePaintIndex() {\n        if (this.plot == null) {\n            return;\n        }\n        WaferMapDataset data = this.plot.getDataset();\n        Number dataMin = data.getMinValue();\n        Number dataMax = data.getMaxValue();\n        Set uniqueValues = data.getUniqueValues();\n        if (uniqueValues.size() <= this.paintLimit) {\n            int count = 0;             for (Iterator i = uniqueValues.iterator(); i.hasNext();) {\n                this.paintIndex.put(i.next(), new Integer(count++));\n            }\n        }\n        else {\n                                    switch (this.paintIndexMethod) {\n                case POSITION_INDEX:\n                    makePositionIndex(uniqueValues);\n                    break;\n                case VALUE_INDEX:\n                    makeValueIndex(dataMax, dataMin, uniqueValues);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }
181	protected double estimateMaximumTickLabelWidth(Graphics2D g2, \n            TickUnit unit) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();\n\n        if (isVerticalTickLabels()) {\n                                    FontRenderContext frc = g2.getFontRenderContext();\n            LineMetrics lm = getTickLabelFont().getLineMetrics("0", frc);\n            result += lm.getHeight();\n        }\n        else {\n                        Range range = getRange();\n            double lower = range.getLowerBound();\n            double upper = range.getUpperBound();\n            AttributedString lowerStr = createTickLabel(lower);\n            AttributedString upperStr = createTickLabel(upper);\n            double w1 = AttrStringUtils.getTextBounds(lowerStr, g2).getWidth();\n            double w2 = AttrStringUtils.getTextBounds(upperStr, g2).getWidth();\n            result += Math.max(w1, w2);\n        }\n        return result;\n    }
182	protected double findMaximumTickLabelWidth(List ticks, Graphics2D g2,\n            Rectangle2D drawArea, boolean vertical) {\n\n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        double maxWidth = 0.0;\n        if (!vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = null;\n                if (tick instanceof LogTick) {\n                    LogTick lt = (LogTick) tick;\n                    if (lt.getAttributedLabel() != null) {\n                        labelBounds = AttrStringUtils.getTextBounds(\n                                lt.getAttributedLabel(), g2);\n                    }\n                } else if (tick.getText() != null) {\n                    labelBounds = TextUtilities.getTextBounds(tick.getText(), \n                            g2, fm);\n                }\n                if (labelBounds != null \n                        && labelBounds.getWidth() + insets.getLeft()\n                        + insets.getRight() > maxWidth) {\n                    maxWidth = labelBounds.getWidth()\n                               + insets.getLeft() + insets.getRight();\n                }\n            }\n        } else {\n            LineMetrics metrics = font.getLineMetrics("ABCxyz",\n                    g2.getFontRenderContext());\n            maxWidth = metrics.getHeight()\n                       + insets.getTop() + insets.getBottom();\n        }\n        return maxWidth;\n\n    }
183	public static void writeAsPNG(Drawable drawable, int w, int h, \n            File file) throws FileNotFoundException, IOException {\n        BufferedImage image = new BufferedImage(w, h, \n                BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2 = image.createGraphics();\n        drawable.draw(g2, new Rectangle(w, h));\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n        try {\n            ImageIO.write(image, "png", out);\n        }\n        finally {\n            out.close();\n        }\n    }
184	protected AxisState drawAxis(ValueAxis axis, PolarAxisLocation location,\n            Graphics2D g2, Rectangle2D plotArea) {\n\n        double centerX = plotArea.getCenterX();\n        double centerY = plotArea.getCenterY();\n        double r = Math.min(plotArea.getWidth() / 2.0,\n                plotArea.getHeight() / 2.0) - this.margin;\n        double x = centerX - r;\n        double y = centerY - r;\n\n        Rectangle2D dataArea = null;\n        AxisState result = null;\n        if (location == PolarAxisLocation.NORTH_RIGHT) {\n            dataArea = new Rectangle2D.Double(x, y, r, r);\n            result = axis.draw(g2, centerX, plotArea, dataArea,\n                    RectangleEdge.RIGHT, null);\n        }\n        else if (location == PolarAxisLocation.NORTH_LEFT) {\n            dataArea = new Rectangle2D.Double(centerX, y, r, r);\n            result = axis.draw(g2, centerX, plotArea, dataArea,\n                    RectangleEdge.LEFT, null);\n        }\n        else if (location == PolarAxisLocation.SOUTH_LEFT) {\n            dataArea = new Rectangle2D.Double(centerX, centerY, r, r);\n            result = axis.draw(g2, centerX, plotArea, dataArea,\n                    RectangleEdge.LEFT, null);\n        }\n        else if (location == PolarAxisLocation.SOUTH_RIGHT) {\n            dataArea = new Rectangle2D.Double(x, centerY, r, r);\n            result = axis.draw(g2, centerX, plotArea, dataArea,\n                    RectangleEdge.RIGHT, null);\n        }\n        else if (location == PolarAxisLocation.EAST_ABOVE) {\n            dataArea = new Rectangle2D.Double(centerX, centerY, r, r);\n            result = axis.draw(g2, centerY, plotArea, dataArea,\n                    RectangleEdge.TOP, null);\n        }\n        else if (location == PolarAxisLocation.EAST_BELOW) {\n            dataArea = new Rectangle2D.Double(centerX, y, r, r);\n            result = axis.draw(g2, centerY, plotArea, dataArea,\n                    RectangleEdge.BOTTOM, null);\n        }\n        else if (location == PolarAxisLocation.WEST_ABOVE) {\n            dataArea = new Rectangle2D.Double(x, centerY, r, r);\n            result = axis.draw(g2, centerY, plotArea, dataArea,\n                    RectangleEdge.TOP, null);\n        }\n        else if (location == PolarAxisLocation.WEST_BELOW) {\n            dataArea = new Rectangle2D.Double(x, y, r, r);\n            result = axis.draw(g2, centerY, plotArea, dataArea,\n                    RectangleEdge.BOTTOM, null);\n        }\n\n        return result;\n    }
185	public void changeTickFontSize(int delta) {\n        Font f = getTickLabelFont();\n        String fName = f.getFontName();\n        Font newFont = new Font(fName, f.getStyle(), (f.getSize() + delta));\n        setTickLabelFont(newFont);\n    }
186	private boolean areSeriesDisjoint(XYDataset x_dataset) {\n\n        int l_minuendItemCount = x_dataset.getItemCount(0);\n        double l_minuendFirst  = x_dataset.getXValue(0, 0);\n        double l_minuendLast   = x_dataset.getXValue(0, l_minuendItemCount - 1);\n\n        int l_subtrahendItemCount = x_dataset.getItemCount(1);\n        double l_subtrahendFirst  = x_dataset.getXValue(1, 0);\n        double l_subtrahendLast   = x_dataset.getXValue(1,\n                l_subtrahendItemCount - 1);\n\n        return ((l_minuendLast < l_subtrahendFirst)\n                || (l_subtrahendLast < l_minuendFirst));\n    }
187	private void makeValueIndex(Number max, Number min, Set uniqueValues) {\n        double valueRange = max.doubleValue() - min.doubleValue();\n        double valueStep = valueRange / this.paintLimit;\n        int paint = 0;\n        double cutPoint = min.doubleValue() + valueStep;\n        for (Iterator i = uniqueValues.iterator(); i.hasNext();) {\n            Number value = (Number) i.next();\n            while (value.doubleValue() > cutPoint) {\n                cutPoint += valueStep;\n                paint++;\n                if (paint > this.paintLimit) {\n                    paint = this.paintLimit;\n                }\n            }\n            this.paintIndex.put(value, new Integer(paint));\n        }\n    }
188	private Range calculateYDataRange(float[][] data) {\n\n        Range result = null;\n        if (data != null) {\n            float lowest = Float.POSITIVE_INFINITY;\n            float highest = Float.NEGATIVE_INFINITY;\n            for (int i = 0; i < data[0].length; i++) {\n                float v = data[1][i];\n                if (v < lowest) {\n                    lowest = v;\n                }\n                if (v > highest) {\n                    highest = v;\n                }\n            }\n            if (lowest <= highest) {\n                result = new Range(lowest, highest);\n            }\n        }\n        return result;\n\n    }
189	private Range calculateXDataRange(float[][] data) {\n\n        Range result = null;\n\n        if (data != null) {\n            float lowest = Float.POSITIVE_INFINITY;\n            float highest = Float.NEGATIVE_INFINITY;\n            for (int i = 0; i < data[0].length; i++) {\n                float v = data[0][i];\n                if (v < lowest) {\n                    lowest = v;\n                }\n                if (v > highest) {\n                    highest = v;\n                }\n            }\n            if (lowest <= highest) {\n                result = new Range(lowest, highest);\n            }\n        }\n\n        return result;\n\n    }
190	public static JFreeChart createTimeSeriesChart(String title,\n            String timeAxisLabel, String valueAxisLabel, XYDataset dataset,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ValueAxis timeAxis = new DateAxis(timeAxisLabel);\n        timeAxis.setLowerMargin(0.02);          timeAxis.setUpperMargin(0.02);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        valueAxis.setAutoRangeIncludesZero(false);          XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator\n                = StandardXYToolTipGenerator.getTimeSeriesInstance();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n\n        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer(true,\n                false);\n        renderer.setBaseToolTipGenerator(toolTipGenerator);\n        renderer.setURLGenerator(urlGenerator);\n        plot.setRenderer(renderer);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
191	protected double calculateTextBlockWidth(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2) {\n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(),\n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double w = rotatedBox.getBounds2D().getWidth() + insets.getLeft()\n                + insets.getRight();\n        return w;\n    }
192	private Shape[] createHorizontalBlock(double x0, double width, double y0,\n            double y1, boolean inverted) {\n        Shape[] result = new Shape[6];\n        Point2D p00 = new Point2D.Double(y0, x0);\n        Point2D p01 = new Point2D.Double(y0, x0 + width);\n        Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(),\n                p01.getY() - getYOffset());\n        Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(),\n                p00.getY() - getYOffset());\n\n        Point2D p0 = new Point2D.Double(y1, x0);\n        Point2D p1 = new Point2D.Double(y1, x0 + width);\n        Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(),\n                p1.getY() - getYOffset());\n        Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(),\n                p0.getY() - getYOffset());\n\n        GeneralPath bottom = new GeneralPath();\n        bottom.moveTo((float) p1.getX(), (float) p1.getY());\n        bottom.lineTo((float) p01.getX(), (float) p01.getY());\n        bottom.lineTo((float) p02.getX(), (float) p02.getY());\n        bottom.lineTo((float) p2.getX(), (float) p2.getY());\n        bottom.closePath();\n\n        GeneralPath top = new GeneralPath();\n        top.moveTo((float) p0.getX(), (float) p0.getY());\n        top.lineTo((float) p00.getX(), (float) p00.getY());\n        top.lineTo((float) p03.getX(), (float) p03.getY());\n        top.lineTo((float) p3.getX(), (float) p3.getY());\n        top.closePath();\n\n        GeneralPath back = new GeneralPath();\n        back.moveTo((float) p2.getX(), (float) p2.getY());\n        back.lineTo((float) p02.getX(), (float) p02.getY());\n        back.lineTo((float) p03.getX(), (float) p03.getY());\n        back.lineTo((float) p3.getX(), (float) p3.getY());\n        back.closePath();\n\n        GeneralPath front = new GeneralPath();\n        front.moveTo((float) p0.getX(), (float) p0.getY());\n        front.lineTo((float) p1.getX(), (float) p1.getY());\n        front.lineTo((float) p01.getX(), (float) p01.getY());\n        front.lineTo((float) p00.getX(), (float) p00.getY());\n        front.closePath();\n\n        GeneralPath left = new GeneralPath();\n        left.moveTo((float) p0.getX(), (float) p0.getY());\n        left.lineTo((float) p1.getX(), (float) p1.getY());\n        left.lineTo((float) p2.getX(), (float) p2.getY());\n        left.lineTo((float) p3.getX(), (float) p3.getY());\n        left.closePath();\n\n        GeneralPath right = new GeneralPath();\n        right.moveTo((float) p00.getX(), (float) p00.getY());\n        right.lineTo((float) p01.getX(), (float) p01.getY());\n        right.lineTo((float) p02.getX(), (float) p02.getY());\n        right.lineTo((float) p03.getX(), (float) p03.getY());\n        right.closePath();\n        result[0] = bottom;\n        result[1] = back;\n        if (inverted) {\n            result[2] = right;\n            result[3] = left;\n        }\n        else {\n            result[2] = left;\n            result[3] = right;\n        }\n        result[4] = top;\n        result[5] = front;\n        return result;\n    }
193	public static List seriesNameListFromDataArray(Object[][] data) {\n        int seriesCount = data.length;\n        List seriesNameList = new java.util.ArrayList(seriesCount);\n        for (int i = 0; i < seriesCount; i++) {\n            seriesNameList.add("Series " + (i + 1));\n        }\n        return seriesNameList;\n    }
194	protected void drawRangeLine(Graphics2D g2, Rectangle2D dataArea,\n            double value, Stroke stroke, Paint paint) {\n\n        double java2D = getRangeAxis().valueToJava2D(value, dataArea,\n                getRangeAxisEdge());\n        Line2D line = null;\n        if (this.orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(java2D, dataArea.getMinY(), java2D,\n                    dataArea.getMaxY());\n        }\n        else if (this.orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), java2D,\n                    dataArea.getMaxX(), java2D);\n        }\n        g2.setStroke(stroke);\n        g2.setPaint(paint);\n        g2.draw(line);\n\n    }
195	protected double getRectY(double y, double h1, double h2,\n                              RectangleEdge edge) {\n\n        double result = y;\n        if (edge == RectangleEdge.TOP) {\n            result = result + h1;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result = result + h2;\n        }\n        return result;\n\n    }
196	public static Range expand(Range range,\n                               double lowerMargin, double upperMargin) {\n        ParamChecks.nullNotPermitted(range, "range");\n        double length = range.getLength();\n        double lower = range.getLowerBound() - length * lowerMargin;\n        double upper = range.getUpperBound() + length * upperMargin;\n        if (lower > upper) {\n            lower = lower / 2.0 + upper / 2.0;\n            upper = lower;\n        }\n        return new Range(lower, upper);\n    }
197	public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                   List ticks) {\n        Paint bandPaint = getRangeTickBandPaint();\n        if (bandPaint != null) {\n            boolean fillBand = false;\n            ValueAxis axis = getRangeAxis();\n            double previous = axis.getLowerBound();\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                ValueTick tick = (ValueTick) iterator.next();\n                double current = tick.getValue();\n                if (fillBand) {\n                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea,\n                            previous, current);\n                }\n                previous = current;\n                fillBand = !fillBand;\n            }\n            double end = axis.getUpperBound();\n            if (fillBand) {\n                getRenderer().fillRangeGridBand(g2, this, axis, dataArea,\n                        previous, end);\n            }\n        }\n    }
198	public static double[] getLinearFit(Number[] xData, Number[] yData) {\n\n        ParamChecks.nullNotPermitted(xData, "xData");\n        ParamChecks.nullNotPermitted(yData, "yData");\n        if (xData.length != yData.length) {\n            throw new IllegalArgumentException(\n                "Statistics.getLinearFit(): array lengths must be equal.");\n        }\n\n        double[] result = new double[2];\n                result[1] = getSlope(xData, yData);\n                result[0] = calculateMean(yData) - result[1] * calculateMean(xData);\n\n        return result;\n\n    }
199	public static JFreeChart createCandlestickChart(String title,\n            String timeAxisLabel, String valueAxisLabel, OHLCDataset dataset,\n            boolean legend) {\n\n        ValueAxis timeAxis = new DateAxis(timeAxisLabel);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n        plot.setRenderer(new CandlestickRenderer());\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
200	protected void drawLabels(Graphics2D g2, List keys, double totalValue,\n                              Rectangle2D plotArea, Rectangle2D linkArea,\n                              PiePlotState state) {\n\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                1.0f));\n\n                DefaultKeyedValues leftKeys = new DefaultKeyedValues();\n        DefaultKeyedValues rightKeys = new DefaultKeyedValues();\n\n        double runningTotal = 0.0;\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            boolean include;\n            double v = 0.0;\n            Number n = this.dataset.getValue(key);\n            if (n == null) {\n                include = !this.ignoreNullValues;\n            }\n            else {\n                v = n.doubleValue();\n                include = this.ignoreZeroValues ? v > 0.0 : v >= 0.0;\n            }\n\n            if (include) {\n                runningTotal = runningTotal + v;\n                                                double mid = this.startAngle + (this.direction.getFactor()\n                        * ((runningTotal - v / 2.0) * 360) / totalValue);\n                if (Math.cos(Math.toRadians(mid)) < 0.0) {\n                    leftKeys.addValue(key, new Double(mid));\n                }\n                else {\n                    rightKeys.addValue(key, new Double(mid));\n                }\n            }\n        }\n\n        g2.setFont(getLabelFont());\n\n                        double marginX = plotArea.getX();\n        double gap = plotArea.getWidth() * this.labelGap;\n        double ww = linkArea.getX() - gap - marginX;\n        float labelWidth = (float) this.labelPadding.trimWidth(ww);\n\n                if (this.labelGenerator != null) {\n            drawLeftLabels(leftKeys, g2, plotArea, linkArea, labelWidth,\n                    state);\n            drawRightLabels(rightKeys, g2, plotArea, linkArea, labelWidth,\n                    state);\n        }\n        g2.setComposite(originalComposite);\n\n    }
201	protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        Size2D s = arrangeFN(container, g2, constraint);\n        if (constraint.getHeightRange().contains(s.height)) {\n            return s;\n        }\n        else {\n            RectangleConstraint c = constraint.toFixedHeight(\n                constraint.getHeightRange().constrain(s.getHeight())\n            );\n            return arrangeFF(container, g2, c);\n        }\n    }
202	public static Range findRangeBounds(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        Range result;\n        if (dataset instanceof CategoryRangeInfo) {\n            CategoryRangeInfo info = (CategoryRangeInfo) dataset;\n            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);\n        }\n        else {\n            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\n                    includeInterval);\n        }\n        return result;\n    }
203	public long getTimeFromLong(long date) {\n        long result = date;\n        if (this.adjustForDaylightSaving) {\n            this.workingCalendarNoDST.setTime(new Date(date));\n            this.workingCalendar.set(\n                this.workingCalendarNoDST.get(Calendar.YEAR),\n                this.workingCalendarNoDST.get(Calendar.MONTH),\n                this.workingCalendarNoDST.get(Calendar.DATE),\n                this.workingCalendarNoDST.get(Calendar.HOUR_OF_DAY),\n                this.workingCalendarNoDST.get(Calendar.MINUTE),\n                this.workingCalendarNoDST.get(Calendar.SECOND)\n            );\n            this.workingCalendar.set(Calendar.MILLISECOND,\n                    this.workingCalendarNoDST.get(Calendar.MILLISECOND));\n                                    result = this.workingCalendar.getTime().getTime();\n        }\n        return result;\n    }
204	protected void fillBackground(Graphics2D g2, Rectangle2D area,\n            PlotOrientation orientation) {\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        if (this.backgroundPaint == null) {\n            return;\n        }\n        Paint p = this.backgroundPaint;\n        if (p instanceof GradientPaint) {\n            GradientPaint gp = (GradientPaint) p;\n            if (orientation == PlotOrientation.VERTICAL) {\n                p = new GradientPaint((float) area.getCenterX(),\n                        (float) area.getMaxY(), gp.getColor1(),\n                        (float) area.getCenterX(), (float) area.getMinY(),\n                        gp.getColor2());\n            }\n            else if (orientation == PlotOrientation.HORIZONTAL) {\n                p = new GradientPaint((float) area.getMinX(),\n                        (float) area.getCenterY(), gp.getColor1(),\n                        (float) area.getMaxX(), (float) area.getCenterY(),\n                        gp.getColor2());\n            }\n        }\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                this.backgroundAlpha));\n        g2.setPaint(p);\n        g2.fill(area);\n        g2.setComposite(originalComposite);\n    }
205	private String removeStringDelimiters(String key) {\n        String k = key.trim();\n        if (k.charAt(0) == this.textDelimiter) {\n            k = k.substring(1);\n        }\n        if (k.charAt(k.length() - 1) == this.textDelimiter) {\n            k = k.substring(0, k.length() - 1);\n        }\n        return k;\n    }
206	private ContextMenu createContextMenu() {\n        final ContextMenu menu = new ContextMenu();\n       \n        Menu export = new Menu("Export As");\n        \n        MenuItem pngItem = new MenuItem("PNG...");\n        pngItem.setOnAction((ActionEvent e) -> { handleExportToPNG(); });        \n        export.getItems().add(pngItem);\n        \n        MenuItem jpegItem = new MenuItem("JPEG...");\n        jpegItem.setOnAction((ActionEvent e) -> { handleExportToJPEG(); });        \n        export.getItems().add(jpegItem);\n        \n        if (ExportUtils.isOrsonPDFAvailable()) {\n            MenuItem pdfItem = new MenuItem("PDF...");\n            pdfItem.setOnAction((ActionEvent e) -> {\n                handleExportToPDF();\n            });\n            export.getItems().add(pdfItem);\n        }\n        if (ExportUtils.isJFreeSVGAvailable()) {\n            MenuItem svgItem = new MenuItem("SVG...");\n            svgItem.setOnAction((ActionEvent e) -> {\n                handleExportToSVG();\n            });\n            export.getItems().add(svgItem);        \n        }\n        menu.getItems().add(export);\n        return menu;\n    }
207	public void configure(ContourPlot plot) {\n        double minZ = plot.getDataset().getMinZValue();\n        double maxZ = plot.getDataset().getMaxZValue();\n        setMinimumValue(minZ);\n        setMaximumValue(maxZ);\n    }
208	public static TimeSeries createPointMovingAverage(TimeSeries source,\n            String name, int pointCount) {\n\n        ParamChecks.nullNotPermitted(source, "source");\n        if (pointCount < 2) {\n            throw new IllegalArgumentException("periodCount must be greater " \n                    + "than or equal to 2.");\n        }\n\n        TimeSeries result = new TimeSeries(name);\n        double rollingSumForPeriod = 0.0;\n        for (int i = 0; i < source.getItemCount(); i++) {\n                        TimeSeriesDataItem current = source.getRawDataItem(i);\n            RegularTimePeriod period = current.getPeriod();\n                        rollingSumForPeriod += current.getValue().doubleValue();\n\n            if (i > pointCount - 1) {\n                                TimeSeriesDataItem startOfMovingAvg = source.getRawDataItem(\n                        i - pointCount);\n                rollingSumForPeriod -= startOfMovingAvg.getValue()\n                        .doubleValue();\n                result.add(period, rollingSumForPeriod / pointCount);\n            }\n            else if (i == pointCount - 1) {\n                result.add(period, rollingSumForPeriod / pointCount);\n            }\n        }\n        return result;\n    }
209	public void doSaveAs() throws IOException {\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);\n        FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                    localizationResources.getString("PNG_Image_Files"), "png");\n        fileChooser.addChoosableFileFilter(filter);\n        fileChooser.setFileFilter(filter);\n\n        int option = fileChooser.showSaveDialog(this);\n        if (option == JFileChooser.APPROVE_OPTION) {\n            String filename = fileChooser.getSelectedFile().getPath();\n            if (isEnforceFileExtensions()) {\n                if (!filename.endsWith(".png")) {\n                    filename = filename + ".png";\n                }\n            }\n            ChartUtilities.saveChartAsPNG(new File(filename), this.chart,\n                    getWidth(), getHeight());\n        }\n    }
210	protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        RectangleConstraint c1 = constraint.toUnconstrainedWidth();\n        Size2D size1 = arrange(container, g2, c1);\n\n        if (constraint.getWidthRange().contains(size1.getWidth())) {\n            return size1;\n        }\n        else {\n            double w = constraint.getWidthRange().constrain(size1.getWidth());\n            RectangleConstraint c2 = constraint.toFixedWidth(w);\n            return arrange(container, g2, c2);\n        }\n    }
211	private void shapeToPath(Shape s) {\n        double[] coords = new double[6];\n        this.gc.beginPath();\n        PathIterator iterator = s.getPathIterator(null);\n        while (!iterator.isDone()) {\n            int segType = iterator.currentSegment(coords);\n            switch (segType) {\n                case PathIterator.SEG_MOVETO:\n                    this.gc.moveTo(coords[0], coords[1]);\n                    break;\n                case PathIterator.SEG_LINETO:\n                    this.gc.lineTo(coords[0], coords[1]);\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    this.gc.quadraticCurveTo(coords[0], coords[1], coords[2], \n                            coords[3]);\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    this.gc.bezierCurveTo(coords[0], coords[1], coords[2], \n                            coords[3], coords[4], coords[5]);\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    this.gc.closePath();\n                    break;\n                default:\n                    throw new RuntimeException("Unrecognised segment type " \n                            + segType);\n            }\n            iterator.next();\n        }\n    }
212	public void clearDomainCrosshairs() {\n        if (this.xCrosshairs.isEmpty()) {\n            return;          }\n        List crosshairs = getDomainCrosshairs();\n        for (int i = 0; i < crosshairs.size(); i++) {\n            Crosshair c = (Crosshair) crosshairs.get(i);\n            this.xCrosshairs.remove(c);\n            c.removePropertyChangeListener(this);\n        }\n        fireOverlayChanged();\n    }
213	public Rectangle2D reserved(Rectangle2D area, RectangleEdge edge) {\n        Rectangle2D result = null;\n        if (edge == RectangleEdge.TOP) {\n            result = new Rectangle2D.Double(\n                area.getX(), area.getY(), area.getWidth(), this.top\n            );\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result = new Rectangle2D.Double(\n                area.getX(), area.getMaxY() - this.top,\n                area.getWidth(), this.bottom\n            );\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result = new Rectangle2D.Double(\n                area.getX(), area.getY(), this.left, area.getHeight()\n            );\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result = new Rectangle2D.Double(\n                area.getMaxX() - this.right, area.getY(),\n                this.right, area.getHeight()\n            );\n        }\n        return result;\n    }
214	public void drawTickMarks(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state) {\n\n        Plot p = getPlot();\n        if (p == null) {\n            return;\n        }\n        CategoryPlot plot = (CategoryPlot) p;\n        double il = getTickMarkInsideLength();\n        double ol = getTickMarkOutsideLength();\n        Line2D line = new Line2D.Double();\n        List categories = plot.getCategoriesForAxis(this);\n        g2.setPaint(getTickMarkPaint());\n        g2.setStroke(getTickMarkStroke());\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        if (edge.equals(RectangleEdge.TOP)) {\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                double x = getCategoryMiddle(key, categories, dataArea, edge);\n                line.setLine(x, cursor, x, cursor + il);\n                g2.draw(line);\n                line.setLine(x, cursor, x, cursor - ol);\n                g2.draw(line);\n            }\n            state.cursorUp(ol);\n        } else if (edge.equals(RectangleEdge.BOTTOM)) {\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                double x = getCategoryMiddle(key, categories, dataArea, edge);\n                line.setLine(x, cursor, x, cursor - il);\n                g2.draw(line);\n                line.setLine(x, cursor, x, cursor + ol);\n                g2.draw(line);\n            }\n            state.cursorDown(ol);\n        } else if (edge.equals(RectangleEdge.LEFT)) {\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                double y = getCategoryMiddle(key, categories, dataArea, edge);\n                line.setLine(cursor, y, cursor + il, y);\n                g2.draw(line);\n                line.setLine(cursor, y, cursor - ol, y);\n                g2.draw(line);\n            }\n            state.cursorLeft(ol);\n        } else if (edge.equals(RectangleEdge.RIGHT)) {\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                double y = getCategoryMiddle(key, categories, dataArea, edge);\n                line.setLine(cursor, y, cursor - il, y);\n                g2.draw(line);\n                line.setLine(cursor, y, cursor + ol, y);\n                g2.draw(line);\n            }\n            state.cursorRight(ol);\n        }\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
215	public static JFreeChart createHighLowChart(String title,\n            String timeAxisLabel, String valueAxisLabel, OHLCDataset dataset,\n            Timeline timeline, boolean legend) {\n\n        DateAxis timeAxis = new DateAxis(timeAxisLabel);\n        timeAxis.setTimeline(timeline);\n        NumberAxis valueAxis = new NumberAxis(valueAxisLabel);\n        HighLowRenderer renderer = new HighLowRenderer();\n        renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());\n        XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
216	protected int translateGet(int toFetch) {\n        if (this.oldestAt == 0) {\n            return toFetch;          }\n                int newIndex = toFetch + this.oldestAt;\n        if (newIndex >= this.historyCount) {\n            newIndex -= this.historyCount;\n        }\n        return newIndex;\n    }
217	public static Rectangle2D rectangleByRadius(Rectangle2D rect,\n            double radiusW, double radiusH) {\n        ParamChecks.nullNotPermitted(rect, "rect");\n        double x = rect.getCenterX();\n        double y = rect.getCenterY();\n        double w = rect.getWidth() * radiusW;\n        double h = rect.getHeight() * radiusH;\n        return new Rectangle2D.Double(x - w / 2.0, y - h / 2.0, w, h);\n    }
218	private void drawVerticalAxisTrace(Graphics2D g2, int y) {\n\n        Rectangle2D dataArea = getScreenDataArea();\n\n        g2.setXORMode(Color.orange);\n        if (((int) dataArea.getMinY() < y) && (y < (int) dataArea.getMaxY())) {\n\n            if (this.horizontalTraceLine != null) {\n                g2.draw(this.horizontalTraceLine);\n                this.horizontalTraceLine.setLine((int) dataArea.getMinX(), y,\n                        (int) dataArea.getMaxX(), y);\n            }\n            else {\n                this.horizontalTraceLine = new Line2D.Float(\n                        (int) dataArea.getMinX(), y, (int) dataArea.getMaxX(),\n                        y);\n            }\n            g2.draw(this.horizontalTraceLine);\n        }\n\n                g2.setPaintMode();\n    }
219	public Date rollDate(Date base, TimeZone zone) {\n                                        Calendar calendar = Calendar.getInstance(zone);\n        calendar.setTime(base);\n        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);\n        return calendar.getTime();\n    }
220	protected void drawAxisLine(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge) {\n        Line2D axisLine = null;\n        double x = dataArea.getX();\n        double y = dataArea.getY();\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(x, cursor, dataArea.getMaxX(), cursor);\n        } else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(x, cursor, dataArea.getMaxX(), cursor);\n        } else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, y, cursor, dataArea.getMaxY());\n        } else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, y, cursor, dataArea.getMaxY());\n        }\n        g2.setPaint(this.axisLinePaint);\n        g2.setStroke(this.axisLineStroke);\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        g2.draw(axisLine);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
221	protected void drawMultipleEllipse(Point2D point, double boxWidth,\n                                       double oRadius, Graphics2D g2) {\n\n        Ellipse2D.Double dot1 = new Ellipse2D.Double(point.getX()\n                - (boxWidth / 2) + oRadius, point.getY(), oRadius, oRadius);\n        Ellipse2D.Double dot2 = new Ellipse2D.Double(point.getX()\n                + (boxWidth / 2), point.getY(), oRadius, oRadius);\n        g2.draw(dot1);\n        g2.draw(dot2);\n\n    }
222	public static JFreeChart createBubbleChart(String title, String xAxisLabel,\n            String yAxisLabel, XYZDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n        yAxis.setAutoRangeIncludesZero(false);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\n        XYItemRenderer renderer = new XYBubbleRenderer(\n                XYBubbleRenderer.SCALE_ON_RANGE_AXIS);\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setURLGenerator(new StandardXYZURLGenerator());\n        }\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
223	protected void drawRadarPoly(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Point2D centre,\n                                 PlotRenderingInfo info,\n                                 int series, int catCount,\n                                 double headH, double headW) {\n\n        Polygon polygon = new Polygon();\n\n        EntityCollection entities = null;\n        if (info != null) {\n            entities = info.getOwner().getEntityCollection();\n        }\n\n                for (int cat = 0; cat < catCount; cat++) {\n\n            Number dataValue = getPlotValue(series, cat);\n\n            if (dataValue != null) {\n                double value = dataValue.doubleValue();\n\n                if (value >= 0) { \n                    \n                    double angle = getStartAngle()\n                        + (getDirection().getFactor() * cat * 360 / catCount);\n\n                                                                                                                        \n                                                            \n                    Point2D point = getWebPoint(plotArea, angle,\n                            value / this.maxValue);\n                    polygon.addPoint((int) point.getX(), (int) point.getY());\n\n                    \n                    Paint paint = getSeriesPaint(series);\n                    Paint outlinePaint = getSeriesOutlinePaint(series);\n                    Stroke outlineStroke = getSeriesOutlineStroke(series);\n\n                    Ellipse2D head = new Ellipse2D.Double(point.getX()\n                            - headW / 2, point.getY() - headH / 2, headW,\n                            headH);\n                    g2.setPaint(paint);\n                    g2.fill(head);\n                    g2.setStroke(outlineStroke);\n                    g2.setPaint(outlinePaint);\n                    g2.draw(head);\n\n                    if (entities != null) {\n                        int row, col;\n                        if (this.dataExtractOrder == TableOrder.BY_ROW) {\n                            row = series;\n                            col = cat;\n                        }\n                        else {\n                            row = cat;\n                            col = series;\n                        }\n                        String tip = null;\n                        if (this.toolTipGenerator != null) {\n                            tip = this.toolTipGenerator.generateToolTip(\n                                    this.dataset, row, col);\n                        }\n\n                        String url = null;\n                        if (this.urlGenerator != null) {\n                            url = this.urlGenerator.generateURL(this.dataset,\n                                   row, col);\n                        }\n\n                        Shape area = new Rectangle(\n                                (int) (point.getX() - headW),\n                                (int) (point.getY() - headH),\n                                (int) (headW * 2), (int) (headH * 2));\n                        CategoryItemEntity entity = new CategoryItemEntity(\n                                area, tip, url, this.dataset,\n                                this.dataset.getRowKey(row),\n                                this.dataset.getColumnKey(col));\n                        entities.add(entity);\n                    }\n\n                }\n            }\n        }\n        \n        Paint paint = getSeriesPaint(series);\n        g2.setPaint(paint);\n        g2.setStroke(getSeriesOutlineStroke(series));\n        g2.draw(polygon);\n\n        \n        if (this.webFilled) {\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                    0.1f));\n            g2.fill(polygon);\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                    getForegroundAlpha()));\n        }\n    }
224	public void add(double space, RectangleEdge edge) {\n        ParamChecks.nullNotPermitted(edge, "edge");\n        if (edge == RectangleEdge.TOP) {\n            this.top += space;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.bottom += space;\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.left += space;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.right += space;\n        }\n        else {\n            throw new IllegalStateException("Unrecognised 'edge' argument.");\n        }\n    }
225	protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        Size2D s = arrangeNF(container, g2, constraint);\n        if (constraint.getWidthRange().contains(s.width)) {\n            return s;\n        }\n        else {\n            RectangleConstraint c = constraint.toFixedWidth(\n                constraint.getWidthRange().constrain(s.getWidth())\n            );\n            return arrangeFF(container, g2, c);\n        }\n    }
226	public static JFreeChart createBarChart3D(String title,\n            String categoryAxisLabel, String valueAxisLabel,\n            CategoryDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);\n\n        BarRenderer3D renderer = new BarRenderer3D();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseItemURLGenerator(\n                    new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,\n                renderer);\n        plot.setOrientation(orientation);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n                                    plot.setRowRenderingOrder(SortOrder.DESCENDING);\n            plot.setColumnRenderingOrder(SortOrder.DESCENDING);\n        }\n        plot.setForegroundAlpha(0.75f);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
227	protected AxisState drawTickLabels(int band, Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n                double delta1 = 0.0;\n        FontMetrics fm = g2.getFontMetrics(this.labelInfo[band].getLabelFont());\n        if (edge == RectangleEdge.BOTTOM) {\n            delta1 = this.labelInfo[band].getPadding().calculateTopOutset(\n                    fm.getHeight());\n        }\n        else if (edge == RectangleEdge.TOP) {\n            delta1 = this.labelInfo[band].getPadding().calculateBottomOutset(\n                    fm.getHeight());\n        }\n        state.moveCursor(delta1, edge);\n        long axisMin = this.first.getFirstMillisecond();\n        long axisMax = this.last.getLastMillisecond();\n        g2.setFont(this.labelInfo[band].getLabelFont());\n        g2.setPaint(this.labelInfo[band].getLabelPaint());\n\n                RegularTimePeriod p1 = this.labelInfo[band].createInstance(\n                new Date(axisMin), this.timeZone, this.locale);\n        RegularTimePeriod p2 = this.labelInfo[band].createInstance(\n                new Date(axisMax), this.timeZone, this.locale);\n        DateFormat df = this.labelInfo[band].getDateFormat();\n        df.setTimeZone(this.timeZone);\n        String label1 = df.format(new Date(p1.getMiddleMillisecond()));\n        String label2 = df.format(new Date(p2.getMiddleMillisecond()));\n        Rectangle2D b1 = TextUtilities.getTextBounds(label1, g2,\n                g2.getFontMetrics());\n        Rectangle2D b2 = TextUtilities.getTextBounds(label2, g2,\n                g2.getFontMetrics());\n        double w = Math.max(b1.getWidth(), b2.getWidth());\n        long ww = Math.round(java2DToValue(dataArea.getX() + w + 5.0,\n                dataArea, edge));\n        if (isInverted()) {\n            ww = axisMax - ww;\n        }\n        else {\n            ww = ww - axisMin;\n        }\n        long length = p1.getLastMillisecond()\n                      - p1.getFirstMillisecond();\n        int periods = (int) (ww / length) + 1;\n\n        RegularTimePeriod p = this.labelInfo[band].createInstance(\n                new Date(axisMin), this.timeZone, this.locale);\n        Rectangle2D b = null;\n        long lastXX = 0L;\n        float y = (float) (state.getCursor());\n        TextAnchor anchor = TextAnchor.TOP_CENTER;\n        float yDelta = (float) b1.getHeight();\n        if (edge == RectangleEdge.TOP) {\n            anchor = TextAnchor.BOTTOM_CENTER;\n            yDelta = -yDelta;\n        }\n        while (p.getFirstMillisecond() <= axisMax) {\n            float x = (float) valueToJava2D(p.getMiddleMillisecond(), dataArea,\n                    edge);\n            String label = df.format(new Date(p.getMiddleMillisecond()));\n            long first = p.getFirstMillisecond();\n            long last = p.getLastMillisecond();\n            if (last > axisMax) {\n                                                Rectangle2D bb = TextUtilities.getTextBounds(label, g2,\n                        g2.getFontMetrics());\n                if ((x + bb.getWidth() / 2) > dataArea.getMaxX()) {\n                    float xstart = (float) valueToJava2D(Math.max(first,\n                            axisMin), dataArea, edge);\n                    if (bb.getWidth() < (dataArea.getMaxX() - xstart)) {\n                        x = ((float) dataArea.getMaxX() + xstart) / 2.0f;\n                    }\n                    else {\n                        label = null;\n                    }\n                }\n            }\n            if (first < axisMin) {\n                                                Rectangle2D bb = TextUtilities.getTextBounds(label, g2,\n                        g2.getFontMetrics());\n                if ((x - bb.getWidth() / 2) < dataArea.getX()) {\n                    float xlast = (float) valueToJava2D(Math.min(last,\n                            axisMax), dataArea, edge);\n                    if (bb.getWidth() < (xlast - dataArea.getX())) {\n                        x = (xlast + (float) dataArea.getX()) / 2.0f;\n                    }\n                    else {\n                        label = null;\n                    }\n                }\n\n            }\n            if (label != null) {\n                g2.setPaint(this.labelInfo[band].getLabelPaint());\n                b = TextUtilities.drawAlignedString(label, g2, x, y, anchor);\n            }\n            if (lastXX > 0L) {\n                if (this.labelInfo[band].getDrawDividers()) {\n                    long nextXX = p.getFirstMillisecond();\n                    long mid = (lastXX + nextXX) / 2;\n                    float mid2d = (float) valueToJava2D(mid, dataArea, edge);\n                    g2.setStroke(this.labelInfo[band].getDividerStroke());\n                    g2.setPaint(this.labelInfo[band].getDividerPaint());\n                    g2.draw(new Line2D.Float(mid2d, y, mid2d, y + yDelta));\n                }\n            }\n            lastXX = last;\n            for (int i = 0; i < periods; i++) {\n                p = p.next();\n            }\n            p.peg(this.calendar);\n        }\n        double used = 0.0;\n        if (b != null) {\n            used = b.getHeight();\n                        if (edge == RectangleEdge.BOTTOM) {\n                used += this.labelInfo[band].getPadding().calculateBottomOutset(\n                        fm.getHeight());\n            }\n            else if (edge == RectangleEdge.TOP) {\n                used += this.labelInfo[band].getPadding().calculateTopOutset(\n                        fm.getHeight());\n            }\n        }\n        state.moveCursor(used, edge);\n        return state;\n    }
228	private static float[] deriveRotationAnchorOffsets(Graphics2D g2, \n            AttributedString text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        \n        TextLayout layout = new TextLayout(text.getIterator(), \n                g2.getFontRenderContext());\n        Rectangle2D bounds = layout.getBounds();\n        float ascent = layout.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = layout.getDescent();\n        float leading = layout.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (isHorizontalLeft(anchor)) {\n            xAdj = 0.0f;\n        }\n        else if (isHorizontalCenter(anchor)) {\n            xAdj = (float) bounds.getWidth() / 2.0f;\n        }\n        else if (isHorizontalRight(anchor)) {\n            xAdj = (float) bounds.getWidth();\n        }\n\n        if (isTop(anchor)) {\n            yAdj = descent + leading - (float) bounds.getHeight();\n        }\n        else if (isHalfHeight(anchor)) {\n            yAdj = descent + leading - (float) (bounds.getHeight() / 2.0);\n        }\n        else if (isHalfAscent(anchor)) {\n            yAdj = -halfAscent;\n        }\n        else if (isBaseline(anchor)) {\n            yAdj = 0.0f;\n        }\n        else if (isBottom(anchor)) {\n            yAdj = descent + leading;\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }
229	public void removeRow(Comparable rowKey) {\n        ParamChecks.nullNotPermitted(rowKey, "rowKey");\n        int index = getRowIndex(rowKey);\n        if (index >= 0) {\n            removeRow(index);\n        }\n        else {\n            throw new UnknownKeyException("Unknown key: " + rowKey);\n        }\n    }
230	public static JFreeChart createWaferMapChart(String title,\n            WaferMapDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        WaferMapPlot plot = new WaferMapPlot(dataset);\n        WaferMapRenderer renderer = new WaferMapRenderer();\n        plot.setRenderer(renderer);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n    }
231	public void removeSeries(TimeSeries series) {\n        ParamChecks.nullNotPermitted(series, "series");\n        this.data.remove(series);\n        series.removeChangeListener(this);\n        series.removeVetoableChangeListener(this);\n        fireDatasetChanged();\n    }
232	public void clearRangeMarkers(int index) {\n        Integer key = new Integer(index);\n        if (this.backgroundRangeMarkers != null) {\n            Collection markers\n                = (Collection) this.backgroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Collection markers\n                = (Collection) this.foregroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        fireChangeEvent();\n    }
233	public void validateTickUnit() {\n        double newTickUnit;\n        try {\n            newTickUnit = Double.parseDouble(this.manualTickUnit.getText());\n        }\n        catch (NumberFormatException e) {\n            newTickUnit = this.manualTickUnitValue;\n        }\n\n        if (newTickUnit > 0.0) {\n            this.manualTickUnitValue = newTickUnit;\n        }\n        this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));\n    }
234	protected void drawTask(Graphics2D g2,\n                            CategoryItemRendererState state,\n                            Rectangle2D dataArea,\n                            CategoryPlot plot,\n                            CategoryAxis domainAxis,\n                            ValueAxis rangeAxis,\n                            GanttCategoryDataset dataset,\n                            int row,\n                            int column) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge();\n\n                Number value0 = dataset.getEndValue(row, column);\n        if (value0 == null) {\n            return;\n        }\n        double java2dValue0 = rangeAxis.valueToJava2D(value0.doubleValue(),\n                dataArea, rangeAxisLocation);\n\n                Number value1 = dataset.getStartValue(row, column);\n        if (value1 == null) {\n            return;\n        }\n        double java2dValue1 = rangeAxis.valueToJava2D(value1.doubleValue(),\n                dataArea, rangeAxisLocation);\n\n        if (java2dValue1 < java2dValue0) {\n            double temp = java2dValue1;\n            java2dValue1 = java2dValue0;\n            java2dValue0 = temp;\n            value1 = value0;\n        }\n\n        double rectStart = calculateBarW0(plot, orientation, dataArea,\n                domainAxis, state, row, column);\n        double rectBreadth = state.getBarWidth();\n        double rectLength = Math.abs(java2dValue1 - java2dValue0);\n\n        Rectangle2D bar = null;\n        RectangleEdge barBase = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            bar = new Rectangle2D.Double(java2dValue0, rectStart, rectLength,\n                    rectBreadth);\n            barBase = RectangleEdge.LEFT;\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            bar = new Rectangle2D.Double(rectStart, java2dValue1, rectBreadth,\n                    rectLength);\n            barBase = RectangleEdge.BOTTOM;\n        }\n\n        Rectangle2D completeBar = null;\n        Rectangle2D incompleteBar = null;\n        Number percent = dataset.getPercentComplete(row, column);\n        double start = getStartPercent();\n        double end = getEndPercent();\n        if (percent != null) {\n            double p = percent.doubleValue();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                completeBar = new Rectangle2D.Double(java2dValue0,\n                        rectStart + start * rectBreadth, rectLength * p,\n                        rectBreadth * (end - start));\n                incompleteBar = new Rectangle2D.Double(java2dValue0\n                        + rectLength * p, rectStart + start * rectBreadth,\n                        rectLength * (1 - p), rectBreadth * (end - start));\n            }\n            else if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                completeBar = new Rectangle2D.Double(rectStart + start\n                        * rectBreadth, java2dValue1 + rectLength * (1 - p),\n                        rectBreadth * (end - start), rectLength * p);\n                incompleteBar = new Rectangle2D.Double(rectStart + start\n                        * rectBreadth, java2dValue1, rectBreadth * (end\n                        - start), rectLength * (1 - p));\n            }\n\n        }\n\n        if (getShadowsVisible()) {\n            getBarPainter().paintBarShadow(g2, this, row, column, bar,\n                    barBase, true);\n        }\n        getBarPainter().paintBar(g2, this, row, column, bar, barBase);\n\n        if (completeBar != null) {\n            g2.setPaint(getCompletePaint());\n            g2.fill(completeBar);\n        }\n        if (incompleteBar != null) {\n            g2.setPaint(getIncompletePaint());\n            g2.fill(incompleteBar);\n        }\n\n                if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    false);\n        }\n\n                int datasetIndex = plot.indexOf(dataset);\n        Comparable columnKey = dataset.getColumnKey(column);\n        Comparable rowKey = dataset.getRowKey(row);\n        double xx = domainAxis.getCategorySeriesMiddle(columnKey, rowKey,\n                dataset, getItemMargin(), dataArea, plot.getDomainAxisEdge());\n        updateCrosshairValues(state.getCrosshairState(),\n                dataset.getRowKey(row), dataset.getColumnKey(column),\n                value1.doubleValue(), datasetIndex, xx, java2dValue1,\n                orientation);\n\n                EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }
235	public long getTime(Date date) {\n        long result = date.getTime();\n        if (this.adjustForDaylightSaving) {\n            this.workingCalendar.setTime(date);\n            this.workingCalendarNoDST.set(\n                    this.workingCalendar.get(Calendar.YEAR),\n                    this.workingCalendar.get(Calendar.MONTH),\n                    this.workingCalendar.get(Calendar.DATE),\n                    this.workingCalendar.get(Calendar.HOUR_OF_DAY),\n                    this.workingCalendar.get(Calendar.MINUTE),\n                    this.workingCalendar.get(Calendar.SECOND));\n            this.workingCalendarNoDST.set(Calendar.MILLISECOND,\n                    this.workingCalendar.get(Calendar.MILLISECOND));\n            Date revisedDate = this.workingCalendarNoDST.getTime();\n            result = revisedDate.getTime();\n        }\n\n        return result;\n    }
236	protected List buildRadialTicks(List allTicks)\n    {\n        List ticks = new ArrayList();\n        Iterator it = allTicks.iterator();\n        while (it.hasNext()) {\n            ValueTick tick = (ValueTick) it.next();\n            if (isRadiusMinorGridlinesVisible() ||\n                    TickType.MAJOR.equals(tick.getTickType())) {\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n    }
237	protected List refreshAngleTicks() {\n        List ticks = new ArrayList();\n        for (double currentTickVal = 0.0; currentTickVal < 360.0;\n                currentTickVal += this.angleTickUnit.getSize()) {\n\n            TextAnchor ta = calculateTextAnchor(currentTickVal);\n            NumberTick tick = new NumberTick(new Double(currentTickVal),\n                this.angleTickUnit.valueToString(currentTickVal),\n                ta, TextAnchor.CENTER, 0.0);\n            ticks.add(tick);\n        }\n        return ticks;\n    }
238	public static double calculateMean(Collection values,\n            boolean includeNullAndNaN) {\n\n        ParamChecks.nullNotPermitted(values, "values");\n        int count = 0;\n        double total = 0.0;\n        Iterator iterator = values.iterator();\n        while (iterator.hasNext()) {\n            Object object = iterator.next();\n            if (object == null) {\n                if (includeNullAndNaN) {\n                    return Double.NaN;\n                }\n            }\n            else {\n                if (object instanceof Number) {\n                    Number number = (Number) object;\n                    double value = number.doubleValue();\n                    if (Double.isNaN(value)) {\n                        if (includeNullAndNaN) {\n                            return Double.NaN;\n                        }\n                    }\n                    else {\n                        total = total + number.doubleValue();\n                        count = count + 1;\n                    }\n                }\n            }\n        }\n        return total / count;\n    }
239	public void remove(XYPlot subplot) {\n        ParamChecks.nullNotPermitted(subplot, "subplot");\n        int position = -1;\n        int size = this.subplots.size();\n        int i = 0;\n        while (position == -1 && i < size) {\n            if (this.subplots.get(i) == subplot) {\n                position = i;\n            }\n            i++;\n        }\n        if (position != -1) {\n            this.subplots.remove(position);\n            subplot.setParent(null);\n            subplot.removeChangeListener(this);\n            ValueAxis domain = getDomainAxis();\n            if (domain != null) {\n                domain.configure();\n            }\n            fireChangeEvent();\n        }\n    }
240	public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n                                    double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n                                    double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n                        box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n                        g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n                        g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n                if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                                                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n                if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n                double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n                double oRadius = state.getBarWidth() / 3;            List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n                                List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n                                    for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n                        if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n                if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }
241	public static double calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort) {\n\n        double result = Double.NaN;\n        if (copyAndSort) {\n            List working = new ArrayList(end - start + 1);\n            for (int i = start; i <= end; i++) {\n                working.add(values.get(i));\n            }\n            Collections.sort(working);\n            result = calculateMedian(working, false);\n        }\n        else {\n            int count = end - start + 1;\n            if (count > 0) {\n                if (count % 2 == 1) {\n                    if (count > 1) {\n                        Number value\n                            = (Number) values.get(start + (count - 1) / 2);\n                        result = value.doubleValue();\n                    }\n                    else {\n                        Number value = (Number) values.get(start);\n                        result = value.doubleValue();\n                    }\n                }\n                else {\n                    Number value1 = (Number) values.get(start + count / 2 - 1);\n                    Number value2 = (Number) values.get(start + count / 2);\n                    result\n                        = (value1.doubleValue() + value2.doubleValue()) / 2.0;\n                }\n            }\n        }\n        return result;\n\n    }
242	public void clearDomainMarkers() {\n        if (this.backgroundDomainMarkers != null) {\n            Set keys = this.backgroundDomainMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearDomainMarkers(key.intValue());\n            }\n            this.backgroundDomainMarkers.clear();\n        }\n        if (this.foregroundDomainMarkers != null) {\n            Set keys = this.foregroundDomainMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearDomainMarkers(key.intValue());\n            }\n            this.foregroundDomainMarkers.clear();\n        }\n        fireChangeEvent();\n    }
243	protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double maxW = 0.0;\n        double maxH = 0.0;\n        List blocks = container.getBlocks();\n        Iterator iterator = blocks.iterator();\n        while (iterator.hasNext()) {\n            Block b = (Block) iterator.next();\n            if (b != null) {\n                Size2D s = b.arrange(g2, RectangleConstraint.NONE);\n                maxW = Math.max(maxW, s.width);\n                maxH = Math.max(maxH, s.height);\n            }\n        }\n        double width = this.columns * maxW;\n        double height = this.rows * maxH;\n        RectangleConstraint c = new RectangleConstraint(width, height);\n        return arrangeFF(container, g2, c);\n    }
244	public Range findValueRange(Range xRange, TimePeriodAnchor xAnchor, \n            TimeZone zone) {\n        ParamChecks.nullNotPermitted(xRange, "xRange");\n        ParamChecks.nullNotPermitted(xAnchor, "xAnchor");\n        ParamChecks.nullNotPermitted(zone, "zone");\n        if (this.data.isEmpty()) {\n            return null;\n        }\n        Calendar calendar = Calendar.getInstance(zone);\n                        double lowY = Double.POSITIVE_INFINITY;\n        double highY = Double.NEGATIVE_INFINITY;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n            long millis = item.getPeriod().getMillisecond(xAnchor, calendar);\n            if (xRange.contains(millis)) {\n                Number n = item.getValue();\n                if (n != null) {\n                    double v = n.doubleValue();\n                    lowY = Math.min(lowY, v);\n                    highY = Math.max(highY, v);\n                }\n            }\n        }\n        if (Double.isInfinite(lowY) && Double.isInfinite(highY)) {\n            if (lowY < highY) {\n                return new Range(lowY, highY);\n            } else {\n                return new Range(Double.NaN, Double.NaN);\n            }\n        }\n        return new Range(lowY, highY);\n    }
245	public void setObject(Object object, Comparable rowKey,\n            Comparable columnKey) {\n        ParamChecks.nullNotPermitted(rowKey, "rowKey");\n        ParamChecks.nullNotPermitted(columnKey, "columnKey");\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }
246	public void mapKeyToGroup(Comparable key, Comparable group) {\n        ParamChecks.nullNotPermitted(key, "key");\n        Comparable currentGroup = getGroup(key);\n        if (!currentGroup.equals(this.defaultGroup)) {\n            if (!currentGroup.equals(group)) {\n                int count = getKeyCount(currentGroup);\n                if (count == 1) {\n                    this.groups.remove(currentGroup);\n                }\n            }\n        }\n        if (group == null) {\n            this.keyToGroupMap.remove(key);\n        }\n        else {\n            if (!this.groups.contains(group)) {\n                if (!this.defaultGroup.equals(group)) {\n                    this.groups.add(group);\n                }\n            }\n            this.keyToGroupMap.put(key, group);\n        }\n    }
247	protected void drawLine(Graphics2D g2, State state,\n            PlotOrientation orientation, double x0, double y0, double x1,\n            double y1) {\n\n        if (orientation == PlotOrientation.VERTICAL) {\n            state.line.setLine(x0, y0, x1, y1);\n            g2.draw(state.line);\n        }\n        else if (orientation == PlotOrientation.HORIZONTAL) {\n            state.line.setLine(y0, x0, y1, x1);             g2.draw(state.line);\n        }\n\n    }
248	public static double getCorrelation(Number[] data1, Number[] data2) {\n        ParamChecks.nullNotPermitted(data1, "data1");\n        ParamChecks.nullNotPermitted(data2, "data2");\n        if (data1.length != data2.length) {\n            throw new IllegalArgumentException(\n                "'data1' and 'data2' arrays must have same length."\n            );\n        }\n        int n = data1.length;\n        double sumX = 0.0;\n        double sumY = 0.0;\n        double sumX2 = 0.0;\n        double sumY2 = 0.0;\n        double sumXY = 0.0;\n        for (int i = 0; i < n; i++) {\n            double x = 0.0;\n            if (data1[i] != null) {\n                x = data1[i].doubleValue();\n            }\n            double y = 0.0;\n            if (data2[i] != null) {\n                y = data2[i].doubleValue();\n            }\n            sumX = sumX + x;\n            sumY = sumY + y;\n            sumXY = sumXY + (x * y);\n            sumX2 = sumX2 + (x * x);\n            sumY2 = sumY2 + (y * y);\n        }\n        return (n * sumXY - sumX * sumY) / Math.pow((n * sumX2 - sumX * sumX)\n                * (n * sumY2 - sumY * sumY), 0.5);\n    }
249	protected double trimToContentWidth(double fixedWidth) {\n        double result = this.margin.trimWidth(fixedWidth);\n        result = this.frame.getInsets().trimWidth(result);\n        result = this.padding.trimWidth(result);\n        return Math.max(result, 0.0);\n    }
250	protected Size2D arrangeRR(BlockContainer container,\n                               Range widthRange, Range heightRange,\n                               Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(widthRange,\n                    heightRange);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Range heightRange2 = Range.shift(heightRange, -h[0], false);\n            RectangleConstraint c2 = new RectangleConstraint(widthRange,\n                    heightRange2);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(widthRange,\n                    heightRange3);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        Range widthRange2 = Range.shift(widthRange, -w[2], false);\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(widthRange2,\n                    heightRange3);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(widthRange3,\n                    heightRange3);\n            Size2D size = this.centerBlock.arrange(g2, c5);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], h[3]));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], height - h[0] - h[1]));\n        }\n        return new Size2D(width, height);\n    }
251	protected void fillArc(Graphics2D g2, Rectangle2D area,\n            double minValue, double maxValue, Paint paint, boolean dial) {\n\n        ParamChecks.nullNotPermitted(paint, "paint");\n        double startAngle = valueToAngle(maxValue);\n        double endAngle = valueToAngle(minValue);\n        double extent = endAngle - startAngle;\n\n        double x = area.getX();\n        double y = area.getY();\n        double w = area.getWidth();\n        double h = area.getHeight();\n        int joinType = Arc2D.OPEN;\n        if (this.shape == DialShape.PIE) {\n            joinType = Arc2D.PIE;\n        }\n        else if (this.shape == DialShape.CHORD) {\n            if (dial && this.meterAngle > 180) {\n                joinType = Arc2D.CHORD;\n            }\n            else {\n                joinType = Arc2D.PIE;\n            }\n        }\n        else if (this.shape == DialShape.CIRCLE) {\n            joinType = Arc2D.PIE;\n            if (dial) {\n                extent = 360;\n            }\n        }\n        else {\n            throw new IllegalStateException("DialShape not recognised.");\n        }\n\n        g2.setPaint(paint);\n        Arc2D.Double arc = new Arc2D.Double(x, y, w, h, startAngle, extent,\n                joinType);\n        g2.fill(arc);\n    }
252	private void drawStringInRect(Graphics2D g2, Rectangle2D bounds, Font font,\n                                  String text) {\n\n        g2.setFont(font);\n        FontMetrics fm = g2.getFontMetrics(font);\n        Rectangle2D r = TextUtilities.getTextBounds(text, g2, fm);\n        double x = bounds.getX();\n        if (r.getWidth() < bounds.getWidth()) {\n            x = x + (bounds.getWidth() - r.getWidth()) / 2;\n        }\n        LineMetrics metrics = font.getLineMetrics(\n            text, g2.getFontRenderContext()\n        );\n        g2.drawString(\n            text, (float) x, (float) (bounds.getMaxY()\n                - this.bottomInnerGap - metrics.getDescent())\n        );\n    }
253	public static Hour parseHour(String s) {\n        Hour result = null;\n        s = s.trim();\n\n        String daystr = s.substring(0, Math.min(10, s.length()));\n        Day day = Day.parseDay(daystr);\n        if (day != null) {\n            String hourstr = s.substring(\n                Math.min(daystr.length() + 1, s.length()), s.length()\n            );\n            hourstr = hourstr.trim();\n            int hour = Integer.parseInt(hourstr);\n                        if ((hour >= FIRST_HOUR_IN_DAY) && (hour <= LAST_HOUR_IN_DAY)) {\n                result = new Hour(hour, day);\n            }\n        }\n\n        return result;\n    }
254	public static int[] findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n                                int i0 = findLiveItemsLowerBound(dataset, series, xLow, xHigh);\n        int i1 = findLiveItemsUpperBound(dataset, series, xLow, xHigh);\n        if (i0 > i1) {\n            i0 = i1;\n        }\n        return new int[] {i0, i1};\n    }
255	protected void addItemEntity(EntityCollection entities,\n            CategoryDataset dataset, int row, int column, Shape hotspot) {\n        ParamChecks.nullNotPermitted(hotspot, "hotspot");\n        if (!getItemCreateEntity(row, column)) {\n            return;\n        }\n        String tip = null;\n        CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);\n        if (tipster != null) {\n            tip = tipster.generateToolTip(dataset, row, column);\n        }\n        String url = null;\n        CategoryURLGenerator urlster = getItemURLGenerator(row, column);\n        if (urlster != null) {\n            url = urlster.generateURL(dataset, row, column);\n        }\n        CategoryItemEntity entity = new CategoryItemEntity(hotspot, tip, url,\n                dataset, dataset.getRowKey(row), dataset.getColumnKey(column));\n        entities.add(entity);\n    }
256	protected void drawWaferEdge(Graphics2D g2, Rectangle2D plotArea) {\n                Ellipse2D waferEdge = getWaferEdge(plotArea);\n        g2.setColor(Color.black);\n        g2.draw(waferEdge);\n                                Arc2D notch;\n        Rectangle2D waferFrame = waferEdge.getFrame();\n        double notchDiameter = waferFrame.getWidth() * 0.04;\n        if (this.orientation == PlotOrientation.HORIZONTAL) {\n            Rectangle2D notchFrame =\n                new Rectangle2D.Double(\n                    waferFrame.getX() + waferFrame.getWidth()\n                    - (notchDiameter / 2), waferFrame.getY()\n                    + (waferFrame.getHeight() / 2) - (notchDiameter / 2),\n                    notchDiameter, notchDiameter\n                );\n            notch = new Arc2D.Double(notchFrame, 90d, 180d, Arc2D.OPEN);\n        }\n        else {\n            Rectangle2D notchFrame =\n                new Rectangle2D.Double(\n                    waferFrame.getX() + (waferFrame.getWidth() / 2)\n                    - (notchDiameter / 2), waferFrame.getY()\n                    + waferFrame.getHeight() - (notchDiameter / 2),\n                    notchDiameter, notchDiameter\n                );\n            notch = new Arc2D.Double(notchFrame, 0d, 180d, Arc2D.OPEN);\n        }\n        g2.setColor(Color.white);\n        g2.fill(notch);\n        g2.setColor(Color.black);\n        g2.draw(notch);\n\n    }
257	protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) {\n        if (!isRangeZeroBaselineVisible()) {\n            return;\n        }\n        CategoryItemRenderer r = getRenderer();\n        if (r instanceof AbstractCategoryItemRenderer) {\n            AbstractCategoryItemRenderer aci = (AbstractCategoryItemRenderer) r;\n            aci.drawRangeLine(g2, this, getRangeAxis(), area, 0.0,\n                    this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);\n        }\n        else {\n            r.drawRangeGridline(g2, this, getRangeAxis(), area, 0.0);\n        }\n    }
258	public void moveCursor(double units, RectangleEdge edge) {\n        if (edge == RectangleEdge.TOP) {\n            cursorUp(units);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            cursorDown(units);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            cursorLeft(units);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            cursorRight(units);\n        }\n    }
259	public static JFreeChart createAreaChart(String title,\n            String categoryAxisLabel, String valueAxisLabel,\n            CategoryDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        categoryAxis.setCategoryMargin(0.0);\n\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        AreaRenderer renderer = new AreaRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseItemURLGenerator(\n                    new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,\n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
260	protected void drawTick(Graphics2D g2, Rectangle2D meterArea,\n                            double value, boolean label) {\n\n        double valueAngle = valueToAngle(value);\n\n        double meterMiddleX = meterArea.getCenterX();\n        double meterMiddleY = meterArea.getCenterY();\n\n        g2.setPaint(this.tickPaint);\n        g2.setStroke(new BasicStroke(2.0f));\n\n        double valueP2X;\n        double valueP2Y;\n\n        double radius = (meterArea.getWidth() / 2) + DEFAULT_BORDER_SIZE;\n        double radius1 = radius - 15;\n\n        double valueP1X = meterMiddleX\n                + (radius * Math.cos(Math.PI * (valueAngle / 180)));\n        double valueP1Y = meterMiddleY\n                - (radius * Math.sin(Math.PI * (valueAngle / 180)));\n\n        valueP2X = meterMiddleX\n                + (radius1 * Math.cos(Math.PI * (valueAngle / 180)));\n        valueP2Y = meterMiddleY\n                - (radius1 * Math.sin(Math.PI * (valueAngle / 180)));\n\n        Line2D.Double line = new Line2D.Double(valueP1X, valueP1Y, valueP2X,\n                valueP2Y);\n        g2.draw(line);\n\n        if (this.tickLabelsVisible && label) {\n\n            String tickLabel =  this.tickLabelFormat.format(value);\n            g2.setFont(this.tickLabelFont);\n            g2.setPaint(this.tickLabelPaint);\n\n            FontMetrics fm = g2.getFontMetrics();\n            Rectangle2D tickLabelBounds\n                = TextUtilities.getTextBounds(tickLabel, g2, fm);\n\n            double x = valueP2X;\n            double y = valueP2Y;\n            if (valueAngle == 90 || valueAngle == 270) {\n                x = x - tickLabelBounds.getWidth() / 2;\n            }\n            else if (valueAngle < 90 || valueAngle > 270) {\n                x = x - tickLabelBounds.getWidth();\n            }\n            if ((valueAngle > 135 && valueAngle < 225)\n                    || valueAngle > 315 || valueAngle < 45) {\n                y = y - tickLabelBounds.getHeight() / 2;\n            }\n            else {\n                y = y + tickLabelBounds.getHeight() / 2;\n            }\n            g2.drawString(tickLabel, (float) x, (float) y);\n        }\n    }
261	protected void drawLabel(Graphics2D g2, Rectangle2D plotArea, double value,\n                             int cat, double startAngle, double extent) {\n        FontRenderContext frc = g2.getFontRenderContext();\n\n        String label;\n        if (this.dataExtractOrder == TableOrder.BY_ROW) {\n                        label = this.labelGenerator.generateColumnLabel(this.dataset, cat);\n        }\n        else {\n                        label = this.labelGenerator.generateRowLabel(this.dataset, cat);\n        }\n\n        Rectangle2D labelBounds = getLabelFont().getStringBounds(label, frc);\n        LineMetrics lm = getLabelFont().getLineMetrics(label, frc);\n        double ascent = lm.getAscent();\n\n        Point2D labelLocation = calculateLabelLocation(labelBounds, ascent,\n                plotArea, startAngle);\n\n        Composite saveComposite = g2.getComposite();\n\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                1.0f));\n        g2.setPaint(getLabelPaint());\n        g2.setFont(getLabelFont());\n        g2.drawString(label, (float) labelLocation.getX(),\n                (float) labelLocation.getY());\n        g2.setComposite(saveComposite);\n    }
262	protected void drawGridBandsVertical(Graphics2D g2, Rectangle2D plotArea,\n            Rectangle2D dataArea, boolean firstGridBandIsDark, \n            List ticks) {\n\n        boolean currentGridBandIsDark = firstGridBandIsDark;\n        double xx = dataArea.getX();\n        double yy1, yy2;\n\n                double outlineStrokeWidth = 1.0;\n        Stroke outlineStroke = getPlot().getOutlineStroke();\n        if (outlineStroke != null && outlineStroke instanceof BasicStroke) {\n            outlineStrokeWidth = ((BasicStroke) outlineStroke).getLineWidth();\n        }\n\n        Iterator iterator = ticks.iterator();\n        ValueTick tick;\n        Rectangle2D band;\n        while (iterator.hasNext()) {\n            tick = (ValueTick) iterator.next();\n            yy1 = valueToJava2D(tick.getValue() + 0.5d, dataArea,\n                    RectangleEdge.LEFT);\n            yy2 = valueToJava2D(tick.getValue() - 0.5d, dataArea,\n                    RectangleEdge.LEFT);\n            if (currentGridBandIsDark) {\n                g2.setPaint(this.gridBandPaint);\n            }\n            else {\n                g2.setPaint(this.gridBandAlternatePaint);\n            }\n            band = new Rectangle2D.Double(xx + outlineStrokeWidth, \n                    Math.min(yy1, yy2), dataArea.getMaxX() - xx \n                    - outlineStrokeWidth, Math.abs(yy2 - yy1));\n            g2.fill(band);\n            currentGridBandIsDark = !currentGridBandIsDark;\n        }\n    }
263	public static JFreeChart createGanttChart(String title,\n            String categoryAxisLabel, String dateAxisLabel,\n            IntervalCategoryDataset dataset, boolean legend, boolean tooltips,\n            boolean urls) {\n\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        DateAxis dateAxis = new DateAxis(dateAxisLabel);\n\n        CategoryItemRenderer renderer = new GanttRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new IntervalCategoryToolTipGenerator(\n                    "{3} - {4}", DateFormat.getDateInstance()));\n        }\n        if (urls) {\n            renderer.setBaseItemURLGenerator(\n                    new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, dateAxis,\n                renderer);\n        plot.setOrientation(PlotOrientation.HORIZONTAL);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
264	public static RectangleEdge resolveDomainAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n\n        ParamChecks.nullNotPermitted(location, "location");\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n\n        RectangleEdge result = null;\n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n                if (result == null) {\n            throw new IllegalStateException("resolveDomainAxisLocation()");\n        }\n        return result;\n\n    }
265	public AxisSpace reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea,\n                                  Rectangle2D dataArea, RectangleEdge edge,\n                                  AxisSpace space) {\n\n        AxisSpace result = this.axis.reserveSpace(g2, plot, plotArea, edge,\n                space);\n        double thickness = calculateBarThickness(dataArea, edge);\n        result.add(thickness + 2 * this.outerGap, edge);\n        return result;\n\n    }
266	private double mapValueToFixedRange(double value) {\n        double lower = this.fixedRange.getLowerBound();\n        double length = this.fixedRange.getLength();\n        if (value < lower) {\n            return lower + length + ((value - lower) % length);\n        }\n        else {\n            return lower + ((value - lower) % length);\n        }\n    }
267	public static JFreeChart createHistogram(String title,\n            String xAxisLabel, String yAxisLabel, IntervalXYDataset dataset,\n            PlotOrientation orientation, boolean legend, boolean tooltips,\n            boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        ValueAxis yAxis = new NumberAxis(yAxisLabel);\n\n        XYItemRenderer renderer = new XYBarRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setURLGenerator(new StandardXYURLGenerator());\n        }\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);\n        plot.setOrientation(orientation);\n        plot.setDomainZeroBaselineVisible(true);\n        plot.setRangeZeroBaselineVisible(true);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
268	public void drawColorBar(Graphics2D g2, Rectangle2D colorBarArea,\n                             RectangleEdge edge) {\n\n        Object antiAlias = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                            RenderingHints.VALUE_ANTIALIAS_OFF);\n\n                \n        Stroke strokeSaved = g2.getStroke();\n        g2.setStroke(new BasicStroke(1.0f));\n\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            double y1 = colorBarArea.getY();\n            double y2 = colorBarArea.getMaxY();\n            double xx = colorBarArea.getX();\n            Line2D line = new Line2D.Double();\n            while (xx <= colorBarArea.getMaxX()) {\n                double value = this.axis.java2DToValue(xx, colorBarArea, edge);\n                line.setLine(xx, y1, xx, y2);\n                g2.setPaint(getPaint(value));\n                g2.draw(line);\n                xx += 1;\n            }\n        }\n        else {\n            double y1 = colorBarArea.getX();\n            double y2 = colorBarArea.getMaxX();\n            double xx = colorBarArea.getY();\n            Line2D line = new Line2D.Double();\n            while (xx <= colorBarArea.getMaxY()) {\n                double value = this.axis.java2DToValue(xx, colorBarArea, edge);\n                line.setLine(y1, xx, y2, xx);\n                g2.setPaint(getPaint(value));\n                g2.draw(line);\n                xx += 1;\n            }\n        }\n\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antiAlias);\n        g2.setStroke(strokeSaved);\n\n    }
269	protected AxisSpace calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea) {\n        AxisSpace space = new AxisSpace();\n        space = calculateRangeAxisSpace(g2, plotArea, space);\n        Rectangle2D revPlotArea = space.shrink(plotArea, null);\n        space = calculateDomainAxisSpace(g2, revPlotArea, space);\n        return space;\n    }
270	public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n\n        double m = Double.NaN;\n        double sd = Double.NaN;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n\n                int r = this.data.getColumnIndex(columnKey);\n        int c = this.data.getRowIndex(rowKey);\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n                        updateBounds();\n        }\n        else {\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.maximumRangeValue)\n                        || m > this.maximumRangeValue) {\n                    this.maximumRangeValue = m;\n                    this.maximumRangeValueRow = r;\n                    this.maximumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m + sd)) {\n                if (Double.isNaN(this.maximumRangeValueIncStdDev)\n                        || (m + sd) > this.maximumRangeValueIncStdDev) {\n                    this.maximumRangeValueIncStdDev = m + sd;\n                    this.maximumRangeValueIncStdDevRow = r;\n                    this.maximumRangeValueIncStdDevColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.minimumRangeValue)\n                        || m < this.minimumRangeValue) {\n                    this.minimumRangeValue = m;\n                    this.minimumRangeValueRow = r;\n                    this.minimumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m - sd)) {\n                if (Double.isNaN(this.minimumRangeValueIncStdDev)\n                        || (m - sd) < this.minimumRangeValueIncStdDev) {\n                    this.minimumRangeValueIncStdDev = m - sd;\n                    this.minimumRangeValueIncStdDevRow = r;\n                    this.minimumRangeValueIncStdDevColumn = c;\n                }\n            }\n        }\n        fireDatasetChanged();\n    }
271	protected void drawGridBandsHorizontal(Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, \n            boolean firstGridBandIsDark, List ticks) {\n\n        boolean currentGridBandIsDark = firstGridBandIsDark;\n        double yy = dataArea.getY();\n        double xx1, xx2;\n\n                double outlineStrokeWidth = 1.0;\n        Stroke outlineStroke = getPlot().getOutlineStroke();\n        if (outlineStroke != null && outlineStroke instanceof BasicStroke) {\n            outlineStrokeWidth = ((BasicStroke) outlineStroke).getLineWidth();\n        }\n\n        Iterator iterator = ticks.iterator();\n        ValueTick tick;\n        Rectangle2D band;\n        while (iterator.hasNext()) {\n            tick = (ValueTick) iterator.next();\n            xx1 = valueToJava2D(tick.getValue() - 0.5d, dataArea,\n                    RectangleEdge.BOTTOM);\n            xx2 = valueToJava2D(tick.getValue() + 0.5d, dataArea,\n                    RectangleEdge.BOTTOM);\n            if (currentGridBandIsDark) {\n                g2.setPaint(this.gridBandPaint);\n            }\n            else {\n                g2.setPaint(this.gridBandAlternatePaint);\n            }\n            band = new Rectangle2D.Double(Math.min(xx1, xx2), \n                    yy + outlineStrokeWidth, Math.abs(xx2 - xx1), \n                    dataArea.getMaxY() - yy - outlineStrokeWidth);\n            g2.fill(band);\n            currentGridBandIsDark = !currentGridBandIsDark;\n        }\n    }
272	private void handleExportToSVG() {\n        FileChooser fileChooser = new FileChooser();\n        fileChooser.setTitle("Export to SVG");\n        fileChooser.setSelectedExtensionFilter(new FileChooser.ExtensionFilter(\n                "Scalable Vector Graphics (SVG)", "svg"));\n        File file = fileChooser.showSaveDialog(this.getScene().getWindow());\n        if (file != null) {\n            ExportUtils.writeAsSVG(this.chart, (int) getWidth(), \n                    (int) getHeight(), file);\n        }\n    }
273	protected void drawSecondaryPass(Graphics2D g2, XYPlot plot, \n            XYDataset dataset, int pass, int series, int item,\n            ValueAxis domainAxis, Rectangle2D dataArea, ValueAxis rangeAxis,\n            CrosshairState crosshairState, EntityCollection entities) {\n\n        Shape entityArea = null;\n\n                double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1) || Double.isNaN(x1)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        if (getItemShapeVisible(series, item)) {\n            Shape shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            }\n            entityArea = shape;\n            if (shape.intersects(dataArea)) {\n                if (getItemShapeFilled(series, item)) {\n                    if (this.useFillPaint) {\n                        g2.setPaint(getItemFillPaint(series, item));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(series, item));\n                    }\n                    g2.fill(shape);\n                }\n                if (this.drawOutlines) {\n                    if (getUseOutlinePaint()) {\n                        g2.setPaint(getItemOutlinePaint(series, item));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(series, item));\n                    }\n                    g2.setStroke(getItemOutlineStroke(series, item));\n                    g2.draw(shape);\n                }\n            }\n        }\n\n        double xx = transX1;\n        double yy = transY1;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            xx = transY1;\n            yy = transX1;\n        }\n\n                if (isItemLabelVisible(series, item)) {\n            drawItemLabel(g2, orientation, dataset, series, item, xx, yy,\n                    (y1 < 0.0));\n        }\n\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n                        if (entities != null && isPointInRect(dataArea, xx, yy)) {\n            addEntity(entities, entityArea, dataset, series, item, xx, yy);\n        }\n    }
274	protected Size2D arrangeNR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        RectangleConstraint c1 = constraint.toUnconstrainedHeight();\n        Size2D size1 = arrange(container, g2, c1);\n\n        if (constraint.getHeightRange().contains(size1.getHeight())) {\n            return size1;\n        }\n        else {\n            double h = constraint.getHeightRange().constrain(size1.getHeight());\n            RectangleConstraint c2 = constraint.toFixedHeight(h);\n            return arrange(container, g2, c2);\n        }\n    }
275	protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\n            PlotOrientation orientation, Rectangle2D dataArea,\n            Rectangle2D markerArea, RectangleInsets markerOffset,\n            LengthAdjustmentType labelOffsetType, RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }
276	public void update(int index, Number value) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n        boolean iterate = false;\n        Number oldYN = item.getValue();\n        if (oldYN != null) {\n            double oldY = oldYN.doubleValue();\n            if (!Double.isNaN(oldY)) {\n                iterate = oldY <= this.minY || oldY >= this.maxY;\n            }\n        }\n        item.setValue(value);\n        if (iterate) {\n            updateMinMaxYByIteration();\n        }\n        else if (value != null) {\n            double yy = value.doubleValue();\n            this.minY = minIgnoreNaN(this.minY, yy);\n            this.maxY = maxIgnoreNaN(this.maxY, yy);\n        }\n        fireSeriesChanged();\n    }
277	protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, \n            Rectangle2D dataArea, PlotRenderingInfo plotState) {\n\n        AxisCollection axisCollection = new AxisCollection();\n\n                for (CategoryAxis xAxis : this.domainAxes.values()) {\n            if (xAxis != null) {\n                int index = getDomainAxisIndex(xAxis);\n                axisCollection.add(xAxis, getDomainAxisEdge(index));\n            }\n        }\n\n                for (ValueAxis yAxis : this.rangeAxes.values()) {\n            if (yAxis != null) {\n                int index = findRangeAxisIndex(yAxis);\n                axisCollection.add(yAxis, getRangeAxisEdge(index));\n            }\n        }\n\n        Map axisStateMap = new HashMap();\n\n                double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(\n                dataArea.getHeight());\n        Iterator iterator = axisCollection.getAxesAtTop().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.TOP, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n                cursor = dataArea.getMaxY()\n                 + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n        iterator = axisCollection.getAxesAtBottom().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.BOTTOM, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n                cursor = dataArea.getMinX()\n                 - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtLeft().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.LEFT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n                cursor = dataArea.getMaxX()\n                 + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtRight().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.RIGHT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        return axisStateMap;\n\n    }
278	private Shape[] createVerticalBlock(double x0, double width, double y0,\n            double y1, boolean inverted) {\n        Shape[] result = new Shape[6];\n        Point2D p00 = new Point2D.Double(x0, y0);\n        Point2D p01 = new Point2D.Double(x0 + width, y0);\n        Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(),\n                p01.getY() - getYOffset());\n        Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(),\n                p00.getY() - getYOffset());\n\n\n        Point2D p0 = new Point2D.Double(x0, y1);\n        Point2D p1 = new Point2D.Double(x0 + width, y1);\n        Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(),\n                p1.getY() - getYOffset());\n        Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(),\n                p0.getY() - getYOffset());\n\n        GeneralPath right = new GeneralPath();\n        right.moveTo((float) p1.getX(), (float) p1.getY());\n        right.lineTo((float) p01.getX(), (float) p01.getY());\n        right.lineTo((float) p02.getX(), (float) p02.getY());\n        right.lineTo((float) p2.getX(), (float) p2.getY());\n        right.closePath();\n\n        GeneralPath left = new GeneralPath();\n        left.moveTo((float) p0.getX(), (float) p0.getY());\n        left.lineTo((float) p00.getX(), (float) p00.getY());\n        left.lineTo((float) p03.getX(), (float) p03.getY());\n        left.lineTo((float) p3.getX(), (float) p3.getY());\n        left.closePath();\n\n        GeneralPath back = new GeneralPath();\n        back.moveTo((float) p2.getX(), (float) p2.getY());\n        back.lineTo((float) p02.getX(), (float) p02.getY());\n        back.lineTo((float) p03.getX(), (float) p03.getY());\n        back.lineTo((float) p3.getX(), (float) p3.getY());\n        back.closePath();\n\n        GeneralPath front = new GeneralPath();\n        front.moveTo((float) p0.getX(), (float) p0.getY());\n        front.lineTo((float) p1.getX(), (float) p1.getY());\n        front.lineTo((float) p01.getX(), (float) p01.getY());\n        front.lineTo((float) p00.getX(), (float) p00.getY());\n        front.closePath();\n\n        GeneralPath top = new GeneralPath();\n        top.moveTo((float) p0.getX(), (float) p0.getY());\n        top.lineTo((float) p1.getX(), (float) p1.getY());\n        top.lineTo((float) p2.getX(), (float) p2.getY());\n        top.lineTo((float) p3.getX(), (float) p3.getY());\n        top.closePath();\n\n        GeneralPath bottom = new GeneralPath();\n        bottom.moveTo((float) p00.getX(), (float) p00.getY());\n        bottom.lineTo((float) p01.getX(), (float) p01.getY());\n        bottom.lineTo((float) p02.getX(), (float) p02.getY());\n        bottom.lineTo((float) p03.getX(), (float) p03.getY());\n        bottom.closePath();\n\n        result[0] = bottom;\n        result[1] = back;\n        result[2] = left;\n        result[3] = right;\n        result[4] = top;\n        result[5] = front;\n        if (inverted) {\n            result[0] = top;\n            result[4] = bottom;\n        }\n        return result;\n    }
279	public void removePointer(int index) {\n        DialPointer pointer = (DialPointer) this.pointers.get(index);\n        if (pointer != null) {\n            pointer.removeChangeListener(this);\n        }\n        this.pointers.remove(index);\n        fireChangeEvent();\n    }
280	protected void drawChipGrid(Graphics2D g2, Rectangle2D plotArea) {\n\n        Shape savedClip = g2.getClip();\n        g2.setClip(getWaferEdge(plotArea));\n        Rectangle2D chip = new Rectangle2D.Double();\n        int xchips = 35;\n        int ychips = 20;\n        double space = 1d;\n        if (this.dataset != null) {\n            xchips = this.dataset.getMaxChipX() + 2;\n            ychips = this.dataset.getMaxChipY() + 2;\n            space = this.dataset.getChipSpace();\n        }\n        double startX = plotArea.getX();\n        double startY = plotArea.getY();\n        double chipWidth = 1d;\n        double chipHeight = 1d;\n        if (plotArea.getWidth() != plotArea.getHeight()) {\n            double major, minor;\n            if (plotArea.getWidth() > plotArea.getHeight()) {\n                major = plotArea.getWidth();\n                minor = plotArea.getHeight();\n            }\n            else {\n                major = plotArea.getHeight();\n                minor = plotArea.getWidth();\n            }\n                        if (plotArea.getWidth() == minor) {                 startY += (major - minor) / 2;\n                chipWidth = (plotArea.getWidth() - (space * xchips - 1))\n                    / xchips;\n                chipHeight = (plotArea.getWidth() - (space * ychips - 1))\n                    / ychips;\n            }\n            else {                 startX += (major - minor) / 2;\n                chipWidth = (plotArea.getHeight() - (space * xchips - 1))\n                    / xchips;\n                chipHeight = (plotArea.getHeight() - (space * ychips - 1))\n                    / ychips;\n            }\n        }\n\n        for (int x = 1; x <= xchips; x++) {\n            double upperLeftX = (startX - chipWidth) + (chipWidth * x)\n                + (space * (x - 1));\n            for (int y = 1; y <= ychips; y++) {\n                double upperLeftY = (startY - chipHeight) + (chipHeight * y)\n                    + (space * (y - 1));\n                chip.setFrame(upperLeftX, upperLeftY, chipWidth, chipHeight);\n                g2.setColor(Color.white);\n                if (this.dataset.getChipValue(x - 1, ychips - y - 1) != null) {\n                    g2.setPaint(\n                        this.renderer.getChipColor(\n                            this.dataset.getChipValue(x - 1, ychips - y - 1)\n                        )\n                    );\n                }\n                g2.fill(chip);\n                g2.setColor(Color.lightGray);\n                g2.draw(chip);\n            }\n        }\n        g2.setClip(savedClip);\n    }
281	protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2,\n                                  Rectangle2D plotArea, Rectangle2D linkArea,\n                                  float maxLabelWidth, PiePlotState state) {\n\n        this.labelDistributor.clear();\n        double lGap = plotArea.getWidth() * this.labelGap;\n        double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;\n        for (int i = 0; i < leftKeys.getItemCount(); i++) {\n            String label = this.labelGenerator.generateSectionLabel(\n                    this.dataset, leftKeys.getKey(i));\n            if (label != null) {\n                TextBlock block = TextUtilities.createTextBlock(label,\n                        this.labelFont, this.labelPaint, maxLabelWidth,\n                        new G2TextMeasurer(g2));\n                TextBox labelBox = new TextBox(block);\n                labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n                labelBox.setOutlinePaint(this.labelOutlinePaint);\n                labelBox.setOutlineStroke(this.labelOutlineStroke);\n                if (this.shadowGenerator == null) {\n                    labelBox.setShadowPaint(this.labelShadowPaint);\n                }\n                else {\n                    labelBox.setShadowPaint(null);\n                }\n                labelBox.setInteriorGap(this.labelPadding);\n                double theta = Math.toRadians(\n                        leftKeys.getValue(i).doubleValue());\n                double baseY = state.getPieCenterY() - Math.sin(theta)\n                               * verticalLinkRadius;\n                double hh = labelBox.getHeight(g2);\n\n                this.labelDistributor.addPieLabelRecord(new PieLabelRecord(\n                        leftKeys.getKey(i), theta, baseY, labelBox, hh,\n                        lGap / 2.0 + lGap / 2.0 * -Math.cos(theta), 1.0\n                        - getLabelLinkDepth()\n                        + getExplodePercent(leftKeys.getKey(i))));\n            }\n        }\n        double hh = plotArea.getHeight();\n        double gap = hh * getInteriorGap();\n        this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,\n                hh - 2 * gap);\n        for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {\n            drawLeftLabel(g2, state,\n                    this.labelDistributor.getPieLabelRecord(i));\n        }\n    }
282	protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        Size2D size1 = arrangeFN(container, g2, constraint.getWidth());\n        if (constraint.getHeightRange().contains(size1.getHeight())) {\n            return size1;\n        }\n        else {\n            double h = constraint.getHeightRange().constrain(size1.getHeight());\n            RectangleConstraint c2 = constraint.toFixedHeight(h);\n            return arrange(container, g2, c2);\n        }\n    }
283	public void removeOverlay(Overlay overlay) {\n        ParamChecks.nullNotPermitted(overlay, "overlay");\n        boolean removed = this.overlays.remove(overlay);\n        if (removed) {\n            overlay.removeChangeListener(this);\n            repaint();\n        }\n    }
284	public static Year parseYear(String s) {\n\n                int y;\n        try {\n            y = Integer.parseInt(s.trim());\n        }\n        catch (NumberFormatException e) {\n            throw new TimePeriodFormatException("Cannot parse string.");\n        }\n\n                try {\n            return new Year(y);\n        }\n        catch (IllegalArgumentException e) {\n            throw new TimePeriodFormatException("Year outside valid range.");\n        }\n    }
285	public void removeSeries(TimePeriodValues series) {\n        ParamChecks.nullNotPermitted(series, "series");\n        this.data.remove(series);\n        series.removeChangeListener(this);\n        fireDatasetChanged();\n\n    }
286	protected void drawItemPass1(Graphics2D x_graphics,\n                                 Rectangle2D x_dataArea,\n                                 PlotRenderingInfo x_info,\n                                 XYPlot x_plot,\n                                 ValueAxis x_domainAxis,\n                                 ValueAxis x_rangeAxis,\n                                 XYDataset x_dataset,\n                                 int x_series,\n                                 int x_item,\n                                 CrosshairState x_crosshairState) {\n\n        Shape l_entityArea = null;\n        EntityCollection l_entities = null;\n        if (null != x_info) {\n            l_entities = x_info.getOwner().getEntityCollection();\n        }\n\n        Paint l_seriesPaint   = getItemPaint(x_series, x_item);\n        Stroke l_seriesStroke = getItemStroke(x_series, x_item);\n        x_graphics.setPaint(l_seriesPaint);\n        x_graphics.setStroke(l_seriesStroke);\n\n        PlotOrientation l_orientation      = x_plot.getOrientation();\n        RectangleEdge l_domainAxisLocation = x_plot.getDomainAxisEdge();\n        RectangleEdge l_rangeAxisLocation  = x_plot.getRangeAxisEdge();\n\n        double l_x0 = x_dataset.getXValue(x_series, x_item);\n        double l_y0 = x_dataset.getYValue(x_series, x_item);\n        double l_x1 = x_domainAxis.valueToJava2D(l_x0, x_dataArea,\n                l_domainAxisLocation);\n        double l_y1 = x_rangeAxis.valueToJava2D(l_y0, x_dataArea,\n                l_rangeAxisLocation);\n\n        if (getShapesVisible()) {\n            Shape l_shape = getItemShape(x_series, x_item);\n            if (l_orientation == PlotOrientation.HORIZONTAL) {\n                l_shape = ShapeUtilities.createTranslatedShape(l_shape,\n                        l_y1, l_x1);\n            }\n            else {\n                l_shape = ShapeUtilities.createTranslatedShape(l_shape,\n                        l_x1, l_y1);\n            }\n            if (l_shape.intersects(x_dataArea)) {\n                x_graphics.setPaint(getItemPaint(x_series, x_item));\n                x_graphics.fill(l_shape);\n            }\n            l_entityArea = l_shape;\n        }\n\n                if (null != l_entities) {\n            if (null == l_entityArea) {\n                l_entityArea = new Rectangle2D.Double((l_x1 - 2), (l_y1 - 2),\n                        4, 4);\n            }\n            String l_tip = null;\n            XYToolTipGenerator l_tipGenerator = getToolTipGenerator(x_series,\n                    x_item);\n            if (null != l_tipGenerator) {\n                l_tip = l_tipGenerator.generateToolTip(x_dataset, x_series,\n                        x_item);\n            }\n            String l_url = null;\n            XYURLGenerator l_urlGenerator = getURLGenerator();\n            if (null != l_urlGenerator) {\n                l_url = l_urlGenerator.generateURL(x_dataset, x_series,\n                        x_item);\n            }\n            XYItemEntity l_entity = new XYItemEntity(l_entityArea, x_dataset,\n                    x_series, x_item, l_tip, l_url);\n            l_entities.add(l_entity);\n        }\n\n                if (isItemLabelVisible(x_series, x_item)) {\n            drawItemLabel(x_graphics, l_orientation, x_dataset, x_series,\n                          x_item, l_x1, l_y1, (l_y1 < 0.0));\n        }\n\n        int l_domainAxisIndex = x_plot.getDomainAxisIndex(x_domainAxis);\n        int l_rangeAxisIndex  = x_plot.getRangeAxisIndex(x_rangeAxis);\n        updateCrosshairValues(x_crosshairState, l_x0, l_y0, l_domainAxisIndex,\n                              l_rangeAxisIndex, l_x1, l_y1, l_orientation);\n\n        if (0 == x_item) {\n            return;\n        }\n\n        double l_x2 = x_domainAxis.valueToJava2D(x_dataset.getXValue(x_series,\n                (x_item - 1)), x_dataArea, l_domainAxisLocation);\n        double l_y2 = x_rangeAxis.valueToJava2D(x_dataset.getYValue(x_series,\n                (x_item - 1)), x_dataArea, l_rangeAxisLocation);\n\n        Line2D l_line = null;\n        if (PlotOrientation.HORIZONTAL == l_orientation) {\n            l_line = new Line2D.Double(l_y1, l_x1, l_y2, l_x2);\n        }\n        else if (PlotOrientation.VERTICAL == l_orientation) {\n            l_line = new Line2D.Double(l_x1, l_y1, l_x2, l_y2);\n        }\n\n        if ((null != l_line) && l_line.intersects(x_dataArea)) {\n            x_graphics.setPaint(getItemPaint(x_series, x_item));\n            x_graphics.setStroke(getItemStroke(x_series, x_item));\n            x_graphics.draw(l_line);\n        }\n    }
287	public static Number[] createNumberArray(double[] data) {\n        Number[] result = new Number[data.length];\n        for (int i = 0; i < data.length; i++) {\n            result[i] = new Double(data[i]);\n        }\n        return result;\n    }
288	protected Map<Axis, AxisState> drawAxes(Graphics2D g2, Rectangle2D plotArea,\n            Rectangle2D dataArea, PlotRenderingInfo plotState) {\n\n        AxisCollection axisCollection = new AxisCollection();\n\n                for (ValueAxis axis : this.domainAxes.values()) {\n            if (axis != null) {\n                int axisIndex = findDomainAxisIndex(axis);\n                axisCollection.add(axis, getDomainAxisEdge(axisIndex));\n            }\n        }\n\n                for (ValueAxis axis : this.rangeAxes.values()) {\n            if (axis != null) {\n                int axisIndex = findRangeAxisIndex(axis);\n                axisCollection.add(axis, getRangeAxisEdge(axisIndex));\n            }\n        }\n\n        Map axisStateMap = new HashMap();\n\n                double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(\n                dataArea.getHeight());\n        Iterator iterator = axisCollection.getAxesAtTop().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.TOP, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n                cursor = dataArea.getMaxY()\n                 + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n        iterator = axisCollection.getAxesAtBottom().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.BOTTOM, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n                cursor = dataArea.getMinX()\n                 - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtLeft().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.LEFT, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n                cursor = dataArea.getMaxX()\n                 + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtRight().iterator();\n        while (iterator.hasNext()) {\n            ValueAxis axis = (ValueAxis) iterator.next();\n            AxisState info = axis.draw(g2, cursor, plotArea, dataArea,\n                    RectangleEdge.RIGHT, plotState);\n            cursor = info.getCursor();\n            axisStateMap.put(axis, info);\n        }\n\n        return axisStateMap;\n    }
289	public static int[] findItemIndicesForX(XYDataset dataset, int series,\n            double x) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount == 0) {\n            return new int[] {-1, -1};\n        }\n        if (itemCount == 1) {\n            if (x == dataset.getXValue(series, 0)) {\n                return new int[] {0, 0};\n            } else {\n                return new int[] {-1, -1};\n            }\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue > x) {\n                return new int[] {-1, -1};\n            }\n            if (lowValue == x) {\n                return new int[] {low, low};\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < x) {\n                return new int[] {-1, -1};\n            }\n            if (highValue == x) {\n                return new int[] {high, high};\n            }\n            int mid = (low + high) / 2;\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (x == midV) {\n                    return new int[] {mid, mid};\n                }\n                if (midV < x) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return new int[] {low, high};\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            int high = 0;\n            int low = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue > x) {\n                return new int[] {-1, -1};\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < x) {\n                return new int[] {-1, -1};\n            }\n            int mid = (low + high) / 2;\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (x == midV) {\n                    return new int[] {mid, mid};\n                }\n                if (midV < x) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return new int[] {low, high};\n        }\n        else {\n                                                double prev = dataset.getXValue(series, 0);\n            if (x == prev) {\n                return new int[] {0, 0};             }\n            for (int i = 1; i < itemCount; i++) {\n                double next = dataset.getXValue(series, i);\n                if (x == next) {\n                    return new int[] {i, i};                 }\n                if ((x > prev && x < next) || (x < prev && x > next)) {\n                    return new int[] {i - 1, i};                 }\n            }\n            return new int[] {-1, -1};         }\n    }
290	public void add(BoxAndWhiskerItem item, Comparable rowKey,\n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n\n                int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn\n                == c) || (this.minimumRangeValueRow == r\n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        else {\n\n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n\n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n\n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        }\n\n        fireDatasetChanged();\n\n    }
291	public static JFreeChart createBarChart(String title,\n            String categoryAxisLabel, String valueAxisLabel,\n            CategoryDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        BarRenderer renderer = new BarRenderer();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            ItemLabelPosition position1 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE3, TextAnchor.CENTER_LEFT);\n            renderer.setBasePositiveItemLabelPosition(position1);\n            ItemLabelPosition position2 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE9, TextAnchor.CENTER_RIGHT);\n            renderer.setBaseNegativeItemLabelPosition(position2);\n        } else if (orientation == PlotOrientation.VERTICAL) {\n            ItemLabelPosition position1 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n            renderer.setBasePositiveItemLabelPosition(position1);\n            ItemLabelPosition position2 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n            renderer.setBaseNegativeItemLabelPosition(position2);\n        }\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseItemURLGenerator(\n                    new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,\n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
292	private void extractRowKeyAndData(String line,\n                                      DefaultCategoryDataset dataset,\n                                      List columnKeys) {\n        Comparable rowKey = null;\n        int fieldIndex = 0;\n        int start = 0;\n        for (int i = 0; i < line.length(); i++) {\n            if (line.charAt(i) == this.fieldDelimiter) {\n                if (fieldIndex == 0) {                      String key = line.substring(start, i);\n                    rowKey = removeStringDelimiters(key);\n                }\n                else {                      Double value = Double.valueOf(\n                        removeStringDelimiters(line.substring(start, i))\n                    );\n                    dataset.addValue(\n                        value, rowKey,\n                        (Comparable) columnKeys.get(fieldIndex - 1)\n                    );\n                }\n                start = i + 1;\n                fieldIndex++;\n            }\n        }\n        Double value = Double.valueOf(\n            removeStringDelimiters(line.substring(start, line.length()))\n        );\n        dataset.addValue(\n            value, rowKey, (Comparable) columnKeys.get(fieldIndex - 1)\n        );\n    }
293	public static Minute parseMinute(String s) {\n        Minute result = null;\n        s = s.trim();\n\n        String daystr = s.substring(0, Math.min(10, s.length()));\n        Day day = Day.parseDay(daystr);\n        if (day != null) {\n            String hmstr = s.substring(\n                Math.min(daystr.length() + 1, s.length()), s.length()\n            );\n            hmstr = hmstr.trim();\n\n            String hourstr = hmstr.substring(0, Math.min(2, hmstr.length()));\n            int hour = Integer.parseInt(hourstr);\n\n            if ((hour >= 0) && (hour <= 23)) {\n                String minstr = hmstr.substring(\n                    Math.min(hourstr.length() + 1, hmstr.length()),\n                    hmstr.length()\n                );\n                int minute = Integer.parseInt(minstr);\n                if ((minute >= 0) && (minute <= 59)) {\n                    result = new Minute(minute, new Hour(hour, day));\n                }\n            }\n        }\n        return result;\n    }
294	protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, int datasetIndex,\n            Comparable rowKey, Comparable columnKey, Stroke stroke,\n            Paint paint) {\n\n        CategoryDataset dataset = getDataset(datasetIndex);\n        CategoryAxis axis = getDomainAxisForDataset(datasetIndex);\n        CategoryItemRenderer renderer = getRenderer(datasetIndex);\n        Line2D line;\n        if (orientation == PlotOrientation.VERTICAL) {\n            double xx = renderer.getItemMiddle(rowKey, columnKey, dataset, axis,\n                    dataArea, RectangleEdge.BOTTOM);\n            line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n        }\n        else {\n            double yy = renderer.getItemMiddle(rowKey, columnKey, dataset, axis,\n                    dataArea, RectangleEdge.LEFT);\n            line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n        }\n        g2.setStroke(stroke);\n        g2.setPaint(paint);\n        g2.draw(line);\n\n    }
295	private void handleExportToPDF() {\n        FileChooser fileChooser = new FileChooser();\n        fileChooser.setSelectedExtensionFilter(new FileChooser.ExtensionFilter(\n                "Portable Document Format (PDF)", "pdf"));\n        fileChooser.setTitle("Export to PDF");\n        File file = fileChooser.showSaveDialog(this.getScene().getWindow());\n        if (file != null) {\n            ExportUtils.writeAsPDF(this.chart, (int) getWidth(), \n                    (int) getHeight(), file);\n        } \n    }
296	protected void adjustUpwards(double minY, double height) {\n        for (int i = this.labels.size() - 1; i > 0; i--) {\n            PieLabelRecord record0 = getPieLabelRecord(i);\n            PieLabelRecord record1 = getPieLabelRecord(i - 1);\n            if (record1.getUpperY() > record0.getLowerY()) {\n                record1.setAllocatedY(Math.max(minY\n                        + record1.getLabelHeight() / 2.0, record0.getLowerY()\n                        - this.minGap - record1.getLabelHeight() / 2.0));\n            }\n        }\n    }
297	public static JFreeChart createXYStepAreaChart(String title, \n            String xAxisLabel, String yAxisLabel, XYDataset dataset,\n            PlotOrientation orientation, boolean legend, boolean tooltips,\n            boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        NumberAxis xAxis = new NumberAxis(xAxisLabel);\n        xAxis.setAutoRangeIncludesZero(false);\n        NumberAxis yAxis = new NumberAxis(yAxisLabel);\n\n        XYToolTipGenerator toolTipGenerator = null;\n        if (tooltips) {\n            toolTipGenerator = new StandardXYToolTipGenerator();\n        }\n\n        XYURLGenerator urlGenerator = null;\n        if (urls) {\n            urlGenerator = new StandardXYURLGenerator();\n        }\n        XYItemRenderer renderer = new XYStepAreaRenderer(\n                XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator,\n                urlGenerator);\n\n        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n        plot.setRenderer(renderer);\n        plot.setOrientation(orientation);\n        plot.setDomainCrosshairVisible(false);\n        plot.setRangeCrosshairVisible(false);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n    }
298	public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,\n                                                       int column) {\n        DefaultPieDataset result = new DefaultPieDataset();\n        int rowCount = dataset.getRowCount();\n        for (int i = 0; i < rowCount; i++) {\n            Comparable rowKey = dataset.getRowKey(i);\n            result.setValue(rowKey, dataset.getValue(i, column));\n        }\n        return result;\n    }
299	public void setRangeZoomable(boolean flag) {\n        if (flag) {\n            Plot plot = this.chart.getPlot();\n            if (plot instanceof Zoomable) {\n                Zoomable z = (Zoomable) plot;\n                this.rangeZoomable = flag && (z.isRangeZoomable());\n            }\n        }\n        else {\n            this.rangeZoomable = false;\n        }\n    }
300	protected Size2D arrangeNF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        List blocks = container.getBlocks();\n\n        double height = constraint.getHeight();\n        if (height <= 0.0) {\n            height = Double.POSITIVE_INFINITY;\n        }\n\n        double x = 0.0;\n        double y = 0.0;\n        double maxWidth = 0.0;\n        List itemsInColumn = new ArrayList();\n        for (int i = 0; i < blocks.size(); i++) {\n            Block block = (Block) blocks.get(i);\n            Size2D size = block.arrange(g2, RectangleConstraint.NONE);\n            if (y + size.height <= height) {\n                itemsInColumn.add(block);\n                block.setBounds(\n                    new Rectangle2D.Double(x, y, size.width, size.height)\n                );\n                y = y + size.height + this.verticalGap;\n                maxWidth = Math.max(maxWidth, size.width);\n            }\n            else {\n                if (itemsInColumn.isEmpty()) {\n                                        block.setBounds(\n                        new Rectangle2D.Double(\n                            x, y, size.width, Math.min(size.height, height - y)\n                        )\n                    );\n                    y = 0.0;\n                    x = x + size.width + this.horizontalGap;\n                }\n                else {\n                                        itemsInColumn.clear();\n                    x = x + maxWidth + this.horizontalGap;\n                    y = 0.0;\n                    maxWidth = size.width;\n                    block.setBounds(\n                        new Rectangle2D.Double(\n                            x, y, size.width, Math.min(size.height, height)\n                        )\n                    );\n                    y = size.height + this.verticalGap;\n                    itemsInColumn.add(block);\n                }\n            }\n        }\n        return new Size2D(x + maxWidth, constraint.getHeight());\n    }
301	private double calculateIntervalForSeries(int series) {\n        double result = Double.POSITIVE_INFINITY;\n        int itemCount = this.dataset.getItemCount(series);\n        if (itemCount > 1) {\n            double prev = this.dataset.getXValue(series, 0);\n            for (int item = 1; item < itemCount; item++) {\n                double x = this.dataset.getXValue(series, item);\n                result = Math.min(result, x - prev);\n                prev = x;\n            }\n        }\n        return result;\n    }
302	protected void drawTickMarksHorizontal(Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge) {\n        List ticks = new ArrayList();\n        double x0;\n        double y0 = state.getCursor();\n        double insideLength = getTickMarkInsideLength();\n        double outsideLength = getTickMarkOutsideLength();\n        RegularTimePeriod t = createInstance(this.majorTickTimePeriodClass, \n                this.first.getStart(), getTimeZone(), this.locale);\n        long t0 = t.getFirstMillisecond();\n        Line2D inside = null;\n        Line2D outside = null;\n        long firstOnAxis = getFirst().getFirstMillisecond();\n        long lastOnAxis = getLast().getLastMillisecond() + 1;\n        while (t0 <= lastOnAxis) {\n            ticks.add(new NumberTick(Double.valueOf(t0), "", TextAnchor.CENTER,\n                    TextAnchor.CENTER, 0.0));\n            x0 = valueToJava2D(t0, dataArea, edge);\n            if (edge == RectangleEdge.TOP) {\n                inside = new Line2D.Double(x0, y0, x0, y0 + insideLength);\n                outside = new Line2D.Double(x0, y0, x0, y0 - outsideLength);\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                inside = new Line2D.Double(x0, y0, x0, y0 - insideLength);\n                outside = new Line2D.Double(x0, y0, x0, y0 + outsideLength);\n            }\n            if (t0 >= firstOnAxis) {\n                g2.setPaint(getTickMarkPaint());\n                g2.setStroke(getTickMarkStroke());\n                g2.draw(inside);\n                g2.draw(outside);\n            }\n                        if (this.minorTickMarksVisible) {\n                RegularTimePeriod tminor = createInstance(\n                        this.minorTickTimePeriodClass, new Date(t0),\n                        getTimeZone(), this.locale);\n                long tt0 = tminor.getFirstMillisecond();\n                while (tt0 < t.getLastMillisecond()\n                        && tt0 < lastOnAxis) {\n                    double xx0 = valueToJava2D(tt0, dataArea, edge);\n                    if (edge == RectangleEdge.TOP) {\n                        inside = new Line2D.Double(xx0, y0, xx0,\n                                y0 + this.minorTickMarkInsideLength);\n                        outside = new Line2D.Double(xx0, y0, xx0,\n                                y0 - this.minorTickMarkOutsideLength);\n                    }\n                    else if (edge == RectangleEdge.BOTTOM) {\n                        inside = new Line2D.Double(xx0, y0, xx0,\n                                y0 - this.minorTickMarkInsideLength);\n                        outside = new Line2D.Double(xx0, y0, xx0,\n                                y0 + this.minorTickMarkOutsideLength);\n                    }\n                    if (tt0 >= firstOnAxis) {\n                        g2.setPaint(this.minorTickMarkPaint);\n                        g2.setStroke(this.minorTickMarkStroke);\n                        g2.draw(inside);\n                        g2.draw(outside);\n                    }\n                    tminor = tminor.next();\n                    tminor.peg(this.calendar);\n                    tt0 = tminor.getFirstMillisecond();\n                }\n            }\n            t = t.next();\n            t.peg(this.calendar);\n            t0 = t.getFirstMillisecond();\n        }\n        if (edge == RectangleEdge.TOP) {\n            state.cursorUp(Math.max(outsideLength,\n                    this.minorTickMarkOutsideLength));\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            state.cursorDown(Math.max(outsideLength,\n                    this.minorTickMarkOutsideLength));\n        }\n        state.setTicks(ticks);\n    }
303	private static int findSeparator(String s) {\n        int result = s.indexOf('-');\n        if (result == -1) {\n            result = s.indexOf(',');\n        }\n        if (result == -1) {\n            result = s.indexOf(' ');\n        }\n        if (result == -1) {\n            result = s.indexOf('.');\n        }\n        return result;\n    }
304	private void saveAsPDF(File f) {\n        File file = f;\n        if (file == null) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                    localizationResources.getString("PDF_Files"), "pdf");\n            fileChooser.addChoosableFileFilter(filter);\n            fileChooser.setFileFilter(filter);\n\n            int option = fileChooser.showSaveDialog(this);\n            if (option == JFileChooser.APPROVE_OPTION) {\n                String filename = fileChooser.getSelectedFile().getPath();\n                if (isEnforceFileExtensions()) {\n                    if (!filename.endsWith(".pdf")) {\n                        filename = filename + ".pdf";\n                    }\n                }\n                file = new File(filename);\n                if (file.exists()) {\n                    String fileExists = localizationResources.getString(\n                            "FILE_EXISTS_CONFIRM_OVERWRITE");\n                    int response = JOptionPane.showConfirmDialog(this, \n                            fileExists, "Save As PDF", \n                            JOptionPane.OK_CANCEL_OPTION);\n                    if (response == JOptionPane.CANCEL_OPTION) {\n                        file = null;\n                    }\n                }\n            }\n        }\n        \n        if (file != null) {\n            writeAsPDF(file, getWidth(), getHeight());\n        }\n    }
305	public GeneralPath draw(Graphics2D g2,\n                            Rectangle2D dataArea,\n                            ValueAxis horizontalAxis, ValueAxis verticalAxis) {\n\n        GeneralPath generalPath = generateClipPath(\n            dataArea, horizontalAxis, verticalAxis\n        );\n        if (this.fillPath || this.drawPath) {\n            Composite saveComposite = g2.getComposite();\n            Paint savePaint = g2.getPaint();\n            Stroke saveStroke = g2.getStroke();\n\n            if (this.fillPaint != null) {\n                g2.setPaint(this.fillPaint);\n            }\n            if (this.composite != null) {\n                g2.setComposite(this.composite);\n            }\n            if (this.fillPath) {\n                g2.fill(generalPath);\n            }\n\n            if (this.drawStroke != null) {\n                g2.setStroke(this.drawStroke);\n            }\n            if (this.drawPath) {\n                g2.draw(generalPath);\n            }\n            g2.setPaint(savePaint);\n            g2.setComposite(saveComposite);\n            g2.setStroke(saveStroke);\n        }\n        return generalPath;\n\n    }
306	private void readObject(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n\n        int paintCount = stream.readInt();\n        this.paintSequence = new Paint[paintCount];\n        for (int i = 0; i < paintCount; i++) {\n            this.paintSequence[i] = SerialUtilities.readPaint(stream);\n        }\n\n        int outlinePaintCount = stream.readInt();\n        this.outlinePaintSequence = new Paint[outlinePaintCount];\n        for (int i = 0; i < outlinePaintCount; i++) {\n            this.outlinePaintSequence[i] = SerialUtilities.readPaint(stream);\n        }\n\n        int strokeCount = stream.readInt();\n        this.strokeSequence = new Stroke[strokeCount];\n        for (int i = 0; i < strokeCount; i++) {\n            this.strokeSequence[i] = SerialUtilities.readStroke(stream);\n        }\n\n        int outlineStrokeCount = stream.readInt();\n        this.outlineStrokeSequence = new Stroke[outlineStrokeCount];\n        for (int i = 0; i < outlineStrokeCount; i++) {\n            this.outlineStrokeSequence[i] = SerialUtilities.readStroke(stream);\n        }\n\n        int shapeCount = stream.readInt();\n        this.shapeSequence = new Shape[shapeCount];\n        for (int i = 0; i < shapeCount; i++) {\n            this.shapeSequence[i] = SerialUtilities.readShape(stream);\n        }\n\n    }
307	public void executeQuery(Connection con, String query) throws SQLException {\n\n        Statement statement = null;\n        ResultSet resultSet = null;\n\n        try {\n            statement = con.createStatement();\n            resultSet = statement.executeQuery(query);\n            ResultSetMetaData metaData = resultSet.getMetaData();\n\n            int columnCount = metaData.getColumnCount();\n            if (columnCount != 2) {\n                throw new SQLException(\n                    "Invalid sql generated.  PieDataSet requires 2 columns only"\n                );\n            }\n\n            int columnType = metaData.getColumnType(2);\n            double value;\n            while (resultSet.next()) {\n                Comparable key = resultSet.getString(1);\n                switch (columnType) {\n                    case Types.NUMERIC:\n                    case Types.REAL:\n                    case Types.INTEGER:\n                    case Types.DOUBLE:\n                    case Types.FLOAT:\n                    case Types.DECIMAL:\n                    case Types.BIGINT:\n                        value = resultSet.getDouble(2);\n                        setValue(key, value);\n                        break;\n\n                    case Types.DATE:\n                    case Types.TIME:\n                    case Types.TIMESTAMP:\n                        Timestamp date = resultSet.getTimestamp(2);\n                        value = date.getTime();\n                        setValue(key, value);\n                        break;\n\n                    default:\n                        System.err.println(\n                                "JDBCPieDataset - unknown data type");\n                        break;\n                }\n            }\n\n            fireDatasetChanged();\n\n        }\n        finally {\n            if (resultSet != null) {\n                try {\n                    resultSet.close();\n                }\n                catch (Exception e) {\n                    System.err.println("JDBCPieDataset: swallowing exception.");\n                }\n            }\n            if (statement != null) {\n                try {\n                    statement.close();\n                }\n                catch (Exception e) {\n                    System.err.println("JDBCPieDataset: swallowing exception.");\n                }\n            }\n        }\n    }
308	protected String generateSectionLabel(PieDataset dataset, Comparable key) {\n        String result = null;\n        if (dataset != null) {\n            Object[] items = createItemArray(dataset, key);\n            result = MessageFormat.format(this.labelFormat, items);\n        }\n        return result;\n    }
309	protected void spreadEvenly(double minY, double height) {\n        double y = minY;\n        double sumOfLabelHeights = 0.0;\n        for (int i = 0; i < this.labels.size(); i++) {\n            sumOfLabelHeights += getPieLabelRecord(i).getLabelHeight();\n        }\n        double gap = height - sumOfLabelHeights;\n        if (this.labels.size() > 1) {\n            gap = gap / (this.labels.size() - 1);\n        }\n        for (int i = 0; i < this.labels.size(); i++) {\n            PieLabelRecord record = getPieLabelRecord(i);\n            y = y + record.getLabelHeight() / 2.0;\n            record.setAllocatedY(y);\n            y = y + record.getLabelHeight() / 2.0 + gap;\n        }\n    }
310	private void drawZoomRectangle(Graphics2D g2, boolean xor) {\n        if (this.zoomRectangle != null) {\n            if (xor) {\n                                 g2.setXORMode(Color.gray);\n            }\n            if (this.fillZoomRectangle) {\n                g2.setPaint(this.zoomFillPaint);\n                g2.fill(this.zoomRectangle);\n            }\n            else {\n                g2.setPaint(this.zoomOutlinePaint);\n                g2.draw(this.zoomRectangle);\n            }\n            if (xor) {\n                                g2.setPaintMode();\n            }\n        }\n    }
311	protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n\n        if (!axis.getRange().contains(value)) {\n            return;\n        }\n        Line2D line;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double xx = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.BOTTOM);\n            line = new Line2D.Double(xx, dataArea.getMinY(), xx,\n                    dataArea.getMaxY());\n        }\n        else {\n            double yy = axis.valueToJava2D(value, dataArea,\n                    RectangleEdge.LEFT);\n            line = new Line2D.Double(dataArea.getMinX(), yy,\n                    dataArea.getMaxX(), yy);\n        }\n        g2.setStroke(stroke);\n        g2.setPaint(paint);\n        g2.draw(line);\n\n    }
312	public void clearRangeCrosshairs() {\n        if (this.yCrosshairs.isEmpty()) {\n            return;          }\n        List crosshairs = getRangeCrosshairs();\n        for (int i = 0; i < crosshairs.size(); i++) {\n            Crosshair c = (Crosshair) crosshairs.get(i);\n            this.yCrosshairs.remove(c);\n            c.removePropertyChangeListener(this);\n        }\n        fireOverlayChanged();\n    }
313	protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area,\n                                      List ticks) {\n\n                if (getRenderer() == null) {\n            return;\n        }\n\n                if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {\n            Stroke gridStroke = null;\n            Paint gridPaint = null;\n            ValueAxis axis = getRangeAxis();\n            if (axis != null) {\n                Iterator iterator = ticks.iterator();\n                boolean paintLine;\n                while (iterator.hasNext()) {\n                    paintLine = false;\n                    ValueTick tick = (ValueTick) iterator.next();\n                    if ((tick.getTickType() == TickType.MINOR)\n                            && isRangeMinorGridlinesVisible()) {\n                        gridStroke = getRangeMinorGridlineStroke();\n                        gridPaint = getRangeMinorGridlinePaint();\n                        paintLine = true;\n                    } else if ((tick.getTickType() == TickType.MAJOR)\n                            && isRangeGridlinesVisible()) {\n                        gridStroke = getRangeGridlineStroke();\n                        gridPaint = getRangeGridlinePaint();\n                        paintLine = true;\n                    }\n                    if ((tick.getValue() != 0.0\n                            || !isRangeZeroBaselineVisible()) && paintLine) {\n                        getRenderer().drawRangeLine(g2, this, getRangeAxis(),\n                                area, tick.getValue(), gridPaint, gridStroke);\n                    }\n                }\n            }\n        }\n    }
314	public void addObservation(double value, boolean notify) {\n        boolean placed = false;\n        Iterator iterator = this.bins.iterator();\n        while (iterator.hasNext() && !placed) {\n            SimpleHistogramBin bin = (SimpleHistogramBin) iterator.next();\n            if (bin.accepts(value)) {\n                bin.setItemCount(bin.getItemCount() + 1);\n                placed = true;\n            }\n        }\n        if (!placed) {\n            throw new RuntimeException("No bin.");\n        }\n        if (notify) {\n            notifyListeners(new DatasetChangeEvent(this, this));\n        }\n    }
315	private void updateOffsets() {\n        if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_LEFT)) {\n            this.xOffset = 0.0;\n            this.yOffset = 0.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.BOTTOM)) {\n            this.xOffset = -this.blockWidth / 2.0;\n            this.yOffset = 0.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_RIGHT)) {\n            this.xOffset = -this.blockWidth;\n            this.yOffset = 0.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.LEFT)) {\n            this.xOffset = 0.0;\n            this.yOffset = -this.blockHeight / 2.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.CENTER)) {\n            this.xOffset = -this.blockWidth / 2.0;\n            this.yOffset = -this.blockHeight / 2.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.RIGHT)) {\n            this.xOffset = -this.blockWidth;\n            this.yOffset = -this.blockHeight / 2.0;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.TOP_LEFT)) {\n            this.xOffset = 0.0;\n            this.yOffset = -this.blockHeight;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.TOP)) {\n            this.xOffset = -this.blockWidth / 2.0;\n            this.yOffset = -this.blockHeight;\n        }\n        else if (this.blockAnchor.equals(RectangleAnchor.TOP_RIGHT)) {\n            this.xOffset = -this.blockWidth;\n            this.yOffset = -this.blockHeight;\n        }\n    }
316	public static Month parseMonth(String s) {\n        Month result = null;\n        if (s == null) {\n            return result;\n        }\n                s = s.trim();\n        int i = Month.findSeparator(s);\n        String s1, s2;\n        boolean yearIsFirst;\n                        if (i == -1) {\n            yearIsFirst = true;\n            s1 = s.substring(0, 5);\n            s2 = s.substring(5);\n        }\n        else {\n            s1 = s.substring(0, i).trim();\n            s2 = s.substring(i + 1, s.length()).trim();\n                        Year y1 = Month.evaluateAsYear(s1);\n            if (y1 == null) {\n                yearIsFirst = false;\n            }\n            else {\n                Year y2 = Month.evaluateAsYear(s2);\n                if (y2 == null) {\n                    yearIsFirst = true;\n                }\n                else {\n                    yearIsFirst = (s1.length() > s2.length());\n                }\n            }\n        }\n        Year year;\n        int month;\n        if (yearIsFirst) {\n            year = Month.evaluateAsYear(s1);\n            month = SerialDate.stringToMonthCode(s2);\n        }\n        else {\n            year = Month.evaluateAsYear(s2);\n            month = SerialDate.stringToMonthCode(s1);\n        }\n        if (month == -1) {\n            throw new TimePeriodFormatException("Can't evaluate the month.");\n        }\n        if (year == null) {\n            throw new TimePeriodFormatException("Can't evaluate the year.");\n        }\n        result = new Month(month, year);\n        return result;\n    }
317	public static JFreeChart createWaterfallChart(String title,\n            String categoryAxisLabel, String valueAxisLabel,\n            CategoryDataset dataset, PlotOrientation orientation,\n            boolean legend, boolean tooltips, boolean urls) {\n\n        ParamChecks.nullNotPermitted(orientation, "orientation");\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        categoryAxis.setCategoryMargin(0.0);\n\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        WaterfallBarRenderer renderer = new WaterfallBarRenderer();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            ItemLabelPosition position = new ItemLabelPosition(\n                    ItemLabelAnchor.CENTER, TextAnchor.CENTER,\n                    TextAnchor.CENTER, Math.PI / 2.0);\n            renderer.setBasePositiveItemLabelPosition(position);\n            renderer.setBaseNegativeItemLabelPosition(position);\n         }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            ItemLabelPosition position = new ItemLabelPosition(\n                    ItemLabelAnchor.CENTER, TextAnchor.CENTER,\n                    TextAnchor.CENTER, 0.0);\n            renderer.setBasePositiveItemLabelPosition(position);\n            renderer.setBaseNegativeItemLabelPosition(position);\n        }\n        if (tooltips) {\n            StandardCategoryToolTipGenerator generator\n                = new StandardCategoryToolTipGenerator();\n            renderer.setBaseToolTipGenerator(generator);\n        }\n        if (urls) {\n            renderer.setBaseItemURLGenerator(\n                    new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis,\n                renderer);\n        plot.clearRangeMarkers();\n        Marker baseline = new ValueMarker(0.0);\n        baseline.setPaint(Color.black);\n        plot.addRangeMarker(baseline, Layer.FOREGROUND);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }
318	protected void adjustDownwards(double minY, double height) {\n        for (int i = 0; i < this.labels.size() - 1; i++) {\n            PieLabelRecord record0 = getPieLabelRecord(i);\n            PieLabelRecord record1 = getPieLabelRecord(i + 1);\n            if (record1.getLowerY() < record0.getUpperY()) {\n                record1.setAllocatedY(Math.min(minY + height\n                        - record1.getLabelHeight() / 2.0,\n                        record0.getUpperY() + this.minGap\n                        + record1.getLabelHeight() / 2.0));\n            }\n        }\n    }
319	public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Line2D line = null;\n        double v = axis.valueToJava2D(value, dataArea, \n                plot.getDomainAxisEdge());\n        if (orientation.isHorizontal()) {\n            line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(),\n                    v);\n        } else if (orientation.isVertical()) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        g2.draw(line);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n    }
320	public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n                                    double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n                                    double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n                        box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n                        g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n                        g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yy + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n                g2.setPaint(this.artifactPaint);\n        double aRadius;                         if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                                                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n                if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n                if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }
321	private Point2D calculateLabelPoint(Line2D line, RectangleAnchor anchor,\n            double deltaX, double deltaY) {\n        double x, y;\n        boolean left = (anchor == RectangleAnchor.BOTTOM_LEFT \n                || anchor == RectangleAnchor.LEFT \n                || anchor == RectangleAnchor.TOP_LEFT);\n        boolean right = (anchor == RectangleAnchor.BOTTOM_RIGHT \n                || anchor == RectangleAnchor.RIGHT \n                || anchor == RectangleAnchor.TOP_RIGHT);\n        boolean top = (anchor == RectangleAnchor.TOP_LEFT \n                || anchor == RectangleAnchor.TOP \n                || anchor == RectangleAnchor.TOP_RIGHT);\n        boolean bottom = (anchor == RectangleAnchor.BOTTOM_LEFT\n                || anchor == RectangleAnchor.BOTTOM\n                || anchor == RectangleAnchor.BOTTOM_RIGHT);\n        Rectangle rect = line.getBounds();\n        \n                if (line.getX1() == line.getX2()) {              x = line.getX1();\n            y = (line.getY1() + line.getY2()) / 2.0;\n            if (left) {\n                x = x - deltaX;\n            }\n            if (right) {\n                x = x + deltaX;\n            }\n            if (top) {\n                y = Math.min(line.getY1(), line.getY2()) + deltaY;\n            }\n            if (bottom) {\n                y = Math.max(line.getY1(), line.getY2()) - deltaY;\n            }\n        }\n        else {              x = (line.getX1() + line.getX2()) / 2.0;\n            y = line.getY1();\n            if (left) {\n                x = Math.min(line.getX1(), line.getX2()) + deltaX;\n            }\n            if (right) {\n                x = Math.max(line.getX1(), line.getX2()) - deltaX;\n            }\n            if (top) {\n                y = y - deltaY;\n            }\n            if (bottom) {\n                y = y + deltaY;\n            }\n        }\n        return new Point2D.Double(x, y);\n    }
322	private void saveAsSVG(File f) throws IOException {\n        File file = f;\n        if (file == null) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                    localizationResources.getString("SVG_Files"), "svg");\n            fileChooser.addChoosableFileFilter(filter);\n            fileChooser.setFileFilter(filter);\n\n            int option = fileChooser.showSaveDialog(this);\n            if (option == JFileChooser.APPROVE_OPTION) {\n                String filename = fileChooser.getSelectedFile().getPath();\n                if (isEnforceFileExtensions()) {\n                    if (!filename.endsWith(".svg")) {\n                        filename = filename + ".svg";\n                    }\n                }\n                file = new File(filename);\n                if (file.exists()) {\n                    String fileExists = localizationResources.getString(\n                            "FILE_EXISTS_CONFIRM_OVERWRITE");\n                    int response = JOptionPane.showConfirmDialog(this, \n                            fileExists, "Save As SVG", \n                            JOptionPane.OK_CANCEL_OPTION);\n                    if (response == JOptionPane.CANCEL_OPTION) {\n                        file = null;\n                    }\n                }\n            }\n        }\n        \n        if (file != null) {\n                        String svg = generateSVG(getWidth(), getHeight());\n            BufferedWriter writer = null;\n            try {\n                writer = new BufferedWriter(new FileWriter(file));\n                writer.write("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");\n                writer.write(svg + "\n");\n                writer.flush();\n            } finally {\n                try {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                } catch (IOException ex) {\n                    throw new RuntimeException(ex);\n                }\n            } \n\n        }\n    }
323	public TimeSeries addAndOrUpdate(TimeSeries series) {\n        TimeSeries overwritten = new TimeSeries("Overwritten values from: "\n                + getKey());\n        for (int i = 0; i < series.getItemCount(); i++) {\n            TimeSeriesDataItem item = series.getRawDataItem(i);\n            TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(),\n                    item.getValue());\n            if (oldItem != null) {\n                overwritten.add(oldItem);\n            }\n        }\n        return overwritten;\n    }
324	public void updateCrosshairY(double candidateY, int rangeAxisIndex) {\n        double d = Math.abs(candidateY - this.anchorY);\n        if (d < this.distance) {\n            this.crosshairY = candidateY;\n            this.rangeAxisIndex = rangeAxisIndex;\n            this.distance = d;\n        }\n\n    }
325	public void drawOutline(Graphics2D g2, Rectangle2D area) {\n        if (!this.outlineVisible) {\n            return;\n        }\n        if ((this.outlineStroke != null) && (this.outlinePaint != null)) {\n            g2.setStroke(this.outlineStroke);\n            g2.setPaint(this.outlinePaint);\n            Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\n            g2.draw(area);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n        }\n    }
326	public static Range findRangeBounds(XYDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        Range result;\n        if (dataset instanceof XYRangeInfo) {\n            XYRangeInfo info = (XYRangeInfo) dataset;\n            result = info.getRangeBounds(visibleSeriesKeys, xRange,\n                    includeInterval);\n        }\n        else {\n            result = iterateToFindRangeBounds(dataset, visibleSeriesKeys,\n                    xRange, includeInterval);\n        }\n        return result;\n    }
327	public synchronized long setTimeBase(RegularTimePeriod start) {\n        if (this.pointsInTime[0] == null) {\n            this.pointsInTime[0] = start;\n            for (int i = 1; i < this.historyCount; i++) {\n                this.pointsInTime[i] = this.pointsInTime[i - 1].next();\n            }\n        }\n        long oldestL = this.pointsInTime[0].getFirstMillisecond(\n                this.workingCalendar);\n        long nextL = this.pointsInTime[1].getFirstMillisecond(\n                this.workingCalendar);\n        this.deltaTime = nextL - oldestL;\n        this.oldestAt = 0;\n        this.newestAt = this.historyCount - 1;\n        findDomainLimits();\n        return this.deltaTime;\n    }
328	public static void removeCodeBase(URL codeBase,\n            URLClassLoader urlClassLoader) {\n        List urlsNoBase = new ArrayList();\n\n        URL[] urls = urlClassLoader.getURLs();\n        for (int i = 0; i < urls.length; i++) {\n            if (!urls[i].sameFile(codeBase)) {\n                urlsNoBase.add(urls[i]);\n            }\n        }\n                URL[] urlsNoBaseArray = (URL[]) urlsNoBase.toArray(new URL[0]);\n        noCodeBaseClassLoader = URLClassLoader.newInstance(urlsNoBaseArray);\n    }
329	public void addBin(SimpleHistogramBin bin) {\n                Iterator iterator = this.bins.iterator();\n        while (iterator.hasNext()) {\n            SimpleHistogramBin existingBin\n                    = (SimpleHistogramBin) iterator.next();\n            if (bin.overlapsWith(existingBin)) {\n                throw new RuntimeException("Overlapping bin");\n            }\n        }\n        this.bins.add(bin);\n        Collections.sort(this.bins);\n    }
330	public static void writeChartAsPNG(OutputStream out, JFreeChart chart,\n            int width, int height, ChartRenderingInfo info,\n            boolean encodeAlpha, int compression) throws IOException {\n\n        ParamChecks.nullNotPermitted(out, "out");\n        ParamChecks.nullNotPermitted(chart, "chart");\n        BufferedImage chartImage = chart.createBufferedImage(width, height,\n                BufferedImage.TYPE_INT_ARGB, info);\n        ChartUtilities.writeBufferedImageAsPNG(out, chartImage, encodeAlpha,\n                compression);\n\n    }
331	protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                    int index, Layer layer) {\n\n        XYItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n                        if (index >= getDatasetCount()) {\n            return;\n        }\n        Collection markers = getRangeMarkers(index, layer);\n        ValueAxis axis = getRangeAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                Marker marker = (Marker) iterator.next();\n                r.drawRangeMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n    }
332	protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    centerHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], centerHeight));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], centerHeight));\n        }\n        return new Size2D(width, height);\n    }
333	public synchronized RegularTimePeriod advanceTime() {\n        RegularTimePeriod nextInstant = this.pointsInTime[this.newestAt].next();\n        this.newestAt = this.oldestAt;                                                  \n                        boolean extremaChanged = false;\n        float oldMax = 0.0f;\n        if (this.maxValue != null) {\n            oldMax = this.maxValue.floatValue();\n        }\n        for (int s = 0; s < getSeriesCount(); s++) {\n            if (this.valueHistory[s].getData(this.oldestAt) == oldMax) {\n                extremaChanged = true;\n            }\n            if (extremaChanged) {\n                break;\n            }\n        }  \n        if (extremaChanged) {\n            invalidateRangeInfo();\n        }\n                float wiper = (float) 0.0;\n        for (int s = 0; s < getSeriesCount(); s++) {\n            this.valueHistory[s].enterData(this.newestAt, wiper);\n        }\n                this.pointsInTime[this.newestAt] = nextInstant;\n                this.oldestAt++;\n        if (this.oldestAt >= this.historyCount) {\n            this.oldestAt = 0;\n        }\n                long startL = this.domainStart.longValue();          this.domainStart = new Long(startL + this.deltaTime);\n        long endL = this.domainEnd.longValue();\n        this.domainEnd = new Long(endL + this.deltaTime);\n        this.domainRange = new Range(startL, endL);\n        fireSeriesChanged();\n        return nextInstant;\n    }
334	private void updateBoundsForRemovedItem(XYDataItem item) {\n        boolean itemContributesToXBounds = false;\n        boolean itemContributesToYBounds = false;\n        double x = item.getXValue();\n        if (!Double.isNaN(x)) {\n            if (x <= this.minX || x >= this.maxX) {\n                itemContributesToXBounds = true;\n            }\n        }\n        if (item.getY() != null) {\n            double y = item.getYValue();\n            if (!Double.isNaN(y)) {\n                if (y <= this.minY || y >= this.maxY) {\n                    itemContributesToYBounds = true;\n                }\n            }\n        }\n        if (itemContributesToYBounds) {\n            findBoundsByIteration();\n        }\n        else if (itemContributesToXBounds) {\n            if (getAutoSort()) {\n                this.minX = getX(0).doubleValue();\n                this.maxX = getX(getItemCount() - 1).doubleValue();\n            }\n            else {\n                findBoundsByIteration();\n            }\n        }\n    }
335	public boolean removeSeries(VectorSeries series) {\n        ParamChecks.nullNotPermitted(series, "series");\n        boolean removed = this.data.remove(series);\n        if (removed) {\n            series.removeChangeListener(this);\n            fireDatasetChanged();\n        }\n        return removed;\n    }
336	public void removeColumn(Comparable columnKey) {\n        int index = getColumnIndex(columnKey);\n        if (index < 0) {\n            throw new UnknownKeyException("Column key (" + columnKey\n                    + ") not recognised.");\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects rowData = (KeyedObjects) iterator.next();\n            int i = rowData.getIndex(columnKey);\n            if (i >= 0) {\n                rowData.removeValue(i);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }
337	public void addValue(int seriesNumber, int index, float value) {\n        invalidateRangeInfo();\n        if (seriesNumber >= this.valueHistory.length) {\n            throw new IllegalArgumentException(\n                "TimeSeriesDataset.addValue(): series #"\n                + seriesNumber + "unspecified in c'tor"\n            );\n        }\n        if (this.valueHistory[seriesNumber] == null) {\n            this.valueHistory[seriesNumber]\n                = new ValueSequence(this.historyCount);\n            this.seriesCount++;\n        }\n                                    this.valueHistory[seriesNumber].enterData(index, value);\n                fireSeriesChanged();\n    }
338	public static double calculateQ3(List values) {\n        ParamChecks.nullNotPermitted(values, "values");\n        double result = Double.NaN;\n        int count = values.size();\n        if (count > 0) {\n            if (count % 2 == 1) {\n                if (count > 1) {\n                    result = Statistics.calculateMedian(values, count / 2,\n                            count - 1);\n                }\n                else {\n                    result = Statistics.calculateMedian(values, 0, 0);\n                }\n            }\n            else {\n                result = Statistics.calculateMedian(values, count / 2,\n                        count - 1);\n            }\n        }\n        return result;\n    }
339	public void drawDomainMarker(Graphics2D g2,\n                                 ContourPlot plot,\n                                 ValueAxis domainAxis,\n                                 Marker marker,\n                                 Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = domainAxis.getRange();\n            if (!range.contains(value)) {\n                return;\n            }\n\n            double x = domainAxis.valueToJava2D(value, dataArea,\n                    RectangleEdge.BOTTOM);\n            Line2D line = new Line2D.Double(x, dataArea.getMinY(), x,\n                    dataArea.getMaxY());\n            Paint paint = marker.getOutlinePaint();\n            Stroke stroke = marker.getOutlineStroke();\n            g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n            g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n            g2.draw(line);\n        }\n\n    }
340	public void validateMaximum() {\n        double newMax;\n        try {\n            newMax = Double.parseDouble(this.maximumRangeValue.getText());\n            if (newMax <= this.minimumValue) {\n                newMax = this.maximumValue;\n            }\n        }\n        catch (NumberFormatException e) {\n            newMax = this.maximumValue;\n        }\n\n        this.maximumValue = newMax;\n        this.maximumRangeValue.setText(Double.toString(this.maximumValue));\n    }
341	public void sortByValues(SortOrder order) {\n        final int size = this.keys.size();\n        final DefaultKeyedValue[] data = new DefaultKeyedValue[size];\n        for (int i = 0; i < size; i++) {\n            data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i),\n                    (Number) this.values.get(i));\n        }\n\n        Comparator comparator = new KeyedValueComparator(\n                KeyedValueComparatorType.BY_VALUE, order);\n        Arrays.sort(data, comparator);\n\n        clear();\n        for (int i = 0; i < data.length; i++) {\n            final DefaultKeyedValue value = data[i];\n            addValue(value.getKey(), value.getValue());\n        }\n    }
342	protected Size2D arrangeNF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        double height = constraint.getHeight() / this.rows;\n        RectangleConstraint bc = constraint.toFixedHeight(height);\n        List blocks = container.getBlocks();\n        double maxW = 0.0;\n        for (int r = 0; r < this.rows; r++) {\n            for (int c = 0; c < this.columns; c++) {\n                int index = r * this.columns + c;\n                if (index >= blocks.size()) {\n                    break;\n                }\n                Block b = (Block) blocks.get(index);\n                if (b != null) {\n                    Size2D s = b.arrange(g2, bc);\n                    maxW = Math.max(maxW, s.getWidth());\n                }\n            }\n        }\n        RectangleConstraint cc = constraint.toFixedWidth(maxW * this.columns);\n        return arrange(container, g2, cc);\n    }
343	public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException("Requires xLow < xHigh.");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n                                    int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n                                    int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n            }\n            return high;\n        }\n        else {\n                                                int index = 0;\n                        double x = dataset.getXValue(series, index);\n            while (index < itemCount && x < xLow) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }
344	protected Ellipse2D getWaferEdge(Rectangle2D plotArea) {\n        Ellipse2D edge = new Ellipse2D.Double();\n        double diameter = plotArea.getWidth();\n        double upperLeftX = plotArea.getX();\n        double upperLeftY = plotArea.getY();\n                if (plotArea.getWidth() != plotArea.getHeight()) {\n            double major, minor;\n            if (plotArea.getWidth() > plotArea.getHeight()) {\n                major = plotArea.getWidth();\n                minor = plotArea.getHeight();\n            }\n            else {\n                major = plotArea.getHeight();\n                minor = plotArea.getWidth();\n            }\n                        diameter = minor;\n                        if (plotArea.getWidth() == minor) {                 upperLeftY = plotArea.getY() + (major - minor) / 2;\n            }\n            else {                 upperLeftX = plotArea.getX() + (major - minor) / 2;\n            }\n        }\n        edge.setFrame(upperLeftX, upperLeftY, diameter, diameter);\n        return edge;\n    }
345	private static double round(double value, int nb) {\n        if (nb <= 0) {\n            return Math.floor(value + 0.5d);\n        }\n        double p = Math.pow(10, nb);\n        double tempval = Math.floor(value * p + 0.5d);\n        return tempval / p;\n    }
346	public void addSubtitle(int index, Title subtitle) {\n        if (index < 0 || index > getSubtitleCount()) {\n            throw new IllegalArgumentException(\n                    "The 'index' argument is out of range.");\n        }\n        ParamChecks.nullNotPermitted(subtitle, "subtitle");\n        this.subtitles.add(index, subtitle);\n        subtitle.addChangeListener(this);\n        fireChartChanged();\n    }
347	public void add(Axis axis, RectangleEdge edge) {\n        ParamChecks.nullNotPermitted(axis, "axis");\n        ParamChecks.nullNotPermitted(edge, "edge");\n        if (edge == RectangleEdge.TOP) {\n            this.axesAtTop.add(axis);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.axesAtBottom.add(axis);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.axesAtLeft.add(axis);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.axesAtRight.add(axis);\n        }\n    }
348	private void makePositionIndex(Set uniqueValues) {\n        int valuesPerColor = (int) Math.ceil(\n            (double) uniqueValues.size() / this.paintLimit\n        );\n        int count = 0;         int paint = 0;\n        for (Iterator i = uniqueValues.iterator(); i.hasNext();) {\n            this.paintIndex.put(i.next(), new Integer(paint));\n            if (++count % valuesPerColor == 0) {\n                paint++;\n            }\n            if (paint > this.paintLimit) {\n                paint = this.paintLimit;\n            }\n        }\n    }
349	private void attemptPaletteSelection() {\n        PaletteChooserPanel panel\n            = new PaletteChooserPanel(null, this.availablePaletteSamples);\n        int result = JOptionPane.showConfirmDialog(\n            this, panel, localizationResources.getString("Palette_Selection"),\n            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE\n        );\n\n        if (result == JOptionPane.OK_OPTION) {\n            double zmin = this.currentPalette.getPalette().getMinZ();\n            double zmax = this.currentPalette.getPalette().getMaxZ();\n            this.currentPalette.setPalette(panel.getSelectedPalette());\n            this.currentPalette.getPalette().setMinZ(zmin);\n            this.currentPalette.getPalette().setMaxZ(zmax);\n        }\n    }
350	public Rectangle2D scale(Rectangle2D rect) {\n        Insets insets = getInsets();\n        double x = rect.getX() * getScaleX() + insets.left;\n        double y = rect.getY() * getScaleY() + insets.top;\n        double w = rect.getWidth() * getScaleX();\n        double h = rect.getHeight() * getScaleY();\n        return new Rectangle2D.Double(x, y, w, h);\n    }
351	protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        RectangleConstraint c1 = constraint.toUnconstrainedWidth();\n        Size2D size1 = arrange(container, g2, c1);\n\n        if (constraint.getWidthRange().contains(size1.getWidth())) {\n            return size1;\n        }\n        else {\n            double w = constraint.getWidthRange().constrain(size1.getWidth());\n            RectangleConstraint c2 = constraint.toFixedWidth(w);\n            return arrange(container, g2, c2);\n        }\n    }
352	public void update(int index, Number y) {\n        XYDataItem item = getRawDataItem(index);\n\n                boolean iterate = false;\n        double oldY = item.getYValue();\n        if (!Double.isNaN(oldY)) {\n            iterate = oldY <= this.minY || oldY >= this.maxY;\n        }\n        item.setY(y);\n\n        if (iterate) {\n            findBoundsByIteration();\n        }\n        else if (y != null) {\n            double yy = y.doubleValue();\n            this.minY = minIgnoreNaN(this.minY, yy);\n            this.maxY = maxIgnoreNaN(this.maxY, yy);\n        }\n        fireSeriesChanged();\n    }
353	public void updateXPoints() {\n        this.propagateEvents = false;\n        for (int s = 0; s < this.data.size(); s++) {\n            updateXPoints((XYSeries) this.data.get(s));\n        }\n        if (this.autoPrune) {\n            prune();\n        }\n        this.propagateEvents = true;\n    }
354	public void removeColumn(Comparable columnKey) {\n        ParamChecks.nullNotPermitted(columnKey, "columnKey");\n        if (!this.columnKeys.contains(columnKey)) {\n            throw new UnknownKeyException("Unknown key: " + columnKey);\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                rowData.removeValue(columnKey);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }
355	protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int visibleRow,\n                                    int row,\n                                    int column) {\n\n                double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea,\n                domainAxis, state, visibleRow, column);\n\n                Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {              if (value >= uclip) {\n                return;             }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) {             if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else {             if (value <= lclip) {\n                return;             }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea,\n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,\n                rectHeight);\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n                if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n                Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()\n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()\n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);\n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));\n            }\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n\n            Line2D line;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (value < 0.0));\n        }\n\n                EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }
356	public void updatePlotProperties(Plot plot) {\n\n                plot.setOutlinePaint(getOutlinePaint());\n        plot.setOutlineStroke(getOutlineStroke());\n        plot.setBackgroundPaint(getBackgroundPaint());\n        plot.setInsets(getPlotInsets());\n\n                if (this.domainAxisPropertyPanel != null) {\n            Axis domainAxis = null;\n            if (plot instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) plot;\n                domainAxis = p.getDomainAxis();\n            }\n            else if (plot instanceof XYPlot) {\n                XYPlot p = (XYPlot) plot;\n                domainAxis = p.getDomainAxis();\n            }\n            if (domainAxis != null) {\n                this.domainAxisPropertyPanel.setAxisProperties(domainAxis);\n            }\n        }\n\n        if (this.rangeAxisPropertyPanel != null) {\n            Axis rangeAxis = null;\n            if (plot instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) plot;\n                rangeAxis = p.getRangeAxis();\n            }\n            else if (plot instanceof XYPlot) {\n                XYPlot p = (XYPlot) plot;\n                rangeAxis = p.getRangeAxis();\n            }\n            else if (plot instanceof PolarPlot) {\n                PolarPlot p = (PolarPlot) plot;\n                rangeAxis = p.getAxis();\n            }\n            if (rangeAxis != null) {\n                this.rangeAxisPropertyPanel.setAxisProperties(rangeAxis);\n            }\n        }\n\n        if (this.plotOrientation != null) {\n            if (plot instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) plot;\n                p.setOrientation(this.plotOrientation);\n            }\n            else if (plot instanceof XYPlot) {\n                XYPlot p = (XYPlot) plot;\n                p.setOrientation(this.plotOrientation);\n            }\n        }\n\n        if (this.drawLines != null) {\n            if (plot instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) plot;\n                CategoryItemRenderer r = p.getRenderer();\n                if (r instanceof LineAndShapeRenderer) {\n                    ((LineAndShapeRenderer) r).setLinesVisible(\n                            this.drawLines.booleanValue());\n                }\n            }\n            else if (plot instanceof XYPlot) {\n                XYPlot p = (XYPlot) plot;\n                XYItemRenderer r = p.getRenderer();\n                if (r instanceof StandardXYItemRenderer) {\n                    ((StandardXYItemRenderer) r).setPlotLines(\n                            this.drawLines.booleanValue());\n                }\n            }\n        }\n\n        if (this.drawShapes != null) {\n            if (plot instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) plot;\n                CategoryItemRenderer r = p.getRenderer();\n                if (r instanceof LineAndShapeRenderer) {\n                    ((LineAndShapeRenderer) r).setShapesVisible(\n                            this.drawShapes.booleanValue());\n                }\n            }\n            else if (plot instanceof XYPlot) {\n                XYPlot p = (XYPlot) plot;\n                XYItemRenderer r = p.getRenderer();\n                if (r instanceof StandardXYItemRenderer) {\n                    ((StandardXYItemRenderer) r).setBaseShapesVisible(\n                        this.drawShapes.booleanValue());\n                }\n            }\n        }\n\n        if (this.colorBarAxisPropertyPanel != null) {\n            ColorBar colorBar = null;\n            if (plot instanceof  ContourPlot) {\n                ContourPlot p = (ContourPlot) plot;\n                colorBar = p.getColorBar();\n            }\n            if (colorBar != null) {\n                this.colorBarAxisPropertyPanel.setAxisProperties(colorBar);\n            }\n        }\n\n    }
357	protected AxisState drawTickMarksAndLabels(Graphics2D g2,\n            double cursor, Rectangle2D plotArea, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        AxisState state = new AxisState(cursor);\n        if (isAxisLineVisible()) {\n            drawAxisLine(g2, cursor, dataArea, edge);\n        }\n        List ticks = refreshTicks(g2, state, dataArea, edge);\n        state.setTicks(ticks);\n        g2.setFont(getTickLabelFont());\n        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, \n                RenderingHints.VALUE_STROKE_NORMALIZE);\n        Iterator iterator = ticks.iterator();\n        while (iterator.hasNext()) {\n            ValueTick tick = (ValueTick) iterator.next();\n            if (isTickLabelsVisible()) {\n                g2.setPaint(getTickLabelPaint());\n                float[] anchorPoint = calculateAnchorPoint(tick, cursor,\n                        dataArea, edge);\n                if (tick instanceof LogTick) {\n                    LogTick lt = (LogTick) tick;\n                    if (lt.getAttributedLabel() == null) {\n                        continue;\n                    }\n                    AttrStringUtils.drawRotatedString(lt.getAttributedLabel(), \n                            g2, anchorPoint[0], anchorPoint[1], \n                            tick.getTextAnchor(), tick.getAngle(), \n                            tick.getRotationAnchor());\n                } else {\n                    if (tick.getText() == null) {\n                        continue;\n                    }\n                    TextUtilities.drawRotatedString(tick.getText(), g2,\n                            anchorPoint[0], anchorPoint[1], \n                            tick.getTextAnchor(), tick.getAngle(), \n                            tick.getRotationAnchor());\n                }\n            }\n\n            if ((isTickMarksVisible() && tick.getTickType().equals(\n                    TickType.MAJOR)) || (isMinorTickMarksVisible()\n                    && tick.getTickType().equals(TickType.MINOR))) {\n\n                double ol = (tick.getTickType().equals(TickType.MINOR)) \n                        ? getMinorTickMarkOutsideLength()\n                        : getTickMarkOutsideLength();\n\n                double il = (tick.getTickType().equals(TickType.MINOR)) \n                        ? getMinorTickMarkInsideLength()\n                        : getTickMarkInsideLength();\n\n                float xx = (float) valueToJava2D(tick.getValue(), dataArea,\n                        edge);\n                Line2D mark = null;\n                g2.setStroke(getTickMarkStroke());\n                g2.setPaint(getTickMarkPaint());\n                if (edge == RectangleEdge.LEFT) {\n                    mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx);\n                }\n                else if (edge == RectangleEdge.RIGHT) {\n                    mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx);\n                }\n                else if (edge == RectangleEdge.TOP) {\n                    mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il);\n                }\n                else if (edge == RectangleEdge.BOTTOM) {\n                    mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il);\n                }\n                g2.draw(mark);\n            }\n        }\n        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);\n        \n                        double used = 0.0;\n        if (isTickLabelsVisible()) {\n            if (edge == RectangleEdge.LEFT) {\n                used += findMaximumTickLabelWidth(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n                state.cursorLeft(used);\n            } else if (edge == RectangleEdge.RIGHT) {\n                used = findMaximumTickLabelWidth(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n                state.cursorRight(used);\n            } else if (edge == RectangleEdge.TOP) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n                state.cursorUp(used);\n            } else if (edge == RectangleEdge.BOTTOM) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n                state.cursorDown(used);\n            }\n        }\n\n        return state;\n    }
358	public void insertValue(int position, Comparable key, Object value) {\n        if (position < 0 || position > this.data.size()) {\n            throw new IllegalArgumentException("'position' out of bounds.");\n        }\n        ParamChecks.nullNotPermitted(key, "key");\n        int pos = getIndex(key);\n        if (pos >= 0) {\n            this.data.remove(pos);\n        }\n        KeyedObject item = new KeyedObject(key, value);\n        if (position <= this.data.size()) {\n            this.data.add(position, item);\n        }\n        else {\n            this.data.add(item);\n        }\n    }
359	protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                    int index, Layer layer) {\n\n        CategoryItemRenderer r = getRenderer(index);\n        if (r == null) {\n            return;\n        }\n\n        Collection markers = getRangeMarkers(index, layer);\n        ValueAxis axis = getRangeAxisForDataset(index);\n        if (markers != null && axis != null) {\n            Iterator iterator = markers.iterator();\n            while (iterator.hasNext()) {\n                Marker marker = (Marker) iterator.next();\n                r.drawRangeMarker(g2, this, axis, marker, dataArea);\n            }\n        }\n\n    }
360	public void zoomOutRange(double x, double y) {\n        Plot plot = this.chart.getPlot();\n        if (plot instanceof Zoomable) {\n                                                boolean savedNotify = plot.isNotify();\n            plot.setNotify(false);\n            Zoomable z = (Zoomable) plot;\n            z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(),\n                    translateScreenToJava2D(new Point((int) x, (int) y)),\n                    this.zoomAroundAnchor);\n            plot.setNotify(savedNotify);\n        }\n    }
361	protected void drawHorizontal(Graphics2D g2, Rectangle2D area) {\n        Rectangle2D titleArea = (Rectangle2D) area.clone();\n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextBlockAnchor anchor = null;\n        float x = 0.0f;\n        HorizontalAlignment horizontalAlignment = getHorizontalAlignment();\n        if (horizontalAlignment == HorizontalAlignment.LEFT) {\n            x = (float) titleArea.getX();\n            anchor = TextBlockAnchor.TOP_LEFT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n            x = (float) titleArea.getMaxX();\n            anchor = TextBlockAnchor.TOP_RIGHT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n            x = (float) titleArea.getCenterX();\n            anchor = TextBlockAnchor.TOP_CENTER;\n        }\n        float y = 0.0f;\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP) {\n            y = (float) titleArea.getY();\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            y = (float) titleArea.getMaxY();\n            if (horizontalAlignment == HorizontalAlignment.LEFT) {\n                anchor = TextBlockAnchor.BOTTOM_LEFT;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n                anchor = TextBlockAnchor.BOTTOM_CENTER;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n                anchor = TextBlockAnchor.BOTTOM_RIGHT;\n            }\n        }\n        this.content.draw(g2, x, y, anchor);\n    }
362	public void delete(int start, int end) {\n        for (int i = 0; i <= (end - start); i++) {\n            this.data.remove(start);\n        }\n        recalculateBounds();\n        fireSeriesChanged();\n    }
363	public void updateCrosshairPoint(double x, double y, int domainAxisIndex,\n            int rangeAxisIndex, double transX, double transY,\n            PlotOrientation orientation) {\n\n        if (this.anchor != null) {\n            double d = 0.0;\n            if (this.calculateDistanceInDataSpace) {\n                d = (x - this.anchorX) * (x - this.anchorX)\n                  + (y - this.anchorY) * (y - this.anchorY);\n            }\n            else {\n                double xx = this.anchor.getX();\n                double yy = this.anchor.getY();\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    double temp = yy;\n                    yy = xx;\n                    xx = temp;\n                }\n                d = (transX - xx) * (transX - xx)\n                    + (transY - yy) * (transY - yy);\n            }\n\n            if (d < this.distance) {\n                this.crosshairX = x;\n                this.crosshairY = y;\n                this.domainAxisIndex = domainAxisIndex;\n                this.rangeAxisIndex = rangeAxisIndex;\n                this.distance = d;\n            }\n        }\n\n    }
364	public Point translateToJava2D(double angleDegrees, double radius,\n            ValueAxis axis, Rectangle2D dataArea) {\n\n        if (counterClockwise) {\n            angleDegrees = -angleDegrees;\n        }\n        double radians = Math.toRadians(angleDegrees + this.angleOffset);\n\n        double minx = dataArea.getMinX() + this.margin;\n        double maxx = dataArea.getMaxX() - this.margin;\n        double miny = dataArea.getMinY() + this.margin;\n        double maxy = dataArea.getMaxY() - this.margin;\n\n        double halfWidth = (maxx - minx) / 2.0;\n        double halfHeight = (maxy - miny) / 2.0;\n\n        double midX = minx + halfWidth;\n        double midY = miny + halfHeight;\n\n        double l = Math.min(halfWidth, halfHeight);\n        Rectangle2D quadrant = new Rectangle2D.Double(midX, midY, l, l);\n\n        double axisMin = axis.getLowerBound();\n        double adjustedRadius = Math.max(radius, axisMin);\n\n        double length = axis.valueToJava2D(adjustedRadius, quadrant, RectangleEdge.BOTTOM) - midX;\n        float x = (float) (midX + Math.cos(radians) * length);\n        float y = (float) (midY + Math.sin(radians) * length);\n\n        int ix = Math.round(x);\n        int iy = Math.round(y);\n\n        Point p = new Point(ix, iy);\n        return p;\n\n    }
365	private List extractColumnKeys(String line) {\n        List keys = new java.util.ArrayList();\n        int fieldIndex = 0;\n        int start = 0;\n        for (int i = 0; i < line.length(); i++) {\n            if (line.charAt(i) == this.fieldDelimiter) {\n                if (fieldIndex > 0) {                                                             String key = line.substring(start, i);\n                    keys.add(removeStringDelimiters(key));\n                }\n                start = i + 1;\n                fieldIndex++;\n            }\n        }\n        String key = line.substring(start, line.length());\n        keys.add(removeStringDelimiters(key));\n        return keys;\n    }
366	public void zoomRange(double lowerPercent, double upperPercent) {\n        double start = this.range.getLowerBound();\n        double length = this.range.getLength();\n        double r0, r1;\n        if (isInverted()) {\n            r0 = start + (length * (1 - upperPercent));\n            r1 = start + (length * (1 - lowerPercent));\n        }\n        else {\n            r0 = start + length * lowerPercent;\n            r1 = start + length * upperPercent;\n        }\n        if ((r1 > r0) && !Double.isInfinite(r1 - r0)) {\n            setRange(new Range(r0, r1));\n        }\n    }
367	public GeneralPath generateClipPath(Rectangle2D dataArea,\n                                        ValueAxis horizontalAxis,\n                                        ValueAxis verticalAxis) {\n\n        GeneralPath generalPath = new GeneralPath();\n        double transX = horizontalAxis.valueToJava2D(\n            this.xValue[0], dataArea, RectangleEdge.BOTTOM\n        );\n        double transY = verticalAxis.valueToJava2D(\n            this.yValue[0], dataArea, RectangleEdge.LEFT\n        );\n        generalPath.moveTo((float) transX, (float) transY);\n        for (int k = 0; k < this.yValue.length; k++) {\n            transX = horizontalAxis.valueToJava2D(\n                this.xValue[k], dataArea, RectangleEdge.BOTTOM\n            );\n            transY = verticalAxis.valueToJava2D(\n                this.yValue[k], dataArea, RectangleEdge.LEFT\n            );\n            generalPath.lineTo((float) transX, (float) transY);\n        }\n        generalPath.closePath();\n\n        return generalPath;\n\n    }
368	protected double trimToContentHeight(double fixedHeight) {\n        double result = this.margin.trimHeight(fixedHeight);\n        result = this.frame.getInsets().trimHeight(result);\n        result = this.padding.trimHeight(result);\n        return Math.max(result, 0.0);\n    }
369	public static BufferedImage createHeatMapImage(HeatMapDataset dataset,\n            PaintScale paintScale) {\n\n        ParamChecks.nullNotPermitted(dataset, "dataset");\n        ParamChecks.nullNotPermitted(paintScale, "paintScale");\n        int xCount = dataset.getXSampleCount();\n        int yCount = dataset.getYSampleCount();\n        BufferedImage image = new BufferedImage(xCount, yCount,\n                BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2 = image.createGraphics();\n        for (int xIndex = 0; xIndex < xCount; xIndex++) {\n            for (int yIndex = 0; yIndex < yCount; yIndex++) {\n                double z = dataset.getZValue(xIndex, yIndex);\n                Paint p = paintScale.getPaint(z);\n                g2.setPaint(p);\n                g2.fillRect(xIndex, yCount - yIndex - 1, 1, 1);\n            }\n        }\n        return image;\n    }
370	public void updateCrosshairX(double candidateX, int domainAxisIndex) {\n\n        double d = Math.abs(candidateX - this.anchorX);\n        if (d < this.distance) {\n            this.crosshairX = candidateX;\n            this.domainAxisIndex = domainAxisIndex;\n            this.distance = d;\n        }\n\n    }
